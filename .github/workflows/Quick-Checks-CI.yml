name: Quick checks

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

# For a PR #7488 against main branch, the `group` will become: CI-{{ 7488 || github.sha }}
# which eventually evaluates to: CI-7488 and 'sha' isn't used.
# NOTE: `||` acts as a logical OR and a default operator both,
# see: https://docs.github.com/en/actions/learn-github-actions/expressions#operators.
# When it isn't a PR against main but instead a commit pushed (or merged) to main, then `group` will
# evaluate to `${{ github.sha }}` but "cancel-in-progress" evaluates to false, so the CI on main
# will run in a new group `${{ github.sha }}`, but no previous CI will be cancelled on main
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}


env:
  MACOSX_DEPLOYMENT_TARGET: 14.0

jobs:
  Build:
    name: LFortran CI (OS=${{ matrix.os }}, LLVM=${{ matrix.llvm-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            llvm-version: "11"
          - os: macos-latest
            llvm-version: "20"
          - os: ubuntu-latest
            llvm-version: "11"
          - os: ubuntu-latest
            llvm-version: "20"
          - os: windows-2025
            llvm-version: "11"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v2.0.2
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/environment.yml
          create-args: >-
            llvmdev=${{ matrix.llvm-version }}

      - name: Install Windows Packages
        if: contains(matrix.os, 'windows')
        shell: bash -e -l {0}
        run: |
          micromamba install m2-bison=3.0.4 m2-filesystem cmake=3.21.1 zstd-static=1.5.5 zlib=1.2.13

      - name: Install Linux / macOS Packages
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        shell: bash -e -l {0}
        run: |
          micromamba install bison=3.4 openblas=0.3.21 llvm-openmp=14.0.4 openmpi=5.0.6 zlib=1.3.1
          if [[ "${{ matrix.llvm-version }}" == "11" ]]; then
            micromamba install zstd-static=1.5.6 nodejs=18.20.4 kokkos=4.4.01
          elif [[ "${{ matrix.llvm-version }}" == "20" ]]; then
            micromamba install zstd-static=1.5.7
          fi
          if [[ "${{ matrix.os }}" == *ubuntu* && "${{ matrix.llvm-version }}" != "11" ]]; then
            micromamba install libunwind=1.7.2
          fi
          if [[ "${{ matrix.os }}" == *ubuntu* && "${{ matrix.llvm-version }}" == "11" ]]; then
            micromamba install pandoc=3.1.13
          fi

      - uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.llvm-version }}

      - name: Setup Platform
        shell: bash -e -l {0}
        run: |
            echo "LFORTRAN_CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
            echo "CMAKE_C_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV
            echo "CMAKE_CXX_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV
            echo "ENABLE_RUNTIME_STACKTRACE=yes" >> $GITHUB_ENV

      # we need to run this only once for debugging purpose
      - name: Print github concurrent group name
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '20')
        run: |
          echo "Concurrency Group: ${{ github.workflow }}-${{ github.event.number || github.sha }}"
          echo "Cancel-in-progress: ${{ github.event_name == 'pull_request' }}"

      - name: Build (Linux / macOS)
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            export CXXFLAGS="-Werror"
            export CFLAGS="-Werror"
            export WIN=0
            shell ci/build.sh

      - name: Build (Windows)
        if: contains(matrix.os, 'windows')
        shell: cmd
        run: |
            set MAMBA_INSTALL_LOCN=C:\\Users\runneradmin\micromamba
            call %MAMBA_INSTALL_LOCN%\Scripts\activate.bat
            call micromamba activate lf
            set LFORTRAN_CMAKE_GENERATOR=Ninja
            set WIN=1
            set MACOS=0
            set ENABLE_RUNTIME_STACKTRACE=no
            call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
            set CC=cl.exe
            set CXX=cl.exe
            set "PATH=%PATH:C:\mingw64\bin;=%"
            shell ci\build.sh

      - name: Test (Linux / macOS)
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            case "$OSTYPE" in darwin*) export MACOS=1;; *) export MACOS=0;; esac
            export LFORTRAN_LLVM_VERSION=${{ matrix.llvm-version }}
            export LFORTRAN_TEST_ENV_VAR='STATUS OK!'
            shell ci/test.sh

      - name: Test LFortran's Command Line Interface (Linux / macOS)
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            ./test_lfortran_cmdline

      - name: Test with specific Fortran standard
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            cd ./integration_tests
            ./run_tests.py -b llvm --std=f23
            ./run_tests.py -b llvm -f --std=f23 -nf16

      - name: Test (Windows)
        if: contains(matrix.os, 'windows')
        shell: cmd
        run: |
            set MAMBA_INSTALL_LOCN=C:\\Users\runneradmin\micromamba
            call %MAMBA_INSTALL_LOCN%\Scripts\activate.bat
            call micromamba activate lf
            set LFORTRAN_CMAKE_GENERATOR=Ninja
            set WIN=1
            set MACOS=0
            set ENABLE_RUNTIME_STACKTRACE=no
            call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
            set CC=cl.exe
            set CXX=cl.exe
            set "PATH=%PATH:C:\mingw64\bin;=%"
            shell ci\test.sh

      - name: Install Timeout (macOS)
        shell: bash -e -l {0}
        if: contains(matrix.os, 'macos')
        run: brew install coreutils

      # ~/.bash_logout wanted to run `/usr/bin/clear_console -q` while exiting
      # login shells which frequently erred on ubuntu-latest since the shell was
      # not run interactively.
      - name: Disable ~/.bash_logout (Linux)
        shell: bash -e {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: mv -v ~/.bash_logout ~/.bash_logout.bak

      - name: LSP Test (Linux / macOS)
        shell: bash -e -l {0}
        if: (contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')) && contains(matrix.llvm-version, '11')
        timeout-minutes: 5
        env:
            EXIT_SUCCESS: 0
            EXIT_TIMEOUT: 124
            EXIT_KILL: 137
            MAX_ATTEMPTS: 3
            SIGTERM_TIMEOUT: 60s
            SIGKILL_TIMEOUT: 10s
            PYTEST_TIMEOUT: 10
        run: |
            set -ex
            pip install src/server/tests tests/server
            timeout -k $SIGKILL_TIMEOUT $SIGTERM_TIMEOUT \
                pytest -vv \
                    --showlocals \
                    --timeout=$PYTEST_TIMEOUT \
                    --execution-strategy="concurrent" \
                    tests/server
            set +e
            for (( ATTEMPT = 1; ATTEMPT <= MAX_ATTEMPTS; ATTEMPT++ )); do
                echo "Attempt $ATTEMPT of $MAX_ATTEMPTS"
                timeout -k $SIGKILL_TIMEOUT $SIGTERM_TIMEOUT \
                    pytest -vv \
                        --showlocals \
                        --timeout=$PYTEST_TIMEOUT \
                        --execution-strategy="parallel" \
                        tests/server
                EXIT_CODE=$?
                if [ $EXIT_CODE -eq $EXIT_SUCCESS ]; then
                    break
                fi
                echo "Command failed with exit code: $EXIT_CODE" 1>&2
            done
            set -e
            exit $EXIT_CODE

      - name: Check Third Party Code Compilation - Test third party codes
        shell: bash -e -x -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            export PATH="$(pwd)/src/bin:$PATH"
            RUNNER_OS="${{matrix.os}}" FC="$(pwd)/src/bin/lfortran" ci/test_third_party_codes.sh

      # The below projects are tested with a higher CMake version, so replace the current installed version
      - name: Check Third Party Code Compilation - Override cmake version to 3.31.2
        if: contains(matrix.os, 'ubuntu')
        run: micromamba install -y -n lf cmake=3.31.2

      - name: Check Third Party Code Compilation - Test Examples/Project 1
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu')
        run: |
            cd ./examples/project1
            FC=../../src/bin/lfortran cmake . -DCMAKE_Fortran_COMPILER_WORKS=True
            cmake --build . -v
            ./project1

      - name: Check Third Party Code Compilation - Test Examples/Project 2
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu')
        run: |
            cd ./examples/project2
            FC=../../src/bin/lfortran cmake . -DCMAKE_Fortran_COMPILER_WORKS=True
            cmake --build . -v
            ./doconcurrent

      - name: Check Third Party Code Compilation - Test Examples/Project 3
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu')
        run: |
            cd ./examples/project3
            FC=../../src/bin/lfortran cmake . -DCMAKE_Fortran_COMPILER_WORKS=True
            cmake --build . -v
            ./project3

      - name: Check Third Party Code Compilation - Test Lapack
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            export PATH="$(pwd)/src/bin:$PATH"
            git clone https://github.com/gxyd/lapack.git
            cd lapack
            git fetch origin lf_07
            git checkout lf_07
            git checkout 9d9e48987ca109d46b92d515b59cb591fab9859a
            cd build
            micromamba create -f environment_unix.yml
            micromamba activate lapack
            ./build_lf.sh

      # restore the version of cmake
      - name: Check Third Party Code Compilation - Restore cmake version to 3.29.1
        if: contains(matrix.os, 'ubuntu')
        run: micromamba install -y -n lf cmake=3.29.1

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test integration_tests with GFortran
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            cd integration_tests
            ./run_tests.py -b gfortran

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test Debug Build Linux
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            ctest
            ./run_tests.py
            ./run_tests.py -vh
            cd integration_tests
            ./run_tests.py -m
            ./run_tests.py -b llvm
            ./run_tests.py -b llvm -f -nf16

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test OpenMP
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            cd integration_tests
            ./run_tests.py -b llvm_omp
      
      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test Target Offload
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            cd integration_tests
            ./run_tests.py -b target_offload

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test Fortran Backend
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            cd integration_tests
            ./run_tests.py -b fortran -j1
            ./run_tests.py -b fortran -f -j1

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test C/C++ Backend
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            mkdir build-kokkos
            cd build-kokkos
            wget https://github.com/kokkos/kokkos/archive/3.1.01.tar.gz
            tar xaf 3.1.01.tar.gz
            cd kokkos-3.1.01
            mkdir build
            cd build
            export LFORTRAN_KOKKOS_DIR=$HOME/ext/kokkos
            cmake -DCMAKE_INSTALL_PREFIX=$LFORTRAN_KOKKOS_DIR -DKokkos_ENABLE_OPENMP=On -DKokkos_ARCH_HSW=On ..
            make
            make install
            cd ../../..

            cd integration_tests
            ./run_tests.py -b cpp c c_nopragma
            ./run_tests.py -b cpp c c_nopragma -f

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test CPP
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            shell ci/test_cpp_version.sh

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Show Node Info
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
          set -ex
          which node
          node --version

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test WASM backend
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            cd integration_tests
            ./run_tests.py -b wasm
            ./run_tests.py -b wasm -f

      - name: Check Bison Grammar for Essential Conflicts
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '20')
        shell: bash -e -l {0}
        run: |
          ./ci/grammar_conflicts.sh

      # Run last. Script checks out to first commit in PR history
      - name: Check for Added Binary Files
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '20')
        run: |
          python3 check_binary_file_in_git_history.py

  build_to_wasm_and_upload:
    name: Build LFortran to WASM and Upload
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v2.0.2
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name : Remove existing node
        shell: bash -e -l {0}
        run : |
            which node
            node -v
            sudo rm -rf /usr/local/bin/node /usr/local/bin/npm

      - name: Install Emscripten from Git
        # TODO: This fails with "-e" for some reason:
        shell: bash -l {0}
        run: |
            mkdir $HOME/ext
            cd $HOME/ext

            git clone https://github.com/emscripten-core/emsdk.git
            cd emsdk

            ./emsdk install 3.1.35

            ./emsdk activate 3.1.35

            ./emsdk install node-18.20.3-64bit

            ./emsdk activate node-18.20.3-64bit

      - name: Show Emscripten and Node Info
        shell: bash -l {0}
        run: |
            set -ex
            # Activate PATH and other environment variables in the current terminal
            source $HOME/ext/emsdk/emsdk_env.sh
            emcc -v
            em++ -v
            which node
            node -v

      - name: Build to WASM
        shell: bash -l {0}
        run: |
            set -ex
            source $HOME/ext/emsdk/emsdk_env.sh # Activate Emscripten
            ./build_to_wasm.sh

      - name: Test built lfortran.wasm
        shell: bash -l {0}
        run: |
            set -ex
            source $HOME/ext/emsdk/emsdk_env.sh # Activate Emscripten
            which node
            node -v
            node src/lfortran/tests/test_lfortran.js

      - name: Upload to wasm_builds
        shell: bash -l {0}
        run: |
            ci/upload_lfortran_wasm.sh
        env:
          SSH_PRIVATE_KEY_WASM_BUILDS: ${{ secrets.SSH_PRIVATE_KEY_WASM_BUILDS }}
