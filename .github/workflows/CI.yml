name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  MACOSX_DEPLOYMENT_TARGET: 12.0

jobs:
  Build:
    name: LFortran CI (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-2019", "macos-latest", "ubuntu-latest"]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment.yml
          create-args: >-
            python=${{ matrix.python-version }}

      - name: Install Windows Packages
        if: contains(matrix.os, 'windows')
        shell: bash -e -l {0}
        run: micromamba install m2-bison=3.0.4 m2-filesystem

      - name: Install Linux / macOS Packages
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        shell: bash -e -l {0}
        run: micromamba install bison=3.4

      - uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Setup Platform
        shell: bash -e -l {0}
        run: |
            echo "LFORTRAN_CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
            echo "CMAKE_C_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV
            echo "CMAKE_CXX_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV

      - name: Build (Linux / macOS)
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            xonsh ci/build_tmp.xsh

      - name: Build (Windows)
        if: contains(matrix.os, 'windows')
        shell: cmd
        run: |
            set MAMBA_INSTALL_LOCN=C:\\Users\runneradmin\micromamba
            call %MAMBA_INSTALL_LOCN%\Scripts\activate.bat
            call micromamba activate lf
            set LFORTRAN_CMAKE_GENERATOR=Ninja
            set WIN=1
            set MACOS=0
            set ENABLE_RUNTIME_STACKTRACE=no
            call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
            xonsh ci\build_tmp.xsh

      - name: Test (Linux / macOS)
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            xonsh ci/test.xsh

      - name: Test (Windows)
        if: contains(matrix.os, 'windows')
        shell: cmd
        run: |
            set MAMBA_INSTALL_LOCN=C:\\Users\runneradmin\micromamba
            call %MAMBA_INSTALL_LOCN%\Scripts\activate.bat
            call micromamba activate lf
            set LFORTRAN_CMAKE_GENERATOR=Ninja
            set WIN=1
            set MACOS=0
            set ENABLE_RUNTIME_STACKTRACE=no
            call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
            xonsh ci\test.xsh

  scipy:
    name: Check SciPy Build and Test Run
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build Linux
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test SciPy Specfun
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/scipy/scipy
            cd scipy
            git remote add ondrej https://github.com/certik/scipy
            git fetch ondrej
            git checkout -t ondrej/special2
            git checkout f7e038499ed93216605fe8fff782ccc6a8bac66e
            micromamba env create -f environment.yml
            micromamba activate scipy-dev
            git submodule update --init
            ../src/bin/lfortran -c scipy/special/specfun/specfun.f -o scipy/special/specfun.o --use-loop-variable-after-loop --fixed-form --implicit-typing --implicit-interface --generate-object-code --rtlib
            clang -shared -fPIC -o scipy/special/specfun.so scipy/special/specfun.o -L../src/runtime -llfortran_runtime
            mkdir -p $CONDA_PREFIX/lib/scipy/special/
            cp scipy/special/specfun.so $CONDA_PREFIX/lib/scipy/special/
            cp ../src/runtime/liblfortran_runtime.so $CONDA_PREFIX/lib/
            python dev.py build
            mkdir -p ./build-install/lib/python3.10/scipy/special/
            cp scipy/special/specfun.so ./build-install/lib/python3.10/scipy/special/
            python dev.py test -t scipy.special

  build_to_wasm_and_upload:
    name: Build LFortran to WASM and Upload
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name : Remove existing node
        shell: bash -e -l {0}
        run : |
            which node
            node -v
            sudo rm -rf /usr/local/bin/node /usr/local/bin/npm

      - name: Install Emscripten from Git
        # TODO: This fails with "-e" for some reason:
        shell: bash -l {0}
        run: |
            mkdir $HOME/ext
            cd $HOME/ext

            git clone https://github.com/emscripten-core/emsdk.git
            cd emsdk

            ./emsdk install 3.1.35

            ./emsdk activate 3.1.35

            ./emsdk install node-14.18.2-64bit

            ./emsdk activate node-14.18.2-64bit

      - name: Show Emscripten and Node Info
        shell: bash -l {0}
        run: |
            set -ex
            # Activate PATH and other environment variables in the current terminal
            source $HOME/ext/emsdk/emsdk_env.sh
            emcc -v
            em++ -v
            which node
            node -v

      - name: Build to WASM
        shell: bash -l {0}
        run: |
            set -ex
            source $HOME/ext/emsdk/emsdk_env.sh # Activate Emscripten
            ./build_to_wasm.sh

      - name: Test built lfortran.wasm
        shell: bash -l {0}
        run: |
            set -ex
            source $HOME/ext/emsdk/emsdk_env.sh # Activate Emscripten
            which node
            node -v
            node --experimental-wasm-bigint src/lfortran/tests/test_lfortran.js

      - name: Upload to wasm_builds
        shell: bash -l {0}
        run: |
            ci/upload_lfortran_wasm.sh
        env:
          SSH_PRIVATE_KEY_WASM_BUILDS: ${{ secrets.SSH_PRIVATE_KEY_WASM_BUILDS }}

  debug:
    name: Check Debug build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build Linux
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            export CXXFLAGS="-Werror"
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test Linux
        shell: bash -e -l {0}
        run: |
            ctest
            ./run_tests.py -s
            cd integration_tests
            ./run_tests.py -m
            ./run_tests.py -b llvm
            ./run_tests.py -b llvm -f

  release:
    name: Check Release build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build Linux
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            export CXXFLAGS="-Werror"
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Release \
              -DWITH_LLVM=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test Linux
        shell: bash -e -l {0}
        run: |
            ctest
            ./run_tests.py -s
            cd integration_tests
            ./run_tests.py -m
            ./run_tests.py -b llvm
            ./run_tests.py -b llvm -f

  minpack:
    name: Check Minpack Compilation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10
            openblas=0.3.21
            llvm-openmp=11.1.0

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build Linux
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test Legacy Minpack (SciPy)
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/certik/minpack.git
            cd minpack
            git checkout -t origin/scipy30
            git checkout 409ba02a107f47ee835f3976952bbc64dd46de8a
            mkdir lf
            cd lf
            FC=$(pwd)/../../src/bin/lfortran cmake ..
            make
            examples/example_hybrd
            examples/example_hybrd1
            examples/example_lmder1
            examples/example_lmdif1
            examples/example_primes
            ctest

      - name: Test Modern Minpack (Fortran-Lang)
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/fortran-lang/minpack modern_minpack_01
            cd modern_minpack_01
            git checkout c0b5aea9fcd2b83865af921a7a7e881904f8d3c2
            $(pwd)/../src/bin/lfortran ./src/minpack.f90 -c
            $(pwd)/../src/bin/lfortran ./examples/example_hybrd.f90
            $(pwd)/../src/bin/lfortran ./examples/example_hybrd1.f90
            $(pwd)/../src/bin/lfortran ./examples/example_lmdif1.f90
            $(pwd)/../src/bin/lfortran ./examples/example_lmder1.f90

      - name: Test Modern Minpack (check results)
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/Pranavchiku/modern_minpack.git modern_minpack_02
            cd modern_minpack_02
            git checkout -t origin/w5
            git checkout fcde66ca86348eb0c4012dbdf0f4d8dba61261d8
            $(pwd)/../src/bin/lfortran ./src/minpack.f90 -c
            $(pwd)/../src/bin/lfortran ./examples/example_hybrd.f90
            $(pwd)/../src/bin/lfortran ./examples/example_hybrd1.f90
            $(pwd)/../src/bin/lfortran ./examples/example_lmdif1.f90
            $(pwd)/../src/bin/lfortran ./examples/example_lmder1.f90

            # $(pwd)/../src/bin/lfortran --fast ./examples/example_hybrd.f90
            # $(pwd)/../src/bin/lfortran --fast ./examples/example_hybrd1.f90
            # $(pwd)/../src/bin/lfortran --fast ./examples/example_lmdif1.f90
            # $(pwd)/../src/bin/lfortran --fast ./examples/example_lmder1.f90

      - name: Test fastGPT
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/certik/fastGPT.git
            cd fastGPT
            git checkout -t origin/lf6
            git checkout bc04dbf476b6173b0bb945ff920119ffaf4a290d
            echo $CONDA_PREFIX
            FC=$(pwd)/../src/bin/lfortran CMAKE_PREFIX_PATH=$CONDA_PREFIX cmake -DFASTGPT_BLAS=OpenBLAS .
            make
            ls -l ./gpt2 ./chat ./test_basic_input ./test_chat ./test_more_inputs
            file ./gpt2 ./chat ./test_basic_input ./test_chat ./test_more_inputs
            ldd ./gpt2
            ldd ./chat
            ldd ./test_basic_input
            ldd ./test_chat
            ldd ./test_more_inputs

            git clean -dfx
            git checkout -t origin/lf12run
            git checkout 23efcd60f404e9e0a0c3da4e7e120a10d653eb93
            FC=$(pwd)/../src/bin/lfortran CMAKE_PREFIX_PATH=$CONDA_PREFIX cmake -DFASTGPT_BLAS=OpenBLAS .
            make
            curl -o model.dat -L https://huggingface.co/datasets/certik/fastGPT/resolve/main/model_fastgpt_124M_v1.dat
            ./gpt2



  fpm:
    name: Check fpm Compilation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build Linux
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test fpm
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/certik/fpm.git
            cd fpm
            git checkout lfortran_build_1
            git checkout ab02e3a57bc286c6e75b23098c209db8c27157ea
            export PATH="$(pwd)/../src/bin:$PATH"
            ./build.sh

  test_llvm_10:
    name: Test LLVM 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux_llvm10.yml
          create-args: >-
            python=3.10

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build Linux
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test Linux
        shell: bash -e -l {0}
        run: |
            cd integration_tests
            ./run_tests.py -b llvm
            ./run_tests.py -b llvm -f

  test_llvm_14:
    name: Test LLVM 14
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux_llvm14.yml
          create-args: >-
            python=3.10

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build Linux
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test Linux
        shell: bash -e -l {0}
        run: |
            cd integration_tests
            ./run_tests.py -b llvm
            ./run_tests.py -b llvm -f

  test_llvm_15:
    name: Test LLVM 15
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux_llvm15.yml
          create-args: >-
            python=3.10

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build Linux
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test Linux
        shell: bash -e -l {0}
        run: |
            cd integration_tests
            ./run_tests.py -b llvm llvmImplicit
            ./run_tests.py -b llvm llvmImplicit -f

  gfortran:
    name: Test integration_tests with GFortran
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Test integration_tests with GFortran
        shell: bash -e -l {0}
        run: |
            cd integration_tests
            ./run_tests.py -b gfortran

  test_codes:
    name: Check Production Codes with LFortran
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-ubuntu-latest

      - name: Build Linux
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test SciPy
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/scipy/scipy.git
            cd scipy
            git checkout 527f2ddcda98ebf4dae37abc38c85082218fcd6a
            find . -name "*.f" > files.txt
            files=$(<files.txt)
            for file in $files; do
                ../src/bin/lfortran --fixed-form fmt --no-color $file > $file.f90
                gfortran -fallow-argument-mismatch -ffree-line-length-none -c $file.f90 -o $file.o
                #if [[ "$file" == *"minpack"* ]]; then
                #    if [[ "$file" != *"dpmpar.f"* ]]; then
                #        ../src/bin/lfortran --show-asr --no-indent --no-color --fixed-form --implicit-typing --implicit-interface $file > $file.asr
                #    fi
                #fi

            done

            cd ..
            rm -rf scipy/
            git clone https://github.com/pranavchiku/scipy.git
            cd scipy
            git checkout -t origin/scipy1
            git checkout a70f11a305edd024cb9a0e5048257eb0f51e29e1
            find . -name "*.f" > files.txt
            files=$(<files.txt)
            for file in $files; do
                ../src/bin/lfortran --fixed-form --implicit-typing --implicit-interface --implicit-argument-casting --show-asr --no-color $file > $file.f90
            done
            cd ..
            rm -rf scipy/


  test_without_llvm:
    name: Test without LLVM Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - name: Test
        shell: bash -e -l {0}
        run: |
          xonsh ci/test_without_llvm_backend.xsh

  test_cpp_build:
    name: Test CPP
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - name: Test CPP
        shell: bash -e -l {0}
        run: |
            xonsh ci/test_cpp_version.xsh

  test_wasm:
    name: Test WASM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10
            nodejs=18.13.0

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Show Node Info
        shell: bash -e -l {0}
        run: |
          set -ex
          which node
          node --version

      - name: Build Linux
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test Linux
        shell: bash -e -l {0}
        run: |
            cd integration_tests
            ./run_tests.py -b wasm
            ./run_tests.py -b wasm -f

  test_c_cpp:
    name: Test C/C++ backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build Linux
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test Linux
        shell: bash -e -l {0}
        run: |
            mkdir build-kokkos
            cd build-kokkos
            wget https://github.com/kokkos/kokkos/archive/3.1.01.tar.gz
            tar xaf 3.1.01.tar.gz
            cd kokkos-3.1.01
            mkdir build
            cd build
            export LFORTRAN_KOKKOS_DIR=$HOME/ext/kokkos
            cmake -DCMAKE_INSTALL_PREFIX=$LFORTRAN_KOKKOS_DIR -DKokkos_ENABLE_OPENMP=On -DKokkos_ARCH_HSW=On ..
            make
            make install
            cd ../../..

            cd integration_tests
            ./run_tests.py -j1 -b cpp c
            ./run_tests.py -j1 -b cpp c -f

  upload_tarball:
    name: Upload Tarball
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - name: Upload Tarball
        shell: bash -e -l {0}
        run: |
          ./build0.sh
          lfortran_version=$(<version)
          ci/create_source_tarball.sh $lfortran_version
          ci/upload_tarball.sh
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}

  upload_docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: ci/environment_docs_linux.yml

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build Kernel
        shell: bash -e -l {0}
        run: |
          ./build0.sh
          export CXXFLAGS="-Werror"
          cmake . -GNinja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DWITH_LLVM=yes \
            -DWITH_XEUS=yes \
            -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
            -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
            -DCMAKE_C_COMPILER_LAUNCHER=sccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

          ninja install
          ctest --output-on-failure
          jupyter kernelspec list --json

      - name: Build Docs
        shell: bash -e -l {0}
        working-directory: doc
        run: |
          $(command -v python) build.py

      - name: Upload Docs
        shell: bash -e -l {0}
        working-directory: doc
        run: |
          ../ci/upload_docs.sh
        env:
          SSH_PRIVATE_KEY_DOCS: ${{ secrets.SSH_PRIVATE_KEY_DOCS }}
