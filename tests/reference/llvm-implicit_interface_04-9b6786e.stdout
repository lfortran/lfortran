; ModuleID = 'LFortran'
source_filename = "LFortran"

%c_ptr = type { i32 }
%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [9 x i8] c"%13.8e%s\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@6 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@7 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@8 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

declare void @__module_lfortran_intrinsic_builtin_execute_command_line(i8**, i1*, i32*, i32*, i8**)

declare void @__module_lfortran_intrinsic_builtin_get_command_argument(i32*, i8**, i32*, i32*)

declare void @__module_lfortran_intrinsic_builtin_get_environment_variable(i8**, i8**, i32*, i32*, i1*)

declare void @__module_lfortran_intrinsic_builtin_move_alloc(i32*, i32*)

declare void @__module_lfortran_intrinsic_iso_c_binding_c_f_pointer(%c_ptr*, i32**, %array*)

define void @__module_lfortran_intrinsic_math_cpu_time(double* %t) {
.entry:
  call void @_lfortran_cpu_time(double* %t)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_cpu_time(double*)

define void @__module_lfortran_intrinsic_math_dp_rand_num(double* %harvest) {
.entry:
  call void @_lfortran_dp_rand_num(double* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_dp_rand_num(double*)

define void @__module_lfortran_intrinsic_math_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max) {
.entry:
  call void @_lfortran_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i32sys_clock(i32*, i32*, i32*)

define void @__module_lfortran_intrinsic_math_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max) {
.entry:
  call void @_lfortran_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i64sys_clock(i64*, i64*, i64*)

define float @__module_lfortran_intrinsic_math_sabs(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  store float %2, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load float, float* %x, align 4
  %4 = fsub float 0.000000e+00, %3
  store float %4, float* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load float, float* %r, align 4
  ret float %5
}

define void @__module_lfortran_intrinsic_math_sp_rand_num(float* %harvest) {
.entry:
  call void @_lfortran_sp_rand_num(float* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_sp_rand_num(float*)

define void @driver(void (i32*, i32*, i32*)* %fnc, i32* %arr, i32* %m) {
.entry:
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i32 0, i32 0), double 1.000000e+00, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  %0 = load i32, i32* %m, align 4
  %1 = mul i32 1, %0
  %2 = getelementptr inbounds i32, i32* %arr, i32 2
  call void %fnc(i32* %arr, i32* %m, i32* %2)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @fnc(i32*, i32*, i32*)

define void @implicit_interface_check(i32* %arr1, i32* %m, i32* %c) {
.entry:
  %0 = load i32, i32* %m, align 4
  %1 = icmp ne i32 %0, 3
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %2 = load i32, i32* %c, align 4
  %3 = icmp ne i32 %2, 30
  br i1 %3, label %then1, label %else2

then1:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %4 = load i32, i32* %m, align 4
  %5 = mul i32 1, %4
  %6 = getelementptr inbounds i32, i32* %arr1, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp ne i32 %7, 10
  br i1 %8, label %then4, label %else5

then4:                                            ; preds = %ifcont3
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont6

else5:                                            ; preds = %ifcont3
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %9 = load i32, i32* %m, align 4
  %10 = mul i32 1, %9
  %11 = getelementptr inbounds i32, i32* %arr1, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp ne i32 %12, 20
  br i1 %13, label %then7, label %else8

then7:                                            ; preds = %ifcont6
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont9

else8:                                            ; preds = %ifcont6
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %14 = load i32, i32* %m, align 4
  %15 = mul i32 1, %14
  %16 = getelementptr inbounds i32, i32* %arr1, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp ne i32 %17, 30
  br i1 %18, label %then10, label %else11

then10:                                           ; preds = %ifcont9
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @8, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont12

else11:                                           ; preds = %ifcont9
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  br label %return

return:                                           ; preds = %ifcont12
  ret void
}

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %b = alloca %array, align 8
  %2 = getelementptr %array, %array* %b, i32 0, i32 1
  store i32 0, i32* %2, align 4
  %3 = getelementptr %array, %array* %b, i32 0, i32 2
  %4 = alloca i32, align 4
  store i32 1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = alloca %dimension_descriptor, i32 %5, align 8
  %7 = getelementptr %array, %array* %b, i32 0, i32 4
  store i32 1, i32* %7, align 4
  store %dimension_descriptor* %6, %dimension_descriptor** %3, align 8
  %8 = load %dimension_descriptor*, %dimension_descriptor** %3, align 8
  %9 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %8, i32 0
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 0
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 1
  %12 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 2
  store i32 1, i32* %10, align 4
  store i32 1, i32* %11, align 4
  store i32 3, i32* %12, align 4
  %13 = alloca i32, align 4
  store i32 3, i32* %13, align 4
  %14 = getelementptr %array, %array* %b, i32 0, i32 0
  %15 = load i32, i32* %13, align 4
  %16 = alloca i32, i32 %15, align 4
  store i32* %16, i32** %14, align 8
  %17 = alloca <3 x i32>, align 16
  %18 = getelementptr <3 x i32>, <3 x i32>* %17, i32 0, i32 0
  store i32 10, i32* %18, align 4
  %19 = getelementptr <3 x i32>, <3 x i32>* %17, i32 0, i32 1
  store i32 20, i32* %19, align 4
  %20 = getelementptr <3 x i32>, <3 x i32>* %17, i32 0, i32 2
  store i32 30, i32* %20, align 4
  %21 = getelementptr <3 x i32>, <3 x i32>* %17, i32 0, i32 0
  %22 = getelementptr %array, %array* %b, i32 0, i32 0
  store i32* %21, i32** %22, align 8
  %n = alloca i32, align 4
  store i32 3, i32* %n, align 4
  %23 = getelementptr %array, %array* %b, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  call void @driver(void (i32*, i32*, i32*)* @implicit_interface_check, i32* %24, i32* %n)
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)
