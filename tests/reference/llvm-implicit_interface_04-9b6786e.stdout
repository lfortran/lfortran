; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [9 x i8] c"%13.8e%s\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@6 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@7 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define float @_lcompilers_abs_f32(float* %x) {
.entry:
  %_lcompilers_abs_f32 = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  store float %2, float* %_lcompilers_abs_f32, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load float, float* %x, align 4
  %4 = fsub float 0.000000e+00, %3
  store float %4, float* %_lcompilers_abs_f32, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load float, float* %_lcompilers_abs_f32, align 4
  ret float %5
}

define void @driver(void (i32*, i32*, i32*)* %fnc, i32* %arr, i32* %m) {
.entry:
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i32 0, i32 0), double 1.000000e+00, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %0 = load i32, i32* %m, align 4
  %1 = mul i32 1, %0
  %2 = getelementptr inbounds i32, i32* %arr, i32 2
  call void %fnc(i32* %arr, i32* %m, i32* %2)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @fnc(i32*, i32*, i32*)

define void @implicit_interface_check(i32* %arr1, i32* %m, i32* %c) {
.entry:
  %0 = load i32, i32* %m, align 4
  %1 = icmp ne i32 %0, 3
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %2 = load i32, i32* %c, align 4
  %3 = icmp ne i32 %2, 30
  br i1 %3, label %then1, label %else2

then1:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %4 = load i32, i32* %m, align 4
  %5 = mul i32 1, %4
  %6 = getelementptr inbounds i32, i32* %arr1, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp ne i32 %7, 10
  br i1 %8, label %then4, label %else5

then4:                                            ; preds = %ifcont3
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont6

else5:                                            ; preds = %ifcont3
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %9 = load i32, i32* %m, align 4
  %10 = mul i32 1, %9
  %11 = getelementptr inbounds i32, i32* %arr1, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp ne i32 %12, 20
  br i1 %13, label %then7, label %else8

then7:                                            ; preds = %ifcont6
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont9

else8:                                            ; preds = %ifcont6
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %14 = load i32, i32* %m, align 4
  %15 = mul i32 1, %14
  %16 = getelementptr inbounds i32, i32* %arr1, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp ne i32 %17, 30
  br i1 %18, label %then10, label %else11

then10:                                           ; preds = %ifcont9
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont12

else11:                                           ; preds = %ifcont9
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  br label %return

return:                                           ; preds = %ifcont12
  ret void
}

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %__1_k = alloca i32, align 4
  %b = alloca %array, align 8
  %2 = getelementptr %array, %array* %b, i32 0, i32 1
  store i32 0, i32* %2, align 4
  %3 = getelementptr %array, %array* %b, i32 0, i32 2
  %4 = alloca i32, align 4
  store i32 1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = alloca %dimension_descriptor, i32 %5, align 8
  %7 = getelementptr %array, %array* %b, i32 0, i32 4
  store i32 1, i32* %7, align 4
  store %dimension_descriptor* %6, %dimension_descriptor** %3, align 8
  %8 = load %dimension_descriptor*, %dimension_descriptor** %3, align 8
  %9 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %8, i32 0
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 0
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 1
  %12 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 2
  store i32 1, i32* %10, align 4
  store i32 1, i32* %11, align 4
  store i32 3, i32* %12, align 4
  %13 = alloca i32, align 4
  store i32 3, i32* %13, align 4
  %14 = getelementptr %array, %array* %b, i32 0, i32 0
  %15 = load i32, i32* %13, align 4
  %16 = alloca i32, i32 %15, align 4
  store i32* %16, i32** %14, align 8
  %17 = alloca <3 x i32>, align 16
  %18 = getelementptr <3 x i32>, <3 x i32>* %17, i32 0, i32 0
  store i32 10, i32* %18, align 4
  %19 = getelementptr <3 x i32>, <3 x i32>* %17, i32 0, i32 1
  store i32 20, i32* %19, align 4
  %20 = getelementptr <3 x i32>, <3 x i32>* %17, i32 0, i32 2
  store i32 30, i32* %20, align 4
  %21 = getelementptr <3 x i32>, <3 x i32>* %17, i32 0, i32 0
  %22 = getelementptr %array, %array* %b, i32 0, i32 0
  store i32* %21, i32** %22, align 8
  %n = alloca i32, align 4
  store i32 3, i32* %n, align 4
  %23 = getelementptr %array, %array* %b, i32 0, i32 2
  %24 = load %dimension_descriptor*, %dimension_descriptor** %23, align 8
  %25 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %24, i32 0
  %26 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %__1_k, align 4
  %28 = load i32, i32* %__1_k, align 4
  %29 = getelementptr %array, %array* %b, i32 0, i32 2
  %30 = load %dimension_descriptor*, %dimension_descriptor** %29, align 8
  %31 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %30, i32 0
  %32 = getelementptr %dimension_descriptor, %dimension_descriptor* %31, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = sub i32 %28, %33
  %35 = mul i32 1, %34
  %36 = add i32 0, %35
  %37 = getelementptr %dimension_descriptor, %dimension_descriptor* %31, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = mul i32 1, %38
  %40 = getelementptr %array, %array* %b, i32 0, i32 0
  %41 = load i32*, i32** %40, align 8
  %42 = getelementptr inbounds i32, i32* %41, i32 %36
  store i32 10, i32* %42, align 4
  %43 = load i32, i32* %__1_k, align 4
  %44 = add i32 %43, 1
  store i32 %44, i32* %__1_k, align 4
  %45 = load i32, i32* %__1_k, align 4
  %46 = getelementptr %array, %array* %b, i32 0, i32 2
  %47 = load %dimension_descriptor*, %dimension_descriptor** %46, align 8
  %48 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %47, i32 0
  %49 = getelementptr %dimension_descriptor, %dimension_descriptor* %48, i32 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = sub i32 %45, %50
  %52 = mul i32 1, %51
  %53 = add i32 0, %52
  %54 = getelementptr %dimension_descriptor, %dimension_descriptor* %48, i32 0, i32 2
  %55 = load i32, i32* %54, align 4
  %56 = mul i32 1, %55
  %57 = getelementptr %array, %array* %b, i32 0, i32 0
  %58 = load i32*, i32** %57, align 8
  %59 = getelementptr inbounds i32, i32* %58, i32 %53
  store i32 20, i32* %59, align 4
  %60 = load i32, i32* %__1_k, align 4
  %61 = add i32 %60, 1
  store i32 %61, i32* %__1_k, align 4
  %62 = load i32, i32* %__1_k, align 4
  %63 = getelementptr %array, %array* %b, i32 0, i32 2
  %64 = load %dimension_descriptor*, %dimension_descriptor** %63, align 8
  %65 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %64, i32 0
  %66 = getelementptr %dimension_descriptor, %dimension_descriptor* %65, i32 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = sub i32 %62, %67
  %69 = mul i32 1, %68
  %70 = add i32 0, %69
  %71 = getelementptr %dimension_descriptor, %dimension_descriptor* %65, i32 0, i32 2
  %72 = load i32, i32* %71, align 4
  %73 = mul i32 1, %72
  %74 = getelementptr %array, %array* %b, i32 0, i32 0
  %75 = load i32*, i32** %74, align 8
  %76 = getelementptr inbounds i32, i32* %75, i32 %70
  store i32 30, i32* %76, align 4
  %77 = load i32, i32* %__1_k, align 4
  %78 = add i32 %77, 1
  store i32 %78, i32* %__1_k, align 4
  %79 = getelementptr %array, %array* %b, i32 0, i32 2
  %80 = load %dimension_descriptor*, %dimension_descriptor** %79, align 8
  %81 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %80, i32 0
  %82 = getelementptr %dimension_descriptor, %dimension_descriptor* %81, i32 0, i32 1
  %83 = load i32, i32* %82, align 4
  store i32 %83, i32* %__1_k, align 4
  %84 = load i32, i32* %__1_k, align 4
  %85 = getelementptr %array, %array* %b, i32 0, i32 2
  %86 = load %dimension_descriptor*, %dimension_descriptor** %85, align 8
  %87 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %86, i32 0
  %88 = getelementptr %dimension_descriptor, %dimension_descriptor* %87, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = sub i32 %84, %89
  %91 = mul i32 1, %90
  %92 = add i32 0, %91
  %93 = getelementptr %dimension_descriptor, %dimension_descriptor* %87, i32 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = mul i32 1, %94
  %96 = getelementptr %array, %array* %b, i32 0, i32 0
  %97 = load i32*, i32** %96, align 8
  %98 = getelementptr inbounds i32, i32* %97, i32 %92
  store i32 10, i32* %98, align 4
  %99 = load i32, i32* %__1_k, align 4
  %100 = add i32 %99, 1
  store i32 %100, i32* %__1_k, align 4
  %101 = load i32, i32* %__1_k, align 4
  %102 = getelementptr %array, %array* %b, i32 0, i32 2
  %103 = load %dimension_descriptor*, %dimension_descriptor** %102, align 8
  %104 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %103, i32 0
  %105 = getelementptr %dimension_descriptor, %dimension_descriptor* %104, i32 0, i32 1
  %106 = load i32, i32* %105, align 4
  %107 = sub i32 %101, %106
  %108 = mul i32 1, %107
  %109 = add i32 0, %108
  %110 = getelementptr %dimension_descriptor, %dimension_descriptor* %104, i32 0, i32 2
  %111 = load i32, i32* %110, align 4
  %112 = mul i32 1, %111
  %113 = getelementptr %array, %array* %b, i32 0, i32 0
  %114 = load i32*, i32** %113, align 8
  %115 = getelementptr inbounds i32, i32* %114, i32 %109
  store i32 20, i32* %115, align 4
  %116 = load i32, i32* %__1_k, align 4
  %117 = add i32 %116, 1
  store i32 %117, i32* %__1_k, align 4
  %118 = load i32, i32* %__1_k, align 4
  %119 = getelementptr %array, %array* %b, i32 0, i32 2
  %120 = load %dimension_descriptor*, %dimension_descriptor** %119, align 8
  %121 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %120, i32 0
  %122 = getelementptr %dimension_descriptor, %dimension_descriptor* %121, i32 0, i32 1
  %123 = load i32, i32* %122, align 4
  %124 = sub i32 %118, %123
  %125 = mul i32 1, %124
  %126 = add i32 0, %125
  %127 = getelementptr %dimension_descriptor, %dimension_descriptor* %121, i32 0, i32 2
  %128 = load i32, i32* %127, align 4
  %129 = mul i32 1, %128
  %130 = getelementptr %array, %array* %b, i32 0, i32 0
  %131 = load i32*, i32** %130, align 8
  %132 = getelementptr inbounds i32, i32* %131, i32 %126
  store i32 30, i32* %132, align 4
  %133 = load i32, i32* %__1_k, align 4
  %134 = add i32 %133, 1
  store i32 %134, i32* %__1_k, align 4
  %135 = getelementptr %array, %array* %b, i32 0, i32 0
  %136 = load i32*, i32** %135, align 8
  call void @driver(void (i32*, i32*, i32*)* @implicit_interface_check, i32* %136, i32* %n)
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)
