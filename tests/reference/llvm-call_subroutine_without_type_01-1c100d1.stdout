; ModuleID = 'LFortran'
source_filename = "LFortran"

%mytype = type <{ i32 (...)**, float }>
%string_descriptor = type <{ i8*, i64 }>

@_Name_mytype = private unnamed_addr constant [7 x i8] c"mytype\00", align 1
@_Type_Info_mytype = linkonce_odr unnamed_addr constant { i8* } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @_Name_mytype, i32 0, i32 0) }, align 8
@_VTable_mytype = linkonce_odr unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* bitcast ({ i8* }* @_Type_Info_mytype to i8*), i8* bitcast (void (i8*, i8*)* @_copy_module_call_subroutine_without_type_01_mytype to i8*), i8* bitcast (void (%mytype*)* @get_i to i8*)] }, align 8
@__lcompilers_created__nested_context__get_i_self = global %mytype <{ i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_mytype, i32 0, i32 0, i32 2) to i32 (...)**), float 0.000000e+00 }>
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [12 x i8] c"S-DESC-4,R4\00", align 1
@string_const_data = private constant [4 x i8] c"r = "
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data, i32 0, i32 0), i64 4 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@"ERROR STOP" = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define linkonce_odr void @_copy_module_call_subroutine_without_type_01_mytype(i8* %0, i8* %1) {
entry:
  %2 = bitcast i8* %0 to %mytype*
  %3 = bitcast i8* %1 to %mytype*
  %4 = bitcast %mytype* %3 to i32 (...)***
  %5 = load i32 (...)**, i32 (...)*** %4, align 8
  %6 = bitcast %mytype* %2 to i32 (...)***
  store i32 (...)** %5, i32 (...)*** %6, align 8
  %7 = getelementptr %mytype, %mytype* %2, i32 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = getelementptr %mytype, %mytype* %3, i32 0, i32 1
  br i1 true, label %then, label %else

then:                                             ; preds = %entry
  store float %8, float* %9, align 4
  br label %ifcont

else:                                             ; preds = %entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %10 = bitcast %mytype* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_mytype, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %10, align 8
  ret void
}

define void @get_i(%mytype* %self) {
.entry:
  %0 = bitcast %mytype* %self to void (i8*, i8*)***
  %1 = load void (i8*, i8*)**, void (i8*, i8*)*** %0, align 8
  %2 = getelementptr inbounds void (i8*, i8*)*, void (i8*, i8*)** %1, i32 0
  %3 = load void (i8*, i8*)*, void (i8*, i8*)** %2, align 8
  %4 = bitcast %mytype* %self to i8*
  call void %3(i8* %4, i8* bitcast (%mytype* @__lcompilers_created__nested_context__get_i_self to i8*))
  call void @__module_module_call_subroutine_without_type_01_get_r()
  %5 = load void (i8*, i8*)**, void (i8*, i8*)*** bitcast (%mytype* @__lcompilers_created__nested_context__get_i_self to void (i8*, i8*)***), align 8
  %6 = getelementptr inbounds void (i8*, i8*)*, void (i8*, i8*)** %5, i32 0
  %7 = load void (i8*, i8*)*, void (i8*, i8*)** %6, align 8
  %8 = bitcast %mytype* %self to i8*
  call void %7(i8* bitcast (%mytype* @__lcompilers_created__nested_context__get_i_self to i8*), i8* %8)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @__module_module_call_subroutine_without_type_01_get_r() {
.entry:
  %0 = alloca i64, align 8
  %1 = load float, float* getelementptr inbounds (%mytype, %mytype* @__lcompilers_created__nested_context__get_i_self, i32 0, i32 1), align 4
  %2 = alloca float, align 4
  store float %1, float* %2, align 4
  %3 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @serialization_info, i32 0, i32 0), i64* %0, i32 0, i32 0, %string_descriptor* @string_const, float* %2)
  %4 = load i64, i64* %0, align 4
  %stringFormat_desc = alloca %string_descriptor, align 8
  %5 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %3, i8** %5, align 8
  %6 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %4, i64* %6, align 4
  %7 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %10 = load i64, i64* %9, align 4
  %11 = trunc i64 %10 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %8, i32 %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  call void @_lfortran_free(i8* %3)
  %12 = load float, float* getelementptr inbounds (%mytype, %mytype* @__lcompilers_created__nested_context__get_i_self, i32 0, i32 1), align 4
  %13 = fcmp une float %12, 1.000000e+00
  br i1 %13, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void
}

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lfortran_free(i8*)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %obj = alloca %mytype*, align 8
  store %mytype* null, %mytype** %obj, align 8
  %2 = call i8* @_lfortran_malloc(i64 12)
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 12, i1 false)
  %3 = bitcast i8* %2 to %mytype*
  store %mytype* %3, %mytype** %obj, align 8
  %4 = load %mytype*, %mytype** %obj, align 8
  %5 = bitcast %mytype* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_mytype, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr %mytype, %mytype* %4, i32 0, i32 1
  %7 = load %mytype*, %mytype** %obj, align 8
  %8 = icmp eq %mytype* %7, null
  br i1 %8, label %then, label %else

then:                                             ; preds = %.entry
  %9 = call i8* @_lfortran_malloc(i64 12)
  call void @llvm.memset.p0i8.i32(i8* %9, i8 0, i32 12, i1 false)
  %10 = bitcast i8* %9 to %mytype*
  store %mytype* %10, %mytype** %obj, align 8
  %11 = load %mytype*, %mytype** %obj, align 8
  %12 = bitcast %mytype* %10 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_mytype, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr %mytype, %mytype* %11, i32 0, i32 1
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %14 = load %mytype*, %mytype** %obj, align 8
  %15 = getelementptr %mytype, %mytype* %14, i32 0, i32 1
  store float 1.000000e+00, float* %15, align 4
  %16 = load %mytype*, %mytype** %obj, align 8
  %17 = load %mytype*, %mytype** %obj, align 8
  %18 = bitcast %mytype* %17 to void (%mytype*)***
  %19 = load void (%mytype*)**, void (%mytype*)*** %18, align 8
  %20 = getelementptr inbounds void (%mytype*)*, void (%mytype*)** %19, i32 1
  %21 = load void (%mytype*)*, void (%mytype*)** %20, align 8
  call void %21(%mytype* %17)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i64)

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #0

declare void @_lpython_free_argv()

attributes #0 = { argmemonly nounwind willreturn writeonly }
