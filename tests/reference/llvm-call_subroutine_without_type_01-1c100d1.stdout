; ModuleID = 'LFortran'
source_filename = "LFortran"

%mytype = type <{ float }>
%mytype_polymorphic = type { i64, %mytype* }
%string_descriptor = type <{ i8*, i64 }>
%__vtab_mytype = type { i64 }

@_inner__lcompilers_created__nested_context__get_i_self = global %mytype zeroinitializer
@__lcompilers_created__nested_context__get_i_self = global %mytype_polymorphic { i64 0, %mytype* @_inner__lcompilers_created__nested_context__get_i_self }
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [12 x i8] c"S-DESC-4,R4\00", align 1
@string_const_data = private constant [4 x i8] c"r = "
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data, i32 0, i32 0), i64 4 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@"ERROR STOP" = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @__module_module_call_subroutine_without_type_01_get_i(%mytype_polymorphic* %self) {
.entry:
  %0 = alloca %__vtab_mytype, align 8
  %1 = getelementptr %__vtab_mytype, %__vtab_mytype* %0, i32 0, i32 0
  store i64 0, i64* %1, align 4
  %2 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %self, i32 0, i32 0
  %3 = load i64, i64* %2, align 4
  store i64 %3, i64* getelementptr inbounds (%mytype_polymorphic, %mytype_polymorphic* @__lcompilers_created__nested_context__get_i_self, i32 0, i32 0), align 4
  %4 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %self, i32 0, i32 1
  %5 = load %mytype*, %mytype** %4, align 8
  %6 = load %mytype, %mytype* %5, align 1
  %7 = load %mytype*, %mytype** getelementptr inbounds (%mytype_polymorphic, %mytype_polymorphic* @__lcompilers_created__nested_context__get_i_self, i32 0, i32 1), align 8
  store %mytype %6, %mytype* %7, align 1
  call void @get_i.__module_module_call_subroutine_without_type_01_get_r()
  %8 = load i64, i64* getelementptr inbounds (%mytype_polymorphic, %mytype_polymorphic* @__lcompilers_created__nested_context__get_i_self, i32 0, i32 0), align 4
  %9 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %self, i32 0, i32 0
  store i64 %8, i64* %9, align 4
  %10 = load %mytype*, %mytype** getelementptr inbounds (%mytype_polymorphic, %mytype_polymorphic* @__lcompilers_created__nested_context__get_i_self, i32 0, i32 1), align 8
  %11 = load %mytype, %mytype* %10, align 1
  %12 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %self, i32 0, i32 1
  %13 = load %mytype*, %mytype** %12, align 8
  store %mytype %11, %mytype* %13, align 1
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @get_i.__module_module_call_subroutine_without_type_01_get_r() {
.entry:
  %0 = alloca %__vtab_mytype, align 8
  %1 = getelementptr %__vtab_mytype, %__vtab_mytype* %0, i32 0, i32 0
  store i64 0, i64* %1, align 4
  %2 = alloca i64, align 8
  %3 = load %mytype*, %mytype** getelementptr inbounds (%mytype_polymorphic, %mytype_polymorphic* @__lcompilers_created__nested_context__get_i_self, i32 0, i32 1), align 8
  %4 = getelementptr %mytype, %mytype* %3, i32 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = alloca float, align 4
  store float %5, float* %6, align 4
  %7 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @serialization_info, i32 0, i32 0), i64* %2, i32 0, i32 0, %string_descriptor* @string_const, float* %6)
  %8 = load i64, i64* %2, align 4
  %stringFormat_desc = alloca %string_descriptor, align 8
  %9 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %7, i8** %9, align 8
  %10 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %8, i64* %10, align 4
  %11 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %14 = load i64, i64* %13, align 4
  %15 = trunc i64 %14 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %12, i32 %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  %16 = load %mytype*, %mytype** getelementptr inbounds (%mytype_polymorphic, %mytype_polymorphic* @__lcompilers_created__nested_context__get_i_self, i32 0, i32 1), align 8
  %17 = getelementptr %mytype, %mytype* %16, i32 0, i32 0
  %18 = load float, float* %17, align 4
  %19 = fcmp une float %18, 1.000000e+00
  br i1 %19, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void
}

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = alloca %__vtab_mytype, align 8
  %3 = getelementptr %__vtab_mytype, %__vtab_mytype* %2, i32 0, i32 0
  store i64 0, i64* %3, align 4
  %obj = alloca %mytype_polymorphic, align 8
  %4 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %obj, i32 0, i32 0
  store i64 0, i64* %4, align 4
  %5 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %obj, i32 0, i32 1
  store %mytype* null, %mytype** %5, align 8
  %6 = call i8* @_lfortran_malloc(i64 4)
  call void @llvm.memset.p0i8.i32(i8* %6, i8 0, i32 4, i1 false)
  %7 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %obj, i32 0, i32 0
  store i64 0, i64* %7, align 4
  %8 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %obj, i32 0, i32 1
  %9 = bitcast i8* %6 to %mytype*
  store %mytype* %9, %mytype** %8, align 8
  %10 = load %mytype*, %mytype** %8, align 8
  %11 = getelementptr %mytype, %mytype* %10, i32 0, i32 0
  %12 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %obj, i32 0, i32 1
  %13 = load %mytype*, %mytype** %12, align 8
  %14 = icmp eq %mytype* %13, null
  br i1 %14, label %then, label %else

then:                                             ; preds = %.entry
  %15 = call i8* @_lfortran_malloc(i64 4)
  call void @llvm.memset.p0i8.i32(i8* %15, i8 0, i32 4, i1 false)
  %16 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %obj, i32 0, i32 0
  store i64 0, i64* %16, align 4
  %17 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %obj, i32 0, i32 1
  %18 = bitcast i8* %15 to %mytype*
  store %mytype* %18, %mytype** %17, align 8
  %19 = load %mytype*, %mytype** %17, align 8
  %20 = getelementptr %mytype, %mytype* %19, i32 0, i32 0
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %21 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %obj, i32 0, i32 1
  %22 = load %mytype*, %mytype** %21, align 8
  %23 = getelementptr %mytype, %mytype* %22, i32 0, i32 0
  store float 1.000000e+00, float* %23, align 4
  %24 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %obj, i32 0, i32 0
  %25 = load i64, i64* %24, align 4
  %26 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %obj, i32 0, i32 1
  %27 = load %mytype*, %mytype** %26, align 8
  %28 = bitcast %__vtab_mytype* %2 to <{ i64 }>*
  %29 = getelementptr <{ i64 }>, <{ i64 }>* %28, i32 0, i32 0
  %30 = load i64, i64* %29, align 4
  %31 = icmp eq i64 %25, %30
  br i1 %31, label %then1, label %else2

then1:                                            ; preds = %ifcont
  %32 = alloca %mytype_polymorphic, align 8
  %33 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %32, i32 0, i32 0
  store i64 %25, i64* %33, align 4
  %34 = getelementptr %mytype_polymorphic, %mytype_polymorphic* %32, i32 0, i32 1
  store %mytype* %27, %mytype** %34, align 8
  %35 = load i64, i64* %33, align 4
  %36 = load %mytype*, %mytype** %34, align 8
  store i64 %35, i64* getelementptr inbounds (%mytype_polymorphic, %mytype_polymorphic* @__lcompilers_created__nested_context__get_i_self, i32 0, i32 0), align 4
  store %mytype* %36, %mytype** getelementptr inbounds (%mytype_polymorphic, %mytype_polymorphic* @__lcompilers_created__nested_context__get_i_self, i32 0, i32 1), align 8
  call void @__module_module_call_subroutine_without_type_01_get_i(%mytype_polymorphic* %32)
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont3
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i64)

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #0

declare void @_lpython_free_argv()

attributes #0 = { argmemonly nounwind willreturn writeonly }
