; ModuleID = 'LFortran'
source_filename = "LFortran"

%sub1_nstd_types = type { i32* }
%sub1_vals = type { i32 }

@sub1_nstd_strct = global %sub1_nstd_types zeroinitializer
@sub1_nstd_strct_stack = global [1000 x %sub1_vals] zeroinitializer
@sp_sub1 = global i32 0
@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [8 x i8] c"before:\00", align 1
@3 = private unnamed_addr constant [9 x i8] c"%s%s%d%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@6 = private unnamed_addr constant [7 x i8] c"after:\00", align 1
@7 = private unnamed_addr constant [9 x i8] c"%s%s%d%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c" \00", align 1
@9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@10 = private unnamed_addr constant [10 x i8] c"x in getx\00", align 1
@11 = private unnamed_addr constant [9 x i8] c"%s%s%d%s\00", align 1
@12 = private unnamed_addr constant [2 x i8] c" \00", align 1
@13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@14 = private unnamed_addr constant [8 x i8] c"in sub1\00", align 1
@15 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@16 = private unnamed_addr constant [2 x i8] c" \00", align 1
@17 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@18 = private unnamed_addr constant [4 x i8] c"r =\00", align 1
@19 = private unnamed_addr constant [9 x i8] c"%s%s%d%s\00", align 1

define i32 @__module_recursion_03_solver(i32 ()* %f, i32* %iter) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %f_val = alloca i32, align 4
  %solver = alloca i32, align 4
  %0 = call i32 %f()
  store i32 %0, i32* %f_val, align 4
  %1 = load i32, i32* %f_val, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  store i32 2, i32* %call_arg_value, align 4
  %2 = load i32, i32* %iter, align 4
  %3 = sub i32 %2, 1
  store i32 %3, i32* %call_arg_value1, align 4
  %4 = call i32 @__module_recursion_03_sub1(i32* %call_arg_value, i32* %call_arg_value1)
  %5 = load i32, i32* @sp_sub1, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %decrement_sp, label %normal_continue

decrement_sp:                                     ; preds = %.entry
  %7 = add i32 -1, %5
  store i32 %7, i32* @sp_sub1, align 4
  %8 = load i32, i32* @sp_sub1, align 4
  %9 = getelementptr [1000 x %sub1_vals], [1000 x %sub1_vals]* @sub1_nstd_strct_stack, i32 0, i32 %8
  %10 = getelementptr %sub1_vals, %sub1_vals* %9, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = load i32*, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  store i32 %11, i32* %12, align 4
  store i32* %12, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  br label %normal_continue

normal_continue:                                  ; preds = %decrement_sp, %.entry
  store i32 %4, i32* %solver, align 4
  %13 = call i32 %f()
  store i32 %13, i32* %f_val, align 4
  %14 = load i32, i32* %f_val, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i32 %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  br label %return

return:                                           ; preds = %normal_continue
  %15 = load i32, i32* %solver, align 4
  ret i32 %15
}

declare i32 @f()

define i32 @__module_recursion_03_solver_caller(i32 ()* %f, i32* %iter) {
.entry:
  %solver_caller = alloca i32, align 4
  %0 = call i32 @__module_recursion_03_solver(i32 ()* %f, i32* %iter)
  store i32 %0, i32* %solver_caller, align 4
  br label %return

return:                                           ; preds = %.entry
  %1 = load i32, i32* %solver_caller, align 4
  ret i32 %1
}

declare i32 @f.1()

define i32 @__module_recursion_03_sub1(i32* %y, i32* %iter) {
.entry:
  %sub1 = alloca i32, align 4
  %tmp = alloca i32, align 4
  %x = alloca i32, align 4
  %0 = load i32, i32* %y, align 4
  store i32 %0, i32* %x, align 4
  store i32* %x, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @14, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))
  %1 = load i32, i32* %iter, align 4
  %2 = icmp eq i32 %1, 1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  store i32 1, i32* %sub1, align 4
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  %3 = load i32, i32* @sp_sub1, align 4
  %4 = load i32*, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  %5 = getelementptr [1000 x %sub1_vals], [1000 x %sub1_vals]* @sub1_nstd_strct_stack, i32 0, i32 %3
  %6 = getelementptr %sub1_vals, %sub1_vals* %5, i32 0, i32 0
  %7 = load i32, i32* %4, align 4
  store i32 %7, i32* %6, align 4
  %8 = load %sub1_vals, %sub1_vals* %5, align 4
  %9 = getelementptr [1000 x %sub1_vals], [1000 x %sub1_vals]* @sub1_nstd_strct_stack, i32 0, i32 %3
  store %sub1_vals %8, %sub1_vals* %9, align 4
  %10 = add i32 1, %3
  store i32 %10, i32* @sp_sub1, align 4
  %11 = call i32 @__module_recursion_03_getx()
  store i32 %11, i32* %tmp, align 4
  %12 = call i32 @__module_recursion_03_solver_caller(i32 ()* @__module_recursion_03_getx, i32* %iter)
  store i32 %12, i32* %sub1, align 4
  br label %return

return:                                           ; preds = %ifcont, %then
  %13 = load i32, i32* %sub1, align 4
  ret i32 %13
}

define i32 @__module_recursion_03_getx() {
.entry:
  %getx = alloca i32, align 4
  %0 = load i32*, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  %1 = load i32, i32* %0, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0), i32 %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  %2 = load i32*, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %getx, align 4
  br label %return

return:                                           ; preds = %.entry
  %4 = load i32, i32* %getx, align 4
  ret i32 %4
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %r = alloca i32, align 4
  store i32 3, i32* %call_arg_value, align 4
  store i32 3, i32* %call_arg_value1, align 4
  %2 = call i32 @__module_recursion_03_sub1(i32* %call_arg_value, i32* %call_arg_value1)
  store i32 %2, i32* %r, align 4
  %3 = load i32, i32* %r, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @19, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @18, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i32 0, i32 0), i32 %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @17, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)
