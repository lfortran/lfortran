; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }

@associate_02.t1 = internal global i32 0
@associate_02.t2 = internal global double 0.000000e+00
@associate_02.t3 = internal global %complex_4 zeroinitializer
@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@9 = private unnamed_addr constant [2 x i8] c" \00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@12 = private unnamed_addr constant [2 x i8] c" \00", align 1
@13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@14 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@15 = private unnamed_addr constant [2 x i8] c" \00", align 1
@16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@17 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@18 = private unnamed_addr constant [2 x i8] c" \00", align 1
@19 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@20 = private unnamed_addr constant [10 x i8] c"(%f,%f)%s\00", align 1
@21 = private unnamed_addr constant [2 x i8] c" \00", align 1
@22 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@23 = private unnamed_addr constant [10 x i8] c"(%f,%f)%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %p1 = alloca i32*, align 8
  store i32* null, i32** %p1, align 8
  %p2 = alloca double*, align 8
  store double* null, double** %p2, align 8
  %p3 = alloca %complex_4*, align 8
  store %complex_4* null, %complex_4** %p3, align 8
  store i32 2, i32* @associate_02.t1, align 4
  store double 2.000000e+00, double* @associate_02.t2, align 8
  %2 = alloca %complex_4, align 8
  %3 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 0
  %4 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 1
  store float 2.000000e+00, float* %3, align 4
  store float 3.000000e+00, float* %4, align 4
  %5 = load %complex_4, %complex_4* %2, align 4
  store %complex_4 %5, %complex_4* @associate_02.t3, align 4
  store i32* @associate_02.t1, i32** %p1, align 8
  store double* @associate_02.t2, double** %p2, align 8
  store %complex_4* @associate_02.t3, %complex_4** %p3, align 8
  %6 = load i32*, i32** %p1, align 8
  store i32 1, i32* %6, align 4
  %7 = load double*, double** %p2, align 8
  store double 4.000000e+00, double* %7, align 8
  %8 = load i32*, i32** %p1, align 8
  %9 = load i32, i32* %8, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %10 = load i32, i32* @associate_02.t1, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i32 %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %11 = load double*, double** %p2, align 8
  %12 = load double, double* %11, align 8
  %13 = load i32*, i32** %p1, align 8
  %14 = load i32, i32* %13, align 4
  %15 = sitofp i32 %14 to double
  %16 = fadd double %12, %15
  %17 = fptosi double %16 to i32
  store i32 %17, i32* @associate_02.t1, align 4
  %18 = load i32*, i32** %p1, align 8
  %19 = load i32, i32* %18, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i32 %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  %20 = load i32, i32* @associate_02.t1, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i32 %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  store i32 8, i32* @associate_02.t1, align 4
  %21 = load i32*, i32** %p1, align 8
  %22 = load i32, i32* %21, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @14, i32 0, i32 0), i32 %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))
  %23 = load i32, i32* @associate_02.t1, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i32 0, i32 0), i32 %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i32 0, i32 0))
  %24 = load %complex_4*, %complex_4** %p3, align 8
  %25 = alloca %complex_4, align 8
  %26 = getelementptr %complex_4, %complex_4* %25, i32 0, i32 0
  %27 = getelementptr %complex_4, %complex_4* %25, i32 0, i32 1
  store float 2.000000e+00, float* %26, align 4
  store float 0.000000e+00, float* %27, align 4
  %28 = load %complex_4, %complex_4* %25, align 4
  %29 = load %complex_4*, %complex_4** %p3, align 8
  %30 = load %complex_4, %complex_4* %29, align 4
  %31 = alloca %complex_4, align 8
  store %complex_4 %28, %complex_4* %31, align 4
  %32 = alloca %complex_4, align 8
  store %complex_4 %30, %complex_4* %32, align 4
  %33 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_mul_32(%complex_4* %31, %complex_4* %32, %complex_4* %33)
  %34 = load %complex_4, %complex_4* %33, align 4
  store %complex_4 %34, %complex_4* %24, align 4
  %35 = load %complex_4*, %complex_4** %p3, align 8
  %36 = load %complex_4, %complex_4* %35, align 4
  %37 = alloca %complex_4, align 8
  store %complex_4 %36, %complex_4* %37, align 4
  %38 = getelementptr %complex_4, %complex_4* %37, i32 0, i32 0
  %39 = load float, float* %38, align 4
  %40 = fpext float %39 to double
  %41 = alloca %complex_4, align 8
  store %complex_4 %36, %complex_4* %41, align 4
  %42 = getelementptr %complex_4, %complex_4* %41, i32 0, i32 1
  %43 = load float, float* %42, align 4
  %44 = fpext float %43 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @20, i32 0, i32 0), double %40, double %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i32 0, i32 0))
  %45 = load %complex_4, %complex_4* @associate_02.t3, align 4
  %46 = alloca %complex_4, align 8
  store %complex_4 %45, %complex_4* %46, align 4
  %47 = getelementptr %complex_4, %complex_4* %46, i32 0, i32 0
  %48 = load float, float* %47, align 4
  %49 = fpext float %48 to double
  %50 = alloca %complex_4, align 8
  store %complex_4 %45, %complex_4* %50, align 4
  %51 = getelementptr %complex_4, %complex_4* %50, i32 0, i32 1
  %52 = load float, float* %51, align 4
  %53 = fpext float %52 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @23, i32 0, i32 0), double %49, double %53, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @22, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)

declare void @_lfortran_complex_mul_32(%complex_4*, %complex_4*, %complex_4*, ...)
