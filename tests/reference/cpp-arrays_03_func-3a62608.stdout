#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}


struct dimension_descriptor
{
    int32_t lower_bound, length;
};

struct i32_10_1
{
    Kokkos::View<int32_t*>* data;
    dimension_descriptor dims[1];
    bool is_allocated;

    i32_10_1(Kokkos::View<int32_t*>* data_): data{data_} {};
};

// Forward declarations
namespace {

template <typename T0>
int32_t mysum(T0* a);
}

// Implementations
namespace {

template <typename T0>
int32_t mysum(T0* a)
{
    int32_t i;
    int32_t r;
    r = 0;
    for (i=1; i<=a->data->extent(0); i++) {
        r = r + a->data->operator[](i - a->dims[0].lower_bound);
    }
    return r;
}


void main2() {
    int32_t i;
    int32_t s;
    Kokkos::View<int32_t*> x_data("x_data", 10);
    i32_10_1 x_value(&x_data);
    i32_10_1* x = &x_value;
    x->dims[0].lower_bound = 1;
    x->dims[0].length = 10;
    for (i=1; i<=x->data->extent(0); i++) {
        x->data->operator[](i - x->dims[0].lower_bound) = i;
    }
    s = mysum(x);
    std::cout << s << std::endl;
    if (s != 55) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
