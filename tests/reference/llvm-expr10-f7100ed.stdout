; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }
%array.0 = type { i1*, i32, %dimension_descriptor*, i1, i32 }
%array.1 = type { float*, i32, %dimension_descriptor*, i1, i32 }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [3 x i8] c"\\n\00", align 1

declare i8* @__module_lfortran_intrinsic_builtin_achar(i32*, i32*, i1*)

declare i1 @__module_lfortran_intrinsic_builtin_allocated(%array*)

declare i1 @__module_lfortran_intrinsic_builtin_any(%array.0*, i32*, i1*)

declare i32 @__module_lfortran_intrinsic_builtin_bit_size(i32*)

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

declare i32 @__module_lfortran_intrinsic_builtin_command_argument_count()

declare void @__module_lfortran_intrinsic_builtin_execute_command_line(i8**, i1*, i1*, i32*, i1*, i32*, i1*, i8**, i1*)

declare void @__module_lfortran_intrinsic_builtin_get_command_argument(i32*, i8**, i1*, i32*, i1*, i32*, i1*)

declare void @__module_lfortran_intrinsic_builtin_get_environment_variable(i8**, i8**, i1*, i32*, i1*, i32*, i1*, i1*, i1*)

declare i32 @__module_lfortran_intrinsic_builtin_int(%array.1*, i32*, i1*)

declare i1 @__module_lfortran_intrinsic_builtin_is_iostat_end(i32*)

declare i1 @__module_lfortran_intrinsic_builtin_is_iostat_eor(i32*)

declare i32 @__module_lfortran_intrinsic_builtin_lbound(%dimension_descriptor**, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_len(i8**, i32*, i1*)

declare i32 @__module_lfortran_intrinsic_builtin_max(i32*, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_maxval(%array*)

declare i32 @__module_lfortran_intrinsic_builtin_min(i32*, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_minval(%array*)

declare void @__module_lfortran_intrinsic_builtin_move_alloc(i32*, i32*)

declare i1 @__module_lfortran_intrinsic_builtin_present(i32*, i1*)

declare float @__module_lfortran_intrinsic_builtin_real(%array*, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_reshape(%array*, %array*)

declare i32 @__module_lfortran_intrinsic_builtin_shape(%array*)

declare i32 @__module_lfortran_intrinsic_builtin_ubound(%dimension_descriptor**, i32*)

define i8* @__module_lfortran_intrinsic_string_adjustl(i8** %x) {
.entry:
  %call_arg_value1 = alloca i1, align 1
  %call_arg_value = alloca i1, align 1
  %i = alloca i32, align 4
  %initial_spaces_cnt = alloca i32, align 4
  %j = alloca i32, align 4
  %r = alloca i8*, align 8
  %0 = alloca i32, align 4
  store i1 false, i1* %call_arg_value, align 1
  %1 = call i32 @_lfortran_str_len(i8** %x)
  %2 = add i32 %1, 1
  %3 = call i8* (i32, ...) @_lfortran_malloc(i32 %2)
  call void (i32, i8*, ...) @_lfortran_string_init(i32 %2, i8* %3)
  store i8* %3, i8** %r, align 8
  store i32 1, i32* %j, align 4
  %4 = call i32 @__module_lfortran_intrinsic_string_cnt_initial_spaces(i8** %x)
  store i32 %4, i32* %initial_spaces_cnt, align 4
  %5 = load i32, i32* %initial_spaces_cnt, align 4
  %6 = add i32 %5, 1
  %7 = sub i32 %6, 1
  store i32 %7, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %8 = load i32, i32* %i, align 4
  %9 = add i32 %8, 1
  %10 = alloca i32, align 4
  store i1 false, i1* %call_arg_value1, align 1
  %11 = call i32 @_lfortran_str_len(i8** %x)
  %12 = icmp sle i32 %9, %11
  br i1 %12, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %13 = load i32, i32* %i, align 4
  %14 = add i32 %13, 1
  store i32 %14, i32* %i, align 4
  %15 = load i32, i32* %j, align 4
  %16 = load i8*, i8** %r, align 8
  %17 = sub i32 %15, 1
  %18 = getelementptr i8, i8* %16, i32 %17
  %19 = load i32, i32* %i, align 4
  %20 = load i8*, i8** %x, align 8
  %21 = call i8* @_lfortran_str_item(i8* %20, i32 %19)
  %22 = load i8, i8* %21, align 1
  store i8 %22, i8* %18, align 1
  %23 = load i32, i32* %j, align 4
  %24 = add i32 %23, 1
  store i32 %24, i32* %j, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  store i32 0, i32* %i, align 4
  br label %loop.head2

loop.head2:                                       ; preds = %loop.body3, %loop.end
  %25 = load i32, i32* %i, align 4
  %26 = add i32 %25, 1
  %27 = load i32, i32* %initial_spaces_cnt, align 4
  %28 = icmp sle i32 %26, %27
  br i1 %28, label %loop.body3, label %loop.end4

loop.body3:                                       ; preds = %loop.head2
  %29 = load i32, i32* %i, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %i, align 4
  %31 = load i32, i32* %j, align 4
  %32 = load i8*, i8** %r, align 8
  %33 = sub i32 %31, 1
  %34 = getelementptr i8, i8* %32, i32 %33
  %35 = load i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), align 1
  store i8 %35, i8* %34, align 1
  %36 = load i32, i32* %j, align 4
  %37 = add i32 %36, 1
  store i32 %37, i32* %j, align 4
  br label %loop.head2

loop.end4:                                        ; preds = %loop.head2
  br label %return

return:                                           ; preds = %loop.end4
  %38 = load i8*, i8** %r, align 8
  ret i8* %38
}

define i8* @__module_lfortran_intrinsic_string_adjustr(i8** %x) {
.entry:
  %call_arg_value = alloca i1, align 1
  %r = alloca i8*, align 8
  %0 = alloca i32, align 4
  store i1 false, i1* %call_arg_value, align 1
  %1 = call i32 @_lfortran_str_len(i8** %x)
  %2 = add i32 %1, 1
  %3 = call i8* (i32, ...) @_lfortran_malloc(i32 %2)
  call void (i32, i8*, ...) @_lfortran_string_init(i32 %2, i8* %3)
  store i8* %3, i8** %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %4 = load i8*, i8** %r, align 8
  ret i8* %4
}

define i32 @__module_lfortran_intrinsic_string_cnt_initial_spaces(i8** %string) {
.entry:
  %call_arg_value1 = alloca i1, align 1
  %call_arg_value = alloca i1, align 1
  %i = alloca i32, align 4
  %is_all_spaces = alloca i1, align 1
  %r = alloca i32, align 4
  %0 = alloca i32, align 4
  store i1 false, i1* %call_arg_value, align 1
  %1 = call i32 @_lfortran_str_len(i8** %string)
  store i32 %1, i32* %r, align 4
  %2 = load i32, i32* %r, align 4
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  store i1 true, i1* %is_all_spaces, align 1
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %ifcont4, %ifcont
  %4 = load i32, i32* %i, align 4
  %5 = add i32 %4, 1
  %6 = alloca i32, align 4
  store i1 false, i1* %call_arg_value1, align 1
  %7 = call i32 @_lfortran_str_len(i8** %string)
  %8 = icmp sle i32 %5, %7
  br i1 %8, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %9 = load i32, i32* %i, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %i, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i8*, i8** %string, align 8
  %13 = call i8* @_lfortran_str_item(i8* %12, i32 %11)
  %14 = alloca i8*, align 8
  store i8* %13, i8** %14, align 8
  %15 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0), i8** %15, align 8
  %16 = call i1 @_lpython_str_compare_noteq(i8** %14, i8** %15)
  br i1 %16, label %then2, label %else3

then2:                                            ; preds = %loop.body
  store i1 false, i1* %is_all_spaces, align 1
  br label %loop.end

unreachable_after_exit:                           ; No predecessors!
  br label %ifcont4

else3:                                            ; preds = %loop.body
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %unreachable_after_exit
  br label %loop.head

loop.end:                                         ; preds = %then2, %loop.head
  %17 = load i1, i1* %is_all_spaces, align 1
  %18 = xor i1 %17, true
  br i1 %18, label %then5, label %else6

then5:                                            ; preds = %loop.end
  %19 = load i32, i32* %i, align 4
  %20 = sub i32 %19, 1
  store i32 %20, i32* %r, align 4
  br label %ifcont7

else6:                                            ; preds = %loop.end
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  br label %return

return:                                           ; preds = %ifcont7, %then
  %21 = load i32, i32* %r, align 4
  ret i32 %21
}

define void @__module_lfortran_intrinsic_string_date_and_time(i8** %date, i1* %is_date_present_, i8** %time, i1* %is_time_present_, i8** %zone, i1* %is_zone_present_, i32* %values, i1* %is_values_present_) {
.entry:
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @__module_lfortran_intrinsic_string_index(i8** %string_, i8** %substring_) {
.entry:
  %call_arg_value2 = alloca i1, align 1
  %call_arg_value = alloca i1, align 1
  %found = alloca i1, align 1
  %i = alloca i32, align 4
  %idx = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %pos = alloca i32, align 4
  store i1 true, i1* %found, align 1
  store i32 0, i32* %idx, align 4
  store i32 1, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %ifcont12, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = alloca i32, align 4
  store i1 false, i1* %call_arg_value, align 1
  %2 = call i32 @_lfortran_str_len(i8** %string_)
  %3 = icmp slt i32 %0, %2
  %4 = load i1, i1* %found, align 1
  %5 = icmp eq i1 %3, false
  %6 = alloca i1, align 1
  br i1 %5, label %then, label %else

then:                                             ; preds = %loop.head
  store i1 %3, i1* %6, align 1
  br label %ifcont

else:                                             ; preds = %loop.head
  store i1 %4, i1* %6, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %7 = load i1, i1* %6, align 1
  br i1 %7, label %loop.body, label %loop.end13

loop.body:                                        ; preds = %ifcont
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont9, %loop.body
  %8 = load i32, i32* %j, align 4
  %9 = alloca i32, align 4
  store i1 false, i1* %call_arg_value2, align 1
  %10 = call i32 @_lfortran_str_len(i8** %substring_)
  %11 = icmp slt i32 %8, %10
  %12 = load i1, i1* %found, align 1
  %13 = icmp eq i1 %11, false
  %14 = alloca i1, align 1
  br i1 %13, label %then3, label %else4

then3:                                            ; preds = %loop.head1
  store i1 %11, i1* %14, align 1
  br label %ifcont5

else4:                                            ; preds = %loop.head1
  store i1 %12, i1* %14, align 1
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  %15 = load i1, i1* %14, align 1
  br i1 %15, label %loop.body6, label %loop.end

loop.body6:                                       ; preds = %ifcont5
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %k, align 4
  %18 = add i32 %16, %17
  store i32 %18, i32* %pos, align 4
  %19 = load i32, i32* %pos, align 4
  %20 = load i8*, i8** %string_, align 8
  %21 = call i8* @_lfortran_str_item(i8* %20, i32 %19)
  %22 = load i32, i32* %j, align 4
  %23 = load i8*, i8** %substring_, align 8
  %24 = call i8* @_lfortran_str_item(i8* %23, i32 %22)
  %25 = load i8, i8* %21, align 1
  %26 = load i8, i8* %24, align 1
  %27 = icmp ne i8 %25, %26
  br i1 %27, label %then7, label %else8

then7:                                            ; preds = %loop.body6
  store i1 false, i1* %found, align 1
  br label %ifcont9

else8:                                            ; preds = %loop.body6
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %28 = load i32, i32* %k, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %k, align 4
  %30 = load i32, i32* %j, align 4
  %31 = add i32 %30, 1
  store i32 %31, i32* %j, align 4
  br label %loop.head1

loop.end:                                         ; preds = %ifcont5
  %32 = load i1, i1* %found, align 1
  br i1 %32, label %then10, label %else11

then10:                                           ; preds = %loop.end
  %33 = load i32, i32* %i, align 4
  store i32 %33, i32* %idx, align 4
  store i1 false, i1* %found, align 1
  br label %ifcont12

else11:                                           ; preds = %loop.end
  store i1 true, i1* %found, align 1
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  %34 = load i32, i32* %i, align 4
  %35 = add i32 %34, 1
  store i32 %35, i32* %i, align 4
  br label %loop.head

loop.end13:                                       ; preds = %ifcont
  br label %return

return:                                           ; preds = %loop.end13
  %36 = load i32, i32* %idx, align 4
  ret i32 %36
}

define i32 @__module_lfortran_intrinsic_string_len_repeati32(i32* %n) {
.entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* %n, align 4
  store i32 %0, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %1 = load i32, i32* %r, align 4
  ret i32 %1
}

define i32 @__module_lfortran_intrinsic_string_len_repeati64(i64* %n) {
.entry:
  %r = alloca i32, align 4
  %0 = load i64, i64* %n, align 4
  %1 = trunc i64 %0 to i32
  store i32 %1, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load i32, i32* %r, align 4
  ret i32 %2
}

define i32 @__module_lfortran_intrinsic_string_len_trim(i8** %string) {
.entry:
  %call_arg_value = alloca i1, align 1
  %r = alloca i32, align 4
  %0 = alloca i32, align 4
  store i1 false, i1* %call_arg_value, align 1
  %1 = call i32 @_lfortran_str_len(i8** %string)
  store i32 %1, i32* %r, align 4
  %2 = load i32, i32* %r, align 4
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  br label %loop.head

loop.head:                                        ; preds = %ifcont3, %ifcont
  %4 = load i32, i32* %r, align 4
  %5 = load i8*, i8** %string, align 8
  %6 = call i8* @_lfortran_str_item(i8* %5, i32 %4)
  %7 = alloca i8*, align 8
  store i8* %6, i8** %7, align 8
  %8 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i8** %8, align 8
  %9 = call i1 @_lpython_str_compare_eq(i8** %7, i8** %8)
  br i1 %9, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %10 = load i32, i32* %r, align 4
  %11 = sub i32 %10, 1
  store i32 %11, i32* %r, align 4
  %12 = load i32, i32* %r, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %then1, label %else2

then1:                                            ; preds = %loop.body
  br label %loop.end

unreachable_after_exit:                           ; No predecessors!
  br label %ifcont3

else2:                                            ; preds = %loop.body
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %unreachable_after_exit
  br label %loop.head

loop.end:                                         ; preds = %then1, %loop.head
  br label %return

return:                                           ; preds = %loop.end, %then
  %14 = load i32, i32* %r, align 4
  ret i32 %14
}

define i1 @__module_lfortran_intrinsic_string_lge(i8** %x, i8** %y) {
.entry:
  %r = alloca i1, align 1
  br label %return

return:                                           ; preds = %.entry
  %0 = load i1, i1* %r, align 1
  ret i1 %0
}

define i1 @__module_lfortran_intrinsic_string_lgt(i8** %x, i8** %y) {
.entry:
  %r = alloca i1, align 1
  br label %return

return:                                           ; preds = %.entry
  %0 = load i1, i1* %r, align 1
  ret i1 %0
}

define i1 @__module_lfortran_intrinsic_string_lle(i8** %x, i8** %y) {
.entry:
  %r = alloca i1, align 1
  br label %return

return:                                           ; preds = %.entry
  %0 = load i1, i1* %r, align 1
  ret i1 %0
}

define i1 @__module_lfortran_intrinsic_string_llt(i8** %x, i8** %y) {
.entry:
  %r = alloca i1, align 1
  br label %return

return:                                           ; preds = %.entry
  %0 = load i1, i1* %r, align 1
  ret i1 %0
}

define i8* @__module_lfortran_intrinsic_string_new_line(i8** %c) {
.entry:
  %r = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), i8** %r, align 8
  call void @_lfortran_strcpy(i8** %r, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i32 0, i32 0), i8 0)
  br label %return

return:                                           ; preds = %.entry
  %0 = load i8*, i8** %r, align 8
  ret i8* %0
}

define i8* @__module_lfortran_intrinsic_string_repeati32(i8** %s, i32* %n) {
.entry:
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %r = alloca i8*, align 8
  %0 = call i32 @__module_lfortran_intrinsic_string_len_repeati32(i32* %n)
  %1 = add i32 %0, 1
  %2 = call i8* (i32, ...) @_lfortran_malloc(i32 %1)
  call void (i32, i8*, ...) @_lfortran_string_init(i32 %1, i8* %2)
  store i8* %2, i8** %r, align 8
  store i32 1, i32* %i1, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %3 = load i32, i32* %i, align 4
  %4 = add i32 %3, 1
  %5 = load i32, i32* %n, align 4
  %6 = icmp sle i32 %4, %5
  br i1 %6, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %7 = load i32, i32* %i, align 4
  %8 = add i32 %7, 1
  store i32 %8, i32* %i, align 4
  %9 = load i32, i32* %i, align 4
  %10 = load i8*, i8** %r, align 8
  %11 = sub i32 %9, 1
  %12 = getelementptr i8, i8* %10, i32 %11
  %13 = load i32, i32* %i1, align 4
  %14 = load i8*, i8** %s, align 8
  %15 = call i8* @_lfortran_str_item(i8* %14, i32 %13)
  %16 = load i8, i8* %15, align 1
  store i8 %16, i8* %12, align 1
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %17 = load i8*, i8** %r, align 8
  ret i8* %17
}

define i8* @__module_lfortran_intrinsic_string_repeati64(i8** %s, i64* %n) {
.entry:
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %r = alloca i8*, align 8
  %0 = call i32 @__module_lfortran_intrinsic_string_len_repeati64(i64* %n)
  %1 = add i32 %0, 1
  %2 = call i8* (i32, ...) @_lfortran_malloc(i32 %1)
  call void (i32, i8*, ...) @_lfortran_string_init(i32 %1, i8* %2)
  store i8* %2, i8** %r, align 8
  store i32 1, i32* %i1, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %3 = load i32, i32* %i, align 4
  %4 = add i32 %3, 1
  %5 = load i64, i64* %n, align 4
  %6 = trunc i64 %5 to i32
  %7 = icmp sle i32 %4, %6
  br i1 %7, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %8 = load i32, i32* %i, align 4
  %9 = add i32 %8, 1
  store i32 %9, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i8*, i8** %r, align 8
  %12 = sub i32 %10, 1
  %13 = getelementptr i8, i8* %11, i32 %12
  %14 = load i32, i32* %i1, align 4
  %15 = load i8*, i8** %s, align 8
  %16 = call i8* @_lfortran_str_item(i8* %15, i32 %14)
  %17 = load i8, i8* %16, align 1
  store i8 %17, i8* %13, align 1
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %18 = load i8*, i8** %r, align 8
  ret i8* %18
}

define i32 @__module_lfortran_intrinsic_string_scan_kind4(i8** %string, i8** %set, i1* %back, i1* %is_back_present_) {
.entry:
  %r = alloca i32, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define i64 @__module_lfortran_intrinsic_string_scan_kind8(i8** %string, i8** %set, i1* %back, i1* %is_back_present_) {
.entry:
  %r = alloca i64, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load i64, i64* %r, align 4
  ret i64 %0
}

define i8* @__module_lfortran_intrinsic_string_trim(i8** %x) {
.entry:
  %call_arg_value = alloca i1, align 1
  %i = alloca i32, align 4
  %r = alloca i8*, align 8
  %0 = call i32 @__module_lfortran_intrinsic_string_len_trim(i8** %x)
  %1 = add i32 %0, 1
  %2 = call i8* (i32, ...) @_lfortran_malloc(i32 %1)
  call void (i32, i8*, ...) @_lfortran_string_init(i32 %1, i8* %2)
  store i8* %2, i8** %r, align 8
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %3 = load i32, i32* %i, align 4
  %4 = add i32 %3, 1
  %5 = alloca i32, align 4
  store i1 false, i1* %call_arg_value, align 1
  %6 = call i32 @_lfortran_str_len(i8** %r)
  %7 = icmp sle i32 %4, %6
  br i1 %7, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %8 = load i32, i32* %i, align 4
  %9 = add i32 %8, 1
  store i32 %9, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i8*, i8** %r, align 8
  %12 = sub i32 %10, 1
  %13 = getelementptr i8, i8* %11, i32 %12
  %14 = load i32, i32* %i, align 4
  %15 = load i8*, i8** %x, align 8
  %16 = call i8* @_lfortran_str_item(i8* %15, i32 %14)
  %17 = load i8, i8* %16, align 1
  store i8 %17, i8* %13, align 1
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %18 = load i8*, i8** %r, align 8
  ret i8* %18
}

define i32 @__module_lfortran_intrinsic_string_verify_kind4(i8** %string, i8** %set, i1* %back, i1* %is_back_present_) {
.entry:
  %r = alloca i32, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define i64 @__module_lfortran_intrinsic_string_verify_kind8(i8** %string, i8** %set, i1* %back, i1* %is_back_present_) {
.entry:
  %r = alloca i64, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load i64, i64* %r, align 4
  ret i64 %0
}

declare i32 @_lfortran_str_len(i8**)

declare i8* @_lfortran_malloc(i32, ...)

declare void @_lfortran_string_init(i32, i8*, ...)

declare i8* @_lfortran_str_item(i8*, i32)

declare i1 @_lpython_str_compare_noteq(i8**, i8**)

declare i1 @_lpython_str_compare_eq(i8**, i8**)

declare void @_lfortran_strcpy(i8**, i8*, i8)

define void @__module_m_f(i8** %filename) {
.entry:
  %u = alloca i32, align 4
  %0 = load i32, i32* %u, align 4
  %1 = call i8* @__module_lfortran_intrinsic_string_trim(i8** %filename)
  %2 = call i64 @_lfortran_open(i32 %0, i8* %1, i8* null)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare i64 @_lfortran_open(i32, i8*, i8*)
