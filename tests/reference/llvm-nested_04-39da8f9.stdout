; ModuleID = 'LFortran'
source_filename = "LFortran"

@__lcompilers_created__nested_context__b_y = global i32 0
@__lcompilers_created__nested_context__b_yy = global float 0.000000e+00
@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@9 = private unnamed_addr constant [2 x i8] c" \00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [4 x i8] c"b()\00", align 1
@12 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @__module_nested_04_a_b(i32* %x) {
.entry:
  %call_arg_value = alloca i32, align 4
  %b = alloca i32, align 4
  %y = alloca i32, align 4
  %yy = alloca float, align 4
  store float 0x401A666660000000, float* %yy, align 4
  %0 = load i32, i32* %x, align 4
  store i32 %0, i32* %y, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  %1 = load i32, i32* %y, align 4
  store i32 %1, i32* @__lcompilers_created__nested_context__b_y, align 4
  %2 = load float, float* %yy, align 4
  store float %2, float* @__lcompilers_created__nested_context__b_yy, align 4
  store i32 6, i32* %call_arg_value, align 4
  %3 = call i32 @__module_nested_04_a_c(i32* %call_arg_value)
  store i32 %3, i32* %b, align 4
  %4 = load i32, i32* @__lcompilers_created__nested_context__b_y, align 4
  store i32 %4, i32* %y, align 4
  %5 = load float, float* @__lcompilers_created__nested_context__b_yy, align 4
  store float %5, float* %yy, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load i32, i32* %b, align 4
  ret i32 %6
}

define i32 @__module_nested_04_a_c(i32* %z) {
.entry:
  %c = alloca i32, align 4
  %0 = load i32, i32* %z, align 4
  %1 = sext i32 %0 to i64
  %2 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 2, i8* null, i32 2, i64 %1)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %3 = load i32, i32* @__lcompilers_created__nested_context__b_y, align 4
  %4 = sext i32 %3 to i64
  %5 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 2, i8* null, i32 2, i64 %4)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %6 = load float, float* @__lcompilers_created__nested_context__b_yy, align 4
  %7 = fpext float %6 to double
  %8 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 2, i8* null, i32 6, double %7)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  %9 = load i32, i32* %z, align 4
  store i32 %9, i32* %c, align 4
  br label %return

return:                                           ; preds = %.entry
  %10 = load i32, i32* %c, align 4
  ret i32 %10
}

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca i32, align 4
  %test = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %test1 = alloca i32, align 4
  store i32 5, i32* %call_arg_value, align 4
  %2 = call i32 @__module_nested_04_a_b(i32* %call_arg_value)
  store i32 %2, i32* %test1, align 4
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)
