#include <inttypes.h>

#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <lfortran_intrinsics.h>

#define ASSERT(cond)                                                           \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            exit(1);                                                           \
        }                                                                      \
    }
#define ASSERT_MSG(cond, msg)                                                  \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            printf("%s", "ERROR MESSAGE:\n");                                  \
            printf("%s%s", msg, "\n");                                         \
            exit(1);                                                           \
        }                                                                      \
    }


struct dimension_descriptor
{
    int32_t lower_bound, length;
};

// Implementations
int main(int argc, char* argv[])
{
    _lpython_set_argv(argc, argv);
    int32_t i;
    int32_t out;
    i = 4;
    if (i == 1) {
        out = 10;
        printf("%s\n", "1");
    }
    else if (i == 2) {
        out = 20;
        printf("%s\n", "2");
    }
    else if (i == 3) {
        out = 30;
        printf("%s\n", "3");
    }
    else if (i == 4) {
        out = 40;
        printf("%s\n", "4");
    }
    if (out != 40) {
        fprintf(stderr, "ERROR STOP");
        exit(1);
    }
    if (i == 1) {
        out = 11;
        printf("%s\n", "1");
    }
    else if (i == 2 || i == 3 || i == 4) {
        out = 22;
        printf("%s\n", "2,3,4");
    }
    if (out != 22) {
        fprintf(stderr, "ERROR STOP");
        exit(1);
    }
    return 0;
}
