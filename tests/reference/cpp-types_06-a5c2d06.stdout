#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}


struct dimension_descriptor
{
    int32_t lower_bound, length;
};
// Forward declarations
namespace {
}

// Implementations
namespace {

void main2() {
    int32_t i;
    float r;
    r = (float)(2);
    i = 2;
    if (i < i) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (r < r) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (r < (float)(i)) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if ((float)(i) < r) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (i > i) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (r > r) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (r > (float)(i)) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if ((float)(i) > r) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (i != i) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (r != r) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (r != (float)(i)) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if ((float)(i) != r) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (i + 1 <= i) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (r + (float)(1) <= r) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (r + (float)(1) <= (float)(i)) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if ((float)(i + 1) <= r) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (i >= i + 1) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (r >= r + (float)(1)) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (r >= (float)(i + 1)) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if ((float)(i) >= r + (float)(1)) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (i == i + 1) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (r == r + (float)(1)) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if (r == (float)(i + 1)) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
    if ((float)(i) == r + (float)(1)) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
