; ModuleID = 'LFortran'
source_filename = "LFortran"

%foo_c = type { %foo_b, %bar_c }
%foo_b = type { %foo_a, %bar_b }
%foo_a = type { %bar_a }
%bar_a = type { i32 }
%bar_b = type { %bar_a, i32 }
%bar_c = type { %bar_b, i32 }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@9 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %foo = alloca %foo_c, align 8
  %2 = getelementptr %foo_c, %foo_c* %foo, i32 0, i32 1
  %3 = getelementptr %bar_c, %bar_c* %2, i32 0, i32 1
  %4 = getelementptr %foo_c, %foo_c* %foo, i32 0, i32 0
  %5 = getelementptr %foo_b, %foo_b* %4, i32 0, i32 0
  %6 = getelementptr %foo_a, %foo_a* %5, i32 0, i32 0
  %7 = getelementptr %bar_a, %bar_a* %6, i32 0, i32 0
  store i32 -20, i32* %7, align 4
  %8 = getelementptr %foo_c, %foo_c* %foo, i32 0, i32 0
  %9 = getelementptr %foo_b, %foo_b* %8, i32 0, i32 1
  %10 = getelementptr %bar_b, %bar_b* %9, i32 0, i32 1
  store i32 9, i32* %10, align 4
  %11 = getelementptr %foo_c, %foo_c* %foo, i32 0, i32 1
  %12 = getelementptr %bar_c, %bar_c* %11, i32 0, i32 1
  store i32 11, i32* %12, align 4
  %13 = getelementptr %foo_c, %foo_c* %foo, i32 0, i32 0
  %14 = getelementptr %foo_b, %foo_b* %13, i32 0, i32 0
  %15 = getelementptr %foo_a, %foo_a* %14, i32 0, i32 0
  %16 = getelementptr %bar_a, %bar_a* %15, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %18 = getelementptr %foo_c, %foo_c* %foo, i32 0, i32 0
  %19 = getelementptr %foo_b, %foo_b* %18, i32 0, i32 1
  %20 = getelementptr %bar_b, %bar_b* %19, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i32 %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %22 = getelementptr %foo_c, %foo_c* %foo, i32 0, i32 1
  %23 = getelementptr %bar_c, %bar_c* %22, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i32 %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  %25 = getelementptr %foo_c, %foo_c* %foo, i32 0, i32 0
  %26 = getelementptr %foo_b, %foo_b* %25, i32 0, i32 0
  %27 = getelementptr %foo_a, %foo_a* %26, i32 0, i32 0
  %28 = getelementptr %bar_a, %bar_a* %27, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr %foo_c, %foo_c* %foo, i32 0, i32 0
  %31 = getelementptr %foo_b, %foo_b* %30, i32 0, i32 1
  %32 = getelementptr %bar_b, %bar_b* %31, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = add i32 %29, %33
  %35 = getelementptr %foo_c, %foo_c* %foo, i32 0, i32 1
  %36 = getelementptr %bar_c, %bar_c* %35, i32 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = add i32 %34, %37
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
