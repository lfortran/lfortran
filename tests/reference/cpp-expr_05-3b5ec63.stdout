#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

// Forward declarations
namespace {
}

// Implementations
namespace {

void main2() {
    int32_t a;
    int32_t b;
    int32_t c;
    bool l;
    int32_t x;
    a = 3;
    b = 4;
    c = 5;
    x = 2*3;
    x = (-2)*3;
    x = 2*(-3);
    x = (-2)*(-3);
    x = (-2)*(-3);
    x = -std::pow(2, 3);
    x = -std::pow(2, 3);
    x = -(2*3);
    x = std::pow(2, -3);
    x = a;
    x = a;
    x = a*b;
    x = (-a)*b;
    x = -(a*b);
    x = a*(-b);
    x = (-a)*(-b);
    x = a*b*c;
    x = (-a)*b*c;
    x = a*(-b)*c;
    x = a*b*(-c);
    x = (-a)*(-b)*(-c);
    x = 3 + 4*5;
    x = (3 + 4)*5;
    x = a*(b + 5*(c - b));
    x = (3 - 2*a*b)*5;
    x = ((-2)*a*b + 3)*5;
    x = ((-2)*a*b + 3*b*a)*5;
    x = ((-2)*(a/b) + std::pow(a + (-b), 2))*5;
    x = (2*a*b + 3)*5;
    x = std::pow(a, 2) + 2*a*b + std::pow(b, 2);
    x = (a + b)*(a - b);
    x = std::pow(a + b, 2);
    x = (a + b)*(std::pow(a, 2) - a*b + std::pow(b, 2));
    x = (a - b)*(a + b)*(std::pow(a, 2) + std::pow(b, 2));
    x = 1/(a*b);
    x = 1/a*b;
    x = 1/a*b;
    x = 1/(a*b + 1);
    x = 1/a*b + 1;
    x = 1/a*b + 1;
    x = 2 - (-2);
    x = a - ((-b) - c);
    x = a - (-2)*b;
    x = c - (-2)/b;
    x = a - (2 + 3 + 4);
    x = a + (2 + 3 + 4);
    x = 2*a + a*b - (a*b + 2*a);
    x = 2*a + a*b - (a*b - 2*a);
    x = a - (b - (c - 1));
    x = a - b;
    x = a - (b - c);
    x = a - b - c;
    x = -(a - ((-b) + ((-b) - (-b)*b)));
    x = -(3 + 5);
    x = -(a + 5);
    l = (std::pow(x, 3)*4 + a <= 4 || x < 5 && x < 6) == (true || !false && true);
    l = l || l && l;
    l = (l || l) && l;
    l = l && l || l;
    l = l && (l || l);
    l = l || !l && l;
    l = l || l && !l;
    l = l && l || !l;
    l = l && !l || l;
    l = l && !(l || l);
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
