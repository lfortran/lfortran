; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [27 x i8] c"%13.8e%s%23.17e%s%23.17e%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %prec1 = alloca i32, align 4
  store i32 4, i32* %prec1, align 4
  %prec2 = alloca i32, align 4
  store i32 8, i32* %prec2, align 4
  %u = alloca float, align 4
  store float 0x3FF0CCCCC0000000, float* %u, align 4
  %v = alloca double, align 8
  store double 1.050000e+00, double* %v, align 8
  %zero = alloca double, align 8
  store double 0.000000e+00, double* %zero, align 8
  %2 = load float, float* %u, align 4
  %3 = fpext float %2 to double
  %4 = load double, double* %v, align 8
  %5 = load double, double* %zero, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @2, i32 0, i32 0), double %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), double %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), double %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)
