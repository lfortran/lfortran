; ModuleID = 'LFortran'
source_filename = "LFortran"

@real_dp_param.u = internal global float 0x3FF0CCCCC0000000
@real_dp_param.v = internal global double 0x3FF0CCCCC0000000
@real_dp_param.zero = internal global double 0.000000e+00
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [9 x i8] c"R4,R8,R8\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %prec1 = alloca i32, align 4
  store i32 4, i32* %prec1, align 4
  %prec2 = alloca i32, align 4
  store i32 8, i32* %prec2, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %prec11 = alloca i32, align 4
  store i32 4, i32* %prec11, align 4
  %prec22 = alloca i32, align 4
  store i32 8, i32* %prec22, align 4
  %2 = call i8* (i8*, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, float* @real_dp_param.u, double* @real_dp_param.v, double* @real_dp_param.zero)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i8*, i32, i32, ...)

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_free_argv()
