; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"R4\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [3 x i8] c"R4\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.2 = private unnamed_addr constant [3 x i8] c"R4\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@main.res = internal global float 0.000000e+00

define void @__module_callback_02_cb(float* %res, float* %a, float* %b, void (float*, float*)* %f) {
.entry:
  call void %f(float* %a, float* %res)
  %0 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, float* %res)
  %1 = call i64 @_lfortran_str_len(i8* %0)
  %2 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %2 to %string_descriptor*
  %3 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %1, i64* %4, align 4
  %5 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %8 = load i64, i64* %7, align 4
  %9 = trunc i64 %8 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %6, i32 %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  call void %f(float* %b, float* %res)
  %10 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.1, i32 0, i32 0), i32 0, i32 0, float* %res)
  %11 = call i64 @_lfortran_str_len(i8* %10)
  %12 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc1 = bitcast i8* %12 to %string_descriptor*
  %13 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  store i8* %10, i8** %13, align 8
  %14 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  store i64 %11, i64* %14, align 4
  %15 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  %18 = load i64, i64* %17, align 4
  %19 = trunc i64 %18 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %16, i32 %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  %20 = load float, float* %b, align 4
  %21 = load float, float* %a, align 4
  %22 = fsub float %20, %21
  %23 = load float, float* %res, align 4
  %24 = fmul float %22, %23
  store float %24, float* %res, align 4
  %25 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.2, i32 0, i32 0), i32 0, i32 0, float* %res)
  %26 = call i64 @_lfortran_str_len(i8* %25)
  %27 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc2 = bitcast i8* %27 to %string_descriptor*
  %28 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  store i8* %25, i8** %28, align 8
  %29 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  store i64 %26, i64* %29, align 4
  %30 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  %33 = load i64, i64* %32, align 4
  %34 = trunc i64 %33 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %31, i32 %34, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i32 1)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @f(float*, float*)

define float @__module_callback_02_foo(float* %c, float* %d, float* %res) {
.entry:
  %foo = alloca float, align 4
  call void @__module_callback_02_cb(float* %res, float* %c, float* %d, void (float*, float*)* @foo.__module_callback_02_f)
  %0 = load float, float* %res, align 4
  store float %0, float* %foo, align 4
  br label %return

return:                                           ; preds = %.entry
  %1 = load float, float* %foo, align 4
  ret float %1
}

define void @foo.__module_callback_02_f(float* %x, float* %res) {
.entry:
  %0 = load float, float* %x, align 4
  %1 = fmul float 2.000000e+00, %0
  store float %1, float* %res, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value1 = alloca float, align 4
  %call_arg_value = alloca float, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  store float 1.500000e+00, float* %call_arg_value, align 4
  store float 2.000000e+00, float* %call_arg_value1, align 4
  %2 = call float @__module_callback_02_foo(float* %call_arg_value, float* %call_arg_value1, float* @main.res)
  store float %2, float* @main.res, align 4
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lpython_free_argv()
