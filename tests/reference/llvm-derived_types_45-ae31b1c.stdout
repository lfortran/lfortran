; ModuleID = 'LFortran'
source_filename = "LFortran"

%myint = type <{ i32 (...)**, i32 }>

@_Name_myint = private unnamed_addr constant [6 x i8] c"myint\00", align 1
@_Type_Info_myint = linkonce_odr unnamed_addr constant { i8* } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @_Name_myint, i32 0, i32 0) }, align 8
@_VTable_myint = linkonce_odr unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8* }* @_Type_Info_myint to i8*), i8* bitcast (void (i8*, i8*)* @_copy_derived_types_45_mod_myint to i8*)] }, align 8
@"ERROR STOP" = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @_copy_derived_types_45_mod_myint(i8* %0, i8* %1) {
entry:
  %2 = bitcast i8* %0 to %myint*
  %3 = bitcast i8* %1 to %myint*
  %4 = bitcast %myint* %3 to i32 (...)***
  %5 = load i32 (...)**, i32 (...)*** %4, align 8
  %6 = bitcast %myint* %2 to i32 (...)***
  store i32 (...)** %5, i32 (...)*** %6, align 8
  %7 = getelementptr %myint, %myint* %2, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr %myint, %myint* %3, i32 0, i32 1
  br i1 true, label %then, label %else

then:                                             ; preds = %entry
  store i32 %8, i32* %9, align 4
  br label %ifcont

else:                                             ; preds = %entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %10 = bitcast %myint* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_VTable_myint, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %10, align 8
  ret void
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %ins = alloca %myint*, align 8
  store %myint* null, %myint** %ins, align 8
  %2 = load %myint*, %myint** %ins, align 8
  %3 = icmp eq %myint* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  %4 = call i8* @_lfortran_malloc(i64 12)
  call void @llvm.memset.p0i8.i32(i8* %4, i8 0, i32 12, i1 false)
  %5 = bitcast i8* %4 to %myint*
  store %myint* %5, %myint** %ins, align 8
  %6 = load %myint*, %myint** %ins, align 8
  %7 = bitcast %myint* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_VTable_myint, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr %myint, %myint* %6, i32 0, i32 1
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %9 = load %myint*, %myint** %ins, align 8
  %10 = getelementptr %myint, %myint* %9, i32 0, i32 1
  store i32 44, i32* %10, align 4
  %11 = load %myint*, %myint** %ins, align 8
  %12 = getelementptr %myint, %myint* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp ne i32 %13, 44
  br i1 %14, label %then1, label %else2

then1:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %15 = load %myint*, %myint** %ins, align 8
  %16 = ptrtoint %myint* %15 to i64
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %then4, label %else5

then4:                                            ; preds = %ifcont3
  %18 = alloca i8*, align 8
  %19 = bitcast %myint* %15 to i8*
  store i8* %19, i8** %18, align 8
  %20 = load i8*, i8** %18, align 8
  call void @_lfortran_free(i8* %20)
  store %myint* null, %myint** %ins, align 8
  br label %ifcont6

else5:                                            ; preds = %ifcont3
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont6
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i64)

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #0

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lfortran_free(i8*)

declare void @_lpython_free_argv()

attributes #0 = { argmemonly nounwind willreturn writeonly }
