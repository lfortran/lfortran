; ModuleID = 'LFortran'
source_filename = "LFortran"

%x = type { float, i32 }
%z = type { %complex_4, %y }
%complex_4 = type { float, float }
%y = type { %complex_4, %x }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@9 = private unnamed_addr constant [2 x i8] c" \00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @__module_derived_types_01_m_01_set(%x* %a) {
.entry:
  %0 = getelementptr %x, %x* %a, i32 0, i32 1
  store i32 1, i32* %0, align 4
  %1 = getelementptr %x, %x* %a, i32 0, i32 0
  store float 1.500000e+00, float* %1, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %b = alloca %x, align 8
  %2 = getelementptr %x, %x* %b, i32 0, i32 1
  %3 = getelementptr %x, %x* %b, i32 0, i32 0
  %c = alloca %z, align 8
  %4 = getelementptr %z, %z* %c, i32 0, i32 0
  %5 = getelementptr %z, %z* %c, i32 0, i32 1
  %6 = getelementptr %y, %y* %5, i32 0, i32 0
  %7 = getelementptr %y, %y* %5, i32 0, i32 1
  %8 = getelementptr %x, %x* %7, i32 0, i32 1
  %9 = getelementptr %x, %x* %7, i32 0, i32 0
  %10 = getelementptr %x, %x* %b, i32 0, i32 1
  store i32 5, i32* %10, align 4
  %11 = getelementptr %x, %x* %b, i32 0, i32 0
  store float 3.500000e+00, float* %11, align 4
  %12 = getelementptr %x, %x* %b, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr %x, %x* %b, i32 0, i32 0
  %16 = load float, float* %15, align 4
  %17 = fpext float %16 to double
  %18 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 2, i64 %14, i32 6, double %17)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @__module_derived_types_01_m_01_set(%x* %b)
  %19 = getelementptr %x, %x* %b, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr %x, %x* %b, i32 0, i32 0
  %23 = load float, float* %22, align 4
  %24 = fpext float %23 to double
  %25 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 2, i64 %21, i32 6, double %24)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %26 = getelementptr %z, %z* %c, i32 0, i32 1
  %27 = getelementptr %y, %y* %26, i32 0, i32 1
  %28 = getelementptr %x, %x* %27, i32 0, i32 0
  store float 2.000000e+00, float* %28, align 4
  %29 = getelementptr %z, %z* %c, i32 0, i32 1
  %30 = getelementptr %y, %y* %29, i32 0, i32 1
  %31 = getelementptr %x, %x* %30, i32 0, i32 1
  store i32 2, i32* %31, align 4
  %32 = getelementptr %z, %z* %c, i32 0, i32 0
  %33 = alloca %complex_4, align 8
  %34 = getelementptr %complex_4, %complex_4* %33, i32 0, i32 0
  %35 = getelementptr %complex_4, %complex_4* %33, i32 0, i32 1
  store float 2.000000e+00, float* %34, align 4
  store float 2.000000e+00, float* %35, align 4
  %36 = load %complex_4, %complex_4* %33, align 4
  store %complex_4 %36, %complex_4* %32, align 4
  %37 = getelementptr %z, %z* %c, i32 0, i32 1
  %38 = getelementptr %y, %y* %37, i32 0, i32 1
  %39 = getelementptr %x, %x* %38, i32 0, i32 0
  %40 = load float, float* %39, align 4
  %41 = fpext float %40 to double
  %42 = getelementptr %z, %z* %c, i32 0, i32 1
  %43 = getelementptr %y, %y* %42, i32 0, i32 1
  %44 = getelementptr %x, %x* %43, i32 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr %z, %z* %c, i32 0, i32 0
  %48 = load %complex_4, %complex_4* %47, align 4
  %49 = alloca %complex_4, align 8
  store %complex_4 %48, %complex_4* %49, align 4
  %50 = getelementptr %complex_4, %complex_4* %49, i32 0, i32 0
  %51 = load float, float* %50, align 4
  %52 = fpext float %51 to double
  %53 = alloca %complex_4, align 8
  store %complex_4 %48, %complex_4* %53, align 4
  %54 = getelementptr %complex_4, %complex_4* %53, i32 0, i32 1
  %55 = load float, float* %54, align 4
  %56 = fpext float %55 to double
  %57 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 8, i8* null, i32 6, double %41, i32 2, i64 %46, i32 6, double %52, i32 6, double %56)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  %58 = getelementptr %z, %z* %c, i32 0, i32 1
  %59 = getelementptr %y, %y* %58, i32 0, i32 1
  call void @__module_derived_types_01_m_01_set(%x* %59)
  %60 = getelementptr %z, %z* %c, i32 0, i32 1
  %61 = getelementptr %y, %y* %60, i32 0, i32 1
  %62 = getelementptr %x, %x* %61, i32 0, i32 0
  %63 = load float, float* %62, align 4
  %64 = fpext float %63 to double
  %65 = getelementptr %z, %z* %c, i32 0, i32 1
  %66 = getelementptr %y, %y* %65, i32 0, i32 1
  %67 = getelementptr %x, %x* %66, i32 0, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr %z, %z* %c, i32 0, i32 0
  %71 = load %complex_4, %complex_4* %70, align 4
  %72 = alloca %complex_4, align 8
  store %complex_4 %71, %complex_4* %72, align 4
  %73 = getelementptr %complex_4, %complex_4* %72, i32 0, i32 0
  %74 = load float, float* %73, align 4
  %75 = fpext float %74 to double
  %76 = alloca %complex_4, align 8
  store %complex_4 %71, %complex_4* %76, align 4
  %77 = getelementptr %complex_4, %complex_4* %76, i32 0, i32 1
  %78 = load float, float* %77, align 4
  %79 = fpext float %78 to double
  %80 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 8, i8* null, i32 6, double %64, i32 2, i64 %69, i32 6, double %75, i32 6, double %79)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* %80, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)
