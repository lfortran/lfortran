; ModuleID = 'LFortran'
source_filename = "LFortran"

%x = type { i32, float }
%z = type { %complex_4, %y }
%complex_4 = type { float, float }
%y = type { %complex_4, %x }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [9 x i8] c"%d%s%f%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [9 x i8] c"%d%s%f%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [18 x i8] c"%f%s%d%s(%f,%f)%s\00", align 1
@9 = private unnamed_addr constant [2 x i8] c" \00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [18 x i8] c"%f%s%d%s(%f,%f)%s\00", align 1

define void @__module_derived_types_01_m_01_set(%x* %a) {
.entry:
  %0 = getelementptr %x, %x* %a, i32 0, i32 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr %x, %x* %a, i32 0, i32 1
  store float 1.500000e+00, float* %1, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @main() {
.entry:
  %b = alloca %x, align 8
  %c = alloca %z, align 8
  %0 = getelementptr %x, %x* %b, i32 0, i32 0
  store i32 5, i32* %0, align 4
  %1 = getelementptr %x, %x* %b, i32 0, i32 1
  store float 3.500000e+00, float* %1, align 4
  %2 = getelementptr %x, %x* %b, i32 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr %x, %x* %b, i32 0, i32 1
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i32 0, i32 0), i32 %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), double %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @__module_derived_types_01_m_01_set(%x* %b)
  %7 = getelementptr %x, %x* %b, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr %x, %x* %b, i32 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = fpext float %10 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i32 0, i32 0), i32 %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), double %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %12 = getelementptr %z, %z* %c, i32 0, i32 1
  %13 = getelementptr %y, %y* %12, i32 0, i32 1
  %14 = getelementptr %x, %x* %13, i32 0, i32 1
  store float 2.000000e+00, float* %14, align 4
  %15 = getelementptr %z, %z* %c, i32 0, i32 1
  %16 = getelementptr %y, %y* %15, i32 0, i32 1
  %17 = getelementptr %x, %x* %16, i32 0, i32 0
  store i32 2, i32* %17, align 4
  %18 = getelementptr %z, %z* %c, i32 0, i32 0
  %19 = alloca %complex_4, align 8
  %20 = getelementptr %complex_4, %complex_4* %19, i32 0, i32 0
  %21 = getelementptr %complex_4, %complex_4* %19, i32 0, i32 1
  store float 2.000000e+00, float* %20, align 4
  store float 2.000000e+00, float* %21, align 4
  %22 = load %complex_4, %complex_4* %19, align 4
  store %complex_4 %22, %complex_4* %18, align 4
  %23 = getelementptr %z, %z* %c, i32 0, i32 1
  %24 = getelementptr %y, %y* %23, i32 0, i32 1
  %25 = getelementptr %x, %x* %24, i32 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = fpext float %26 to double
  %28 = getelementptr %z, %z* %c, i32 0, i32 1
  %29 = getelementptr %y, %y* %28, i32 0, i32 1
  %30 = getelementptr %x, %x* %29, i32 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr %z, %z* %c, i32 0, i32 0
  %33 = load %complex_4, %complex_4* %32, align 4
  %34 = alloca %complex_4, align 8
  store %complex_4 %33, %complex_4* %34, align 4
  %35 = getelementptr %complex_4, %complex_4* %34, i32 0, i32 0
  %36 = load float, float* %35, align 4
  %37 = fpext float %36 to double
  %38 = alloca %complex_4, align 8
  store %complex_4 %33, %complex_4* %38, align 4
  %39 = getelementptr %complex_4, %complex_4* %38, i32 0, i32 1
  %40 = load float, float* %39, align 4
  %41 = fpext float %40 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @8, i32 0, i32 0), double %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0), i32 %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0), double %37, double %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  %42 = getelementptr %z, %z* %c, i32 0, i32 1
  %43 = getelementptr %y, %y* %42, i32 0, i32 1
  call void @__module_derived_types_01_m_01_set(%x* %43)
  %44 = getelementptr %z, %z* %c, i32 0, i32 1
  %45 = getelementptr %y, %y* %44, i32 0, i32 1
  %46 = getelementptr %x, %x* %45, i32 0, i32 1
  %47 = load float, float* %46, align 4
  %48 = fpext float %47 to double
  %49 = getelementptr %z, %z* %c, i32 0, i32 1
  %50 = getelementptr %y, %y* %49, i32 0, i32 1
  %51 = getelementptr %x, %x* %50, i32 0, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr %z, %z* %c, i32 0, i32 0
  %54 = load %complex_4, %complex_4* %53, align 4
  %55 = alloca %complex_4, align 8
  store %complex_4 %54, %complex_4* %55, align 4
  %56 = getelementptr %complex_4, %complex_4* %55, i32 0, i32 0
  %57 = load float, float* %56, align 4
  %58 = fpext float %57 to double
  %59 = alloca %complex_4, align 8
  store %complex_4 %54, %complex_4* %59, align 4
  %60 = getelementptr %complex_4, %complex_4* %59, i32 0, i32 1
  %61 = load float, float* %60, align 4
  %62 = fpext float %61 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @11, i32 0, i32 0), double %48, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0), i32 %52, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0), double %58, double %62, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
