; ModuleID = 'LFortran'
source_filename = "LFortran"

%x = type { float, i32 }
%z = type { %complex_4, %y }
%complex_4 = type { float, float }
%y = type { %complex_4, %x }

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @__module_derived_types_01_m_01_set(%x* %a) {
.entry:
  %0 = getelementptr %x, %x* %a, i32 0, i32 1
  store i32 1, i32* %0, align 4
  %1 = getelementptr %x, %x* %a, i32 0, i32 0
  store float 1.500000e+00, float* %1, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %__libasr_created__subroutine_call_set = alloca %x, align 8
  %2 = getelementptr %x, %x* %__libasr_created__subroutine_call_set, i32 0, i32 1
  %3 = getelementptr %x, %x* %__libasr_created__subroutine_call_set, i32 0, i32 0
  %b = alloca %x, align 8
  %4 = getelementptr %x, %x* %b, i32 0, i32 1
  %5 = getelementptr %x, %x* %b, i32 0, i32 0
  %c = alloca %z, align 8
  %6 = getelementptr %z, %z* %c, i32 0, i32 0
  %7 = getelementptr %z, %z* %c, i32 0, i32 1
  %8 = getelementptr %y, %y* %7, i32 0, i32 0
  %9 = getelementptr %y, %y* %7, i32 0, i32 1
  %10 = getelementptr %x, %x* %9, i32 0, i32 1
  %11 = getelementptr %x, %x* %9, i32 0, i32 0
  %12 = getelementptr %x, %x* %b, i32 0, i32 1
  store i32 5, i32* %12, align 4
  %13 = getelementptr %x, %x* %b, i32 0, i32 0
  store float 3.500000e+00, float* %13, align 4
  %14 = getelementptr %x, %x* %b, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr %x, %x* %b, i32 0, i32 0
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 2, i64 %16, i32 6, double %19)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  call void @__module_derived_types_01_m_01_set(%x* %b)
  %21 = getelementptr %x, %x* %b, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr %x, %x* %b, i32 0, i32 0
  %25 = load float, float* %24, align 4
  %26 = fpext float %25 to double
  %27 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 2, i64 %23, i32 6, double %26)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  %28 = getelementptr %z, %z* %c, i32 0, i32 1
  %29 = getelementptr %y, %y* %28, i32 0, i32 1
  %30 = getelementptr %x, %x* %29, i32 0, i32 0
  store float 2.000000e+00, float* %30, align 4
  %31 = getelementptr %z, %z* %c, i32 0, i32 1
  %32 = getelementptr %y, %y* %31, i32 0, i32 1
  %33 = getelementptr %x, %x* %32, i32 0, i32 1
  store i32 2, i32* %33, align 4
  %34 = getelementptr %z, %z* %c, i32 0, i32 0
  %35 = alloca %complex_4, align 8
  %36 = getelementptr %complex_4, %complex_4* %35, i32 0, i32 0
  %37 = getelementptr %complex_4, %complex_4* %35, i32 0, i32 1
  store float 2.000000e+00, float* %36, align 4
  store float 2.000000e+00, float* %37, align 4
  %38 = load %complex_4, %complex_4* %35, align 4
  store %complex_4 %38, %complex_4* %34, align 4
  %39 = getelementptr %z, %z* %c, i32 0, i32 1
  %40 = getelementptr %y, %y* %39, i32 0, i32 1
  %41 = getelementptr %x, %x* %40, i32 0, i32 0
  %42 = load float, float* %41, align 4
  %43 = fpext float %42 to double
  %44 = getelementptr %z, %z* %c, i32 0, i32 1
  %45 = getelementptr %y, %y* %44, i32 0, i32 1
  %46 = getelementptr %x, %x* %45, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr %z, %z* %c, i32 0, i32 0
  %50 = load %complex_4, %complex_4* %49, align 4
  %51 = alloca %complex_4, align 8
  store %complex_4 %50, %complex_4* %51, align 4
  %52 = getelementptr %complex_4, %complex_4* %51, i32 0, i32 0
  %53 = load float, float* %52, align 4
  %54 = fpext float %53 to double
  %55 = alloca %complex_4, align 8
  store %complex_4 %50, %complex_4* %55, align 4
  %56 = getelementptr %complex_4, %complex_4* %55, i32 0, i32 1
  %57 = load float, float* %56, align 4
  %58 = fpext float %57 to double
  %59 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 8, i8* null, i32 6, double %43, i32 2, i64 %48, i32 6, double %54, i32 6, double %58)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %60 = getelementptr %z, %z* %c, i32 0, i32 1
  %61 = getelementptr %y, %y* %60, i32 0, i32 1
  %62 = getelementptr %x, %x* %61, i32 0, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr %x, %x* %__libasr_created__subroutine_call_set, i32 0, i32 1
  store i32 %63, i32* %64, align 4
  %65 = getelementptr %x, %x* %61, i32 0, i32 0
  %66 = load float, float* %65, align 4
  %67 = getelementptr %x, %x* %__libasr_created__subroutine_call_set, i32 0, i32 0
  store float %66, float* %67, align 4
  call void @__module_derived_types_01_m_01_set(%x* %__libasr_created__subroutine_call_set)
  %68 = getelementptr %z, %z* %c, i32 0, i32 1
  %69 = getelementptr %y, %y* %68, i32 0, i32 1
  %70 = getelementptr %x, %x* %69, i32 0, i32 0
  %71 = load float, float* %70, align 4
  %72 = fpext float %71 to double
  %73 = getelementptr %z, %z* %c, i32 0, i32 1
  %74 = getelementptr %y, %y* %73, i32 0, i32 1
  %75 = getelementptr %x, %x* %74, i32 0, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr %z, %z* %c, i32 0, i32 0
  %79 = load %complex_4, %complex_4* %78, align 4
  %80 = alloca %complex_4, align 8
  store %complex_4 %79, %complex_4* %80, align 4
  %81 = getelementptr %complex_4, %complex_4* %80, i32 0, i32 0
  %82 = load float, float* %81, align 4
  %83 = fpext float %82 to double
  %84 = alloca %complex_4, align 8
  store %complex_4 %79, %complex_4* %84, align 4
  %85 = getelementptr %complex_4, %complex_4* %84, i32 0, i32 1
  %86 = load float, float* %85, align 4
  %87 = fpext float %86 to double
  %88 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 8, i8* null, i32 6, double %72, i32 2, i64 %77, i32 6, double %83, i32 6, double %87)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %88, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)
