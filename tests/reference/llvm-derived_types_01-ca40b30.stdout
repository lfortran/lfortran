; ModuleID = 'LFortran'
source_filename = "LFortran"

%x = type { float, i32 }
%z = type { %complex_4, %y }
%complex_4 = type { float, float }
%y = type { %complex_4, %x }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [13 x i8] c"%d%s%13.8e%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [13 x i8] c"%d%s%13.8e%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [22 x i8] c"%13.8e%s%d%s(%f,%f)%s\00", align 1
@9 = private unnamed_addr constant [2 x i8] c" \00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [22 x i8] c"%13.8e%s%d%s(%f,%f)%s\00", align 1

define void @__module_derived_types_01_m_01_set(%x* %a) {
.entry:
  %0 = getelementptr %x, %x* %a, i32 0, i32 1
  store i32 1, i32* %0, align 4
  %1 = getelementptr %x, %x* %a, i32 0, i32 0
  store float 1.500000e+00, float* %1, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %b = alloca %x, align 8
  %2 = getelementptr %x, %x* %b, i32 0, i32 1
  %3 = getelementptr %x, %x* %b, i32 0, i32 0
  %c = alloca %z, align 8
  %4 = getelementptr %z, %z* %c, i32 0, i32 0
  %5 = getelementptr %z, %z* %c, i32 0, i32 1
  %6 = getelementptr %y, %y* %5, i32 0, i32 0
  %7 = getelementptr %y, %y* %5, i32 0, i32 1
  %8 = getelementptr %x, %x* %7, i32 0, i32 1
  %9 = getelementptr %x, %x* %7, i32 0, i32 0
  %10 = getelementptr %x, %x* %b, i32 0, i32 1
  store i32 5, i32* %10, align 4
  %11 = getelementptr %x, %x* %b, i32 0, i32 0
  store float 3.500000e+00, float* %11, align 4
  %12 = getelementptr %x, %x* %b, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr %x, %x* %b, i32 0, i32 0
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i32 0, i32 0), i32 %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), double %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @__module_derived_types_01_m_01_set(%x* %b)
  %17 = getelementptr %x, %x* %b, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr %x, %x* %b, i32 0, i32 0
  %20 = load float, float* %19, align 4
  %21 = fpext float %20 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i32 0, i32 0), i32 %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), double %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %22 = getelementptr %z, %z* %c, i32 0, i32 1
  %23 = getelementptr %y, %y* %22, i32 0, i32 1
  %24 = getelementptr %x, %x* %23, i32 0, i32 0
  store float 2.000000e+00, float* %24, align 4
  %25 = getelementptr %z, %z* %c, i32 0, i32 1
  %26 = getelementptr %y, %y* %25, i32 0, i32 1
  %27 = getelementptr %x, %x* %26, i32 0, i32 1
  store i32 2, i32* %27, align 4
  %28 = getelementptr %z, %z* %c, i32 0, i32 0
  %29 = alloca %complex_4, align 8
  %30 = getelementptr %complex_4, %complex_4* %29, i32 0, i32 0
  %31 = getelementptr %complex_4, %complex_4* %29, i32 0, i32 1
  store float 2.000000e+00, float* %30, align 4
  store float 2.000000e+00, float* %31, align 4
  %32 = load %complex_4, %complex_4* %29, align 4
  store %complex_4 %32, %complex_4* %28, align 4
  %33 = getelementptr %z, %z* %c, i32 0, i32 1
  %34 = getelementptr %y, %y* %33, i32 0, i32 1
  %35 = getelementptr %x, %x* %34, i32 0, i32 0
  %36 = load float, float* %35, align 4
  %37 = fpext float %36 to double
  %38 = getelementptr %z, %z* %c, i32 0, i32 1
  %39 = getelementptr %y, %y* %38, i32 0, i32 1
  %40 = getelementptr %x, %x* %39, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr %z, %z* %c, i32 0, i32 0
  %43 = load %complex_4, %complex_4* %42, align 4
  %44 = alloca %complex_4, align 8
  store %complex_4 %43, %complex_4* %44, align 4
  %45 = getelementptr %complex_4, %complex_4* %44, i32 0, i32 0
  %46 = load float, float* %45, align 4
  %47 = fpext float %46 to double
  %48 = alloca %complex_4, align 8
  store %complex_4 %43, %complex_4* %48, align 4
  %49 = getelementptr %complex_4, %complex_4* %48, i32 0, i32 1
  %50 = load float, float* %49, align 4
  %51 = fpext float %50 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @8, i32 0, i32 0), double %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0), i32 %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0), double %47, double %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  %52 = getelementptr %z, %z* %c, i32 0, i32 1
  %53 = getelementptr %y, %y* %52, i32 0, i32 1
  call void @__module_derived_types_01_m_01_set(%x* %53)
  %54 = getelementptr %z, %z* %c, i32 0, i32 1
  %55 = getelementptr %y, %y* %54, i32 0, i32 1
  %56 = getelementptr %x, %x* %55, i32 0, i32 0
  %57 = load float, float* %56, align 4
  %58 = fpext float %57 to double
  %59 = getelementptr %z, %z* %c, i32 0, i32 1
  %60 = getelementptr %y, %y* %59, i32 0, i32 1
  %61 = getelementptr %x, %x* %60, i32 0, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr %z, %z* %c, i32 0, i32 0
  %64 = load %complex_4, %complex_4* %63, align 4
  %65 = alloca %complex_4, align 8
  store %complex_4 %64, %complex_4* %65, align 4
  %66 = getelementptr %complex_4, %complex_4* %65, i32 0, i32 0
  %67 = load float, float* %66, align 4
  %68 = fpext float %67 to double
  %69 = alloca %complex_4, align 8
  store %complex_4 %64, %complex_4* %69, align 4
  %70 = getelementptr %complex_4, %complex_4* %69, i32 0, i32 1
  %71 = load float, float* %70, align 4
  %72 = fpext float %71 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @11, i32 0, i32 0), double %58, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0), i32 %62, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0), double %68, double %72, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)
