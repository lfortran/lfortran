; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [10 x i8] c"(%f,%f)%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [10 x i8] c"(%f,%f)%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [10 x i8] c"(%f,%f)%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %x = alloca %complex_4, align 8
  %2 = alloca %complex_4, align 8
  %3 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 0
  %4 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 1
  store float 3.000000e+00, float* %3, align 4
  store float 4.000000e+00, float* %4, align 4
  %5 = load %complex_4, %complex_4* %2, align 4
  store %complex_4 %5, %complex_4* %x, align 4
  %6 = load %complex_4, %complex_4* %x, align 4
  %7 = alloca %complex_4, align 8
  %8 = getelementptr %complex_4, %complex_4* %7, i32 0, i32 0
  %9 = getelementptr %complex_4, %complex_4* %7, i32 0, i32 1
  store float 4.000000e+00, float* %8, align 4
  store float 0.000000e+00, float* %9, align 4
  %10 = load %complex_4, %complex_4* %7, align 4
  %11 = alloca %complex_4, align 8
  store %complex_4 %6, %complex_4* %11, align 4
  %12 = alloca %complex_4, align 8
  store %complex_4 %10, %complex_4* %12, align 4
  %13 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_div_32(%complex_4* %11, %complex_4* %12, %complex_4* %13)
  %14 = load %complex_4, %complex_4* %13, align 4
  store %complex_4 %14, %complex_4* %x, align 4
  %15 = load %complex_4, %complex_4* %x, align 4
  %16 = alloca %complex_4, align 8
  store %complex_4 %15, %complex_4* %16, align 4
  %17 = getelementptr %complex_4, %complex_4* %16, i32 0, i32 0
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = alloca %complex_4, align 8
  store %complex_4 %15, %complex_4* %20, align 4
  %21 = getelementptr %complex_4, %complex_4* %20, i32 0, i32 1
  %22 = load float, float* %21, align 4
  %23 = fpext float %22 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i32 0, i32 0), double %19, double %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %24 = alloca %complex_4, align 8
  %25 = getelementptr %complex_4, %complex_4* %24, i32 0, i32 0
  %26 = getelementptr %complex_4, %complex_4* %24, i32 0, i32 1
  store float 2.000000e+00, float* %25, align 4
  store float 0.000000e+00, float* %26, align 4
  %27 = load %complex_4, %complex_4* %24, align 4
  %28 = load %complex_4, %complex_4* %x, align 4
  %29 = alloca %complex_4, align 8
  store %complex_4 %27, %complex_4* %29, align 4
  %30 = alloca %complex_4, align 8
  store %complex_4 %28, %complex_4* %30, align 4
  %31 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_div_32(%complex_4* %29, %complex_4* %30, %complex_4* %31)
  %32 = load %complex_4, %complex_4* %31, align 4
  store %complex_4 %32, %complex_4* %x, align 4
  %33 = load %complex_4, %complex_4* %x, align 4
  %34 = alloca %complex_4, align 8
  store %complex_4 %33, %complex_4* %34, align 4
  %35 = getelementptr %complex_4, %complex_4* %34, i32 0, i32 0
  %36 = load float, float* %35, align 4
  %37 = fpext float %36 to double
  %38 = alloca %complex_4, align 8
  store %complex_4 %33, %complex_4* %38, align 4
  %39 = getelementptr %complex_4, %complex_4* %38, i32 0, i32 1
  %40 = load float, float* %39, align 4
  %41 = fpext float %40 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i32 0, i32 0), double %37, double %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %42 = alloca %complex_4, align 8
  %43 = getelementptr %complex_4, %complex_4* %42, i32 0, i32 0
  %44 = getelementptr %complex_4, %complex_4* %42, i32 0, i32 1
  store float 1.000000e+00, float* %43, align 4
  store float 0.000000e+00, float* %44, align 4
  %45 = load %complex_4, %complex_4* %42, align 4
  %46 = load %complex_4, %complex_4* %x, align 4
  %47 = alloca %complex_4, align 8
  %48 = getelementptr %complex_4, %complex_4* %47, i32 0, i32 0
  %49 = getelementptr %complex_4, %complex_4* %47, i32 0, i32 1
  store float 0.000000e+00, float* %48, align 4
  store float 3.000000e+00, float* %49, align 4
  %50 = load %complex_4, %complex_4* %47, align 4
  %51 = alloca %complex_4, align 8
  store %complex_4 %46, %complex_4* %51, align 4
  %52 = alloca %complex_4, align 8
  store %complex_4 %50, %complex_4* %52, align 4
  %53 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_add_32(%complex_4* %51, %complex_4* %52, %complex_4* %53)
  %54 = load %complex_4, %complex_4* %53, align 4
  %55 = alloca %complex_4, align 8
  store %complex_4 %45, %complex_4* %55, align 4
  %56 = alloca %complex_4, align 8
  store %complex_4 %54, %complex_4* %56, align 4
  %57 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_div_32(%complex_4* %55, %complex_4* %56, %complex_4* %57)
  %58 = load %complex_4, %complex_4* %57, align 4
  store %complex_4 %58, %complex_4* %x, align 4
  %59 = load %complex_4, %complex_4* %x, align 4
  %60 = alloca %complex_4, align 8
  store %complex_4 %59, %complex_4* %60, align 4
  %61 = getelementptr %complex_4, %complex_4* %60, i32 0, i32 0
  %62 = load float, float* %61, align 4
  %63 = fpext float %62 to double
  %64 = alloca %complex_4, align 8
  store %complex_4 %59, %complex_4* %64, align 4
  %65 = getelementptr %complex_4, %complex_4* %64, i32 0, i32 1
  %66 = load float, float* %65, align 4
  %67 = fpext float %66 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @8, i32 0, i32 0), double %63, double %67, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_complex_div_32(%complex_4*, %complex_4*, %complex_4*, ...)

declare void @_lfortran_printf(i8*, ...)

declare void @_lfortran_complex_add_32(%complex_4*, %complex_4*, %complex_4*, ...)
