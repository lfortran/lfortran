; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [10 x i8] c"(%f,%f)%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [10 x i8] c"(%f,%f)%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [10 x i8] c"(%f,%f)%s\00", align 1

define i32 @main() {
.entry:
  %x = alloca %complex_4, align 8
  %0 = alloca %complex_4, align 8
  %1 = getelementptr %complex_4, %complex_4* %0, i32 0, i32 0
  %2 = getelementptr %complex_4, %complex_4* %0, i32 0, i32 1
  store float 3.000000e+00, float* %1, align 4
  store float 4.000000e+00, float* %2, align 4
  %3 = load %complex_4, %complex_4* %0, align 4
  store %complex_4 %3, %complex_4* %x, align 4
  %4 = load %complex_4, %complex_4* %x, align 4
  %5 = alloca %complex_4, align 8
  %6 = getelementptr %complex_4, %complex_4* %5, i32 0, i32 0
  %7 = getelementptr %complex_4, %complex_4* %5, i32 0, i32 1
  store float 4.000000e+00, float* %6, align 4
  store float 0.000000e+00, float* %7, align 4
  %8 = load %complex_4, %complex_4* %5, align 4
  %9 = alloca %complex_4, align 8
  store %complex_4 %4, %complex_4* %9, align 4
  %10 = alloca %complex_4, align 8
  store %complex_4 %8, %complex_4* %10, align 4
  %11 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_div_32(%complex_4* %9, %complex_4* %10, %complex_4* %11)
  %12 = load %complex_4, %complex_4* %11, align 4
  store %complex_4 %12, %complex_4* %x, align 4
  %13 = load %complex_4, %complex_4* %x, align 4
  %14 = alloca %complex_4, align 8
  store %complex_4 %13, %complex_4* %14, align 4
  %15 = getelementptr %complex_4, %complex_4* %14, i32 0, i32 0
  %16 = load float, float* %15, align 4
  %17 = fpext float %16 to double
  %18 = alloca %complex_4, align 8
  store %complex_4 %13, %complex_4* %18, align 4
  %19 = getelementptr %complex_4, %complex_4* %18, i32 0, i32 1
  %20 = load float, float* %19, align 4
  %21 = fpext float %20 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i32 0, i32 0), double %17, double %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %22 = alloca %complex_4, align 8
  %23 = getelementptr %complex_4, %complex_4* %22, i32 0, i32 0
  %24 = getelementptr %complex_4, %complex_4* %22, i32 0, i32 1
  store float 2.000000e+00, float* %23, align 4
  store float 0.000000e+00, float* %24, align 4
  %25 = load %complex_4, %complex_4* %22, align 4
  %26 = load %complex_4, %complex_4* %x, align 4
  %27 = alloca %complex_4, align 8
  store %complex_4 %25, %complex_4* %27, align 4
  %28 = alloca %complex_4, align 8
  store %complex_4 %26, %complex_4* %28, align 4
  %29 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_div_32(%complex_4* %27, %complex_4* %28, %complex_4* %29)
  %30 = load %complex_4, %complex_4* %29, align 4
  store %complex_4 %30, %complex_4* %x, align 4
  %31 = load %complex_4, %complex_4* %x, align 4
  %32 = alloca %complex_4, align 8
  store %complex_4 %31, %complex_4* %32, align 4
  %33 = getelementptr %complex_4, %complex_4* %32, i32 0, i32 0
  %34 = load float, float* %33, align 4
  %35 = fpext float %34 to double
  %36 = alloca %complex_4, align 8
  store %complex_4 %31, %complex_4* %36, align 4
  %37 = getelementptr %complex_4, %complex_4* %36, i32 0, i32 1
  %38 = load float, float* %37, align 4
  %39 = fpext float %38 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i32 0, i32 0), double %35, double %39, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %40 = alloca %complex_4, align 8
  %41 = getelementptr %complex_4, %complex_4* %40, i32 0, i32 0
  %42 = getelementptr %complex_4, %complex_4* %40, i32 0, i32 1
  store float 1.000000e+00, float* %41, align 4
  store float 0.000000e+00, float* %42, align 4
  %43 = load %complex_4, %complex_4* %40, align 4
  %44 = load %complex_4, %complex_4* %x, align 4
  %45 = alloca %complex_4, align 8
  %46 = getelementptr %complex_4, %complex_4* %45, i32 0, i32 0
  %47 = getelementptr %complex_4, %complex_4* %45, i32 0, i32 1
  store float 0.000000e+00, float* %46, align 4
  store float 3.000000e+00, float* %47, align 4
  %48 = load %complex_4, %complex_4* %45, align 4
  %49 = alloca %complex_4, align 8
  store %complex_4 %44, %complex_4* %49, align 4
  %50 = alloca %complex_4, align 8
  store %complex_4 %48, %complex_4* %50, align 4
  %51 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_add_32(%complex_4* %49, %complex_4* %50, %complex_4* %51)
  %52 = load %complex_4, %complex_4* %51, align 4
  %53 = alloca %complex_4, align 8
  store %complex_4 %43, %complex_4* %53, align 4
  %54 = alloca %complex_4, align 8
  store %complex_4 %52, %complex_4* %54, align 4
  %55 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_div_32(%complex_4* %53, %complex_4* %54, %complex_4* %55)
  %56 = load %complex_4, %complex_4* %55, align 4
  store %complex_4 %56, %complex_4* %x, align 4
  %57 = load %complex_4, %complex_4* %x, align 4
  %58 = alloca %complex_4, align 8
  store %complex_4 %57, %complex_4* %58, align 4
  %59 = getelementptr %complex_4, %complex_4* %58, i32 0, i32 0
  %60 = load float, float* %59, align 4
  %61 = fpext float %60 to double
  %62 = alloca %complex_4, align 8
  store %complex_4 %57, %complex_4* %62, align 4
  %63 = getelementptr %complex_4, %complex_4* %62, i32 0, i32 1
  %64 = load float, float* %63, align 4
  %65 = fpext float %64 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @8, i32 0, i32 0), double %61, double %65, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  ret i32 0
}

declare void @_lfortran_complex_div_32(%complex_4*, %complex_4*, %complex_4*, ...)

declare void @_lfortran_printf(i8*, ...)

declare void @_lfortran_complex_add_32(%complex_4*, %complex_4*, %complex_4*, ...)
