; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type <{ float, float }>
%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [8 x i8] c"{R4,R4}\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [8 x i8] c"{R4,R4}\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.2 = private unnamed_addr constant [8 x i8] c"{R4,R4}\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %x = alloca %complex_4, align 8
  %2 = alloca %complex_4, align 8
  %3 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 0
  %4 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 1
  store float 3.000000e+00, float* %3, align 4
  store float 4.000000e+00, float* %4, align 4
  %5 = load %complex_4, %complex_4* %2, align 1
  store %complex_4 %5, %complex_4* %x, align 1
  %6 = load %complex_4, %complex_4* %x, align 1
  %7 = alloca %complex_4, align 8
  %8 = getelementptr %complex_4, %complex_4* %7, i32 0, i32 0
  %9 = getelementptr %complex_4, %complex_4* %7, i32 0, i32 1
  store float 4.000000e+00, float* %8, align 4
  store float 0.000000e+00, float* %9, align 4
  %10 = load %complex_4, %complex_4* %7, align 1
  %11 = alloca %complex_4, align 8
  store %complex_4 %6, %complex_4* %11, align 1
  %12 = alloca %complex_4, align 8
  store %complex_4 %10, %complex_4* %12, align 1
  %13 = alloca %complex_4, align 8
  call void @_lfortran_complex_div_32(%complex_4* %11, %complex_4* %12, %complex_4* %13)
  %14 = load %complex_4, %complex_4* %13, align 1
  store %complex_4 %14, %complex_4* %x, align 1
  %15 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, %complex_4* %x)
  %16 = call i64 @_lfortran_str_len(i8* %15)
  %17 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %17 to %string_descriptor*
  %18 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %15, i8** %18, align 8
  %19 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %16, i64* %19, align 4
  %20 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %23 = load i64, i64* %22, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %21, i64 %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i64 1)
  %24 = alloca %complex_4, align 8
  %25 = getelementptr %complex_4, %complex_4* %24, i32 0, i32 0
  %26 = getelementptr %complex_4, %complex_4* %24, i32 0, i32 1
  store float 2.000000e+00, float* %25, align 4
  store float 0.000000e+00, float* %26, align 4
  %27 = load %complex_4, %complex_4* %24, align 1
  %28 = load %complex_4, %complex_4* %x, align 1
  %29 = alloca %complex_4, align 8
  store %complex_4 %27, %complex_4* %29, align 1
  %30 = alloca %complex_4, align 8
  store %complex_4 %28, %complex_4* %30, align 1
  %31 = alloca %complex_4, align 8
  call void @_lfortran_complex_div_32(%complex_4* %29, %complex_4* %30, %complex_4* %31)
  %32 = load %complex_4, %complex_4* %31, align 1
  store %complex_4 %32, %complex_4* %x, align 1
  %33 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @serialization_info.1, i32 0, i32 0), i32 0, i32 0, %complex_4* %x)
  %34 = call i64 @_lfortran_str_len(i8* %33)
  %35 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc1 = bitcast i8* %35 to %string_descriptor*
  %36 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  store i8* %33, i8** %36, align 8
  %37 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  store i64 %34, i64* %37, align 4
  %38 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  %41 = load i64, i64* %40, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %39, i64 %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i64 1)
  %42 = alloca %complex_4, align 8
  %43 = getelementptr %complex_4, %complex_4* %42, i32 0, i32 0
  %44 = getelementptr %complex_4, %complex_4* %42, i32 0, i32 1
  store float 1.000000e+00, float* %43, align 4
  store float 0.000000e+00, float* %44, align 4
  %45 = load %complex_4, %complex_4* %42, align 1
  %46 = load %complex_4, %complex_4* %x, align 1
  %47 = alloca %complex_4, align 8
  %48 = getelementptr %complex_4, %complex_4* %47, i32 0, i32 0
  %49 = getelementptr %complex_4, %complex_4* %47, i32 0, i32 1
  store float 0.000000e+00, float* %48, align 4
  store float 3.000000e+00, float* %49, align 4
  %50 = load %complex_4, %complex_4* %47, align 1
  %51 = alloca %complex_4, align 8
  store %complex_4 %46, %complex_4* %51, align 1
  %52 = alloca %complex_4, align 8
  store %complex_4 %50, %complex_4* %52, align 1
  %53 = alloca %complex_4, align 8
  call void @_lfortran_complex_add_32(%complex_4* %51, %complex_4* %52, %complex_4* %53)
  %54 = load %complex_4, %complex_4* %53, align 1
  %55 = alloca %complex_4, align 8
  store %complex_4 %45, %complex_4* %55, align 1
  %56 = alloca %complex_4, align 8
  store %complex_4 %54, %complex_4* %56, align 1
  %57 = alloca %complex_4, align 8
  call void @_lfortran_complex_div_32(%complex_4* %55, %complex_4* %56, %complex_4* %57)
  %58 = load %complex_4, %complex_4* %57, align 1
  store %complex_4 %58, %complex_4* %x, align 1
  %59 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @serialization_info.2, i32 0, i32 0), i32 0, i32 0, %complex_4* %x)
  %60 = call i64 @_lfortran_str_len(i8* %59)
  %61 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc2 = bitcast i8* %61 to %string_descriptor*
  %62 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  store i8* %59, i8** %62, align 8
  %63 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  store i64 %60, i64* %63, align 4
  %64 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  %67 = load i64, i64* %66, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %65, i64 %67, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i64 1)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_complex_div_32(%complex_4*, %complex_4*, %complex_4*)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i64, i8*, i64)

declare void @_lfortran_complex_add_32(%complex_4*, %complex_4*, %complex_4*)

declare void @_lpython_free_argv()
