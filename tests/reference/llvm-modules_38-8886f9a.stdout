; ModuleID = 'LFortran'
source_filename = "LFortran"

%0 = type { [25 x i8], i32 }
%compiler_t_polymorphic = type { i64, %compiler_t* }
%compiler_t = type <{ i32, %string_descriptor, %string_descriptor, %string_descriptor, i1, i1 }>
%string_descriptor = type { i8*, i64, i64 }
%array = type { %string_t*, i32, %dimension_descriptor*, i1, i32 }
%string_t = type <{ %string_descriptor }>
%dimension_descriptor = type { i32, i32, i32 }
%__vtab_compiler_t = type { i64 }

@lcompilers__nameless_enum = global [3 x %0] [%0 { [11 x i8] c"id_unknown\00", i32 0 }, %0 { [25 x i8] c"id_intel_classic_windows\00", i32 1 }, %0 { [22 x i8] c"id_intel_llvm_windows\00", i32 2 }]
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [2 x i8] c"S\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @__module_fpm_compiler_enumerate_libraries(%compiler_t_polymorphic* %self, i8** %prefix, %array* %libs, %string_descriptor* %r) {
.entry:
  %0 = alloca %__vtab_compiler_t, align 8
  %1 = getelementptr %__vtab_compiler_t, %__vtab_compiler_t* %0, i32 0, i32 0
  store i64 0, i64* %1, align 4
  %2 = getelementptr %compiler_t_polymorphic, %compiler_t_polymorphic* %self, i32 0, i32 1
  %3 = load %compiler_t*, %compiler_t** %2, align 8
  %4 = getelementptr %compiler_t, %compiler_t* %3, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 1
  %7 = getelementptr %compiler_t_polymorphic, %compiler_t_polymorphic* %self, i32 0, i32 1
  %8 = load %compiler_t*, %compiler_t** %7, align 8
  %9 = getelementptr %compiler_t, %compiler_t* %8, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 2
  %12 = icmp eq i1 %6, false
  %13 = select i1 %12, i1 %11, i1 %6
  br i1 %13, label %then, label %else

then:                                             ; preds = %.entry
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %array_descriptor = alloca %array, align 8
  %i = alloca i32, align 4
  %array_size = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = alloca %__vtab_compiler_t, align 8
  %3 = getelementptr %__vtab_compiler_t, %__vtab_compiler_t* %2, i32 0, i32 0
  store i64 0, i64* %3, align 4
  %__libasr__created__var__0__func_call_res = alloca %string_descriptor, align 8
  %4 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 0
  store i8* null, i8** %4, align 8
  %5 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 1
  store i64 0, i64* %5, align 4
  %6 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 2
  store i64 0, i64* %6, align 4
  %compiler_arg = alloca %compiler_t, align 8
  %7 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 2
  %8 = getelementptr %string_descriptor, %string_descriptor* %7, i32 0, i32 0
  store i8* null, i8** %8, align 8
  %9 = getelementptr %string_descriptor, %string_descriptor* %7, i32 0, i32 1
  store i64 0, i64* %9, align 4
  %10 = getelementptr %string_descriptor, %string_descriptor* %7, i32 0, i32 2
  store i64 0, i64* %10, align 4
  %11 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 3
  %12 = getelementptr %string_descriptor, %string_descriptor* %11, i32 0, i32 0
  store i8* null, i8** %12, align 8
  %13 = getelementptr %string_descriptor, %string_descriptor* %11, i32 0, i32 1
  store i64 0, i64* %13, align 4
  %14 = getelementptr %string_descriptor, %string_descriptor* %11, i32 0, i32 2
  store i64 0, i64* %14, align 4
  %15 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 4
  store i1 true, i1* %15, align 1
  %16 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 1
  %17 = getelementptr %string_descriptor, %string_descriptor* %16, i32 0, i32 0
  store i8* null, i8** %17, align 8
  %18 = getelementptr %string_descriptor, %string_descriptor* %16, i32 0, i32 1
  store i64 0, i64* %18, align 4
  %19 = getelementptr %string_descriptor, %string_descriptor* %16, i32 0, i32 2
  store i64 0, i64* %19, align 4
  %20 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 0
  store i32 0, i32* %20, align 4
  %21 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 5
  store i1 true, i1* %21, align 1
  %libs_arg = alloca [4 x %string_t], align 8
  store i32 4, i32* %array_size, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %array_size, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %25 = load i32, i32* %i, align 4
  %26 = getelementptr [4 x %string_t], [4 x %string_t]* %libs_arg, i32 0, i32 %25
  %27 = getelementptr %string_t, %string_t* %26, i32 0, i32 0
  %28 = getelementptr %string_descriptor, %string_descriptor* %27, i32 0, i32 0
  store i8* null, i8** %28, align 8
  %29 = getelementptr %string_descriptor, %string_descriptor* %27, i32 0, i32 1
  store i64 0, i64* %29, align 4
  %30 = getelementptr %string_descriptor, %string_descriptor* %27, i32 0, i32 2
  store i64 0, i64* %30, align 4
  %31 = load i32, i32* %i, align 4
  %32 = add i32 %31, 1
  store i32 %32, i32* %i, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %prefix_arg = alloca i8*, align 8
  %33 = call i8* @_lfortran_malloc(i32 4)
  call void @_lfortran_string_init(i64 4, i8* %33)
  store i8* %33, i8** %prefix_arg, align 8
  %34 = load i8*, i8** %prefix_arg, align 8
  %35 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 0
  %36 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 1
  %37 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 2
  %38 = load i8*, i8** %35, align 8
  call void @_lfortran_free(i8* %38)
  store i8* null, i8** %35, align 8
  store i64 0, i64* %36, align 4
  store i64 0, i64* %37, align 4
  %39 = alloca %compiler_t_polymorphic, align 8
  %40 = getelementptr %compiler_t_polymorphic, %compiler_t_polymorphic* %39, i32 0, i32 0
  store i64 0, i64* %40, align 4
  %41 = getelementptr %compiler_t_polymorphic, %compiler_t_polymorphic* %39, i32 0, i32 1
  store %compiler_t* %compiler_arg, %compiler_t** %41, align 8
  %42 = getelementptr [4 x %string_t], [4 x %string_t]* %libs_arg, i32 0, i32 0
  %43 = getelementptr %array, %array* %array_descriptor, i32 0, i32 0
  store %string_t* %42, %string_t** %43, align 8
  %44 = getelementptr %array, %array* %array_descriptor, i32 0, i32 1
  store i32 0, i32* %44, align 4
  %45 = getelementptr %array, %array* %array_descriptor, i32 0, i32 2
  %46 = alloca %dimension_descriptor, align 8
  store %dimension_descriptor* %46, %dimension_descriptor** %45, align 8
  %47 = getelementptr %array, %array* %array_descriptor, i32 0, i32 4
  store i32 1, i32* %47, align 4
  %48 = load %dimension_descriptor*, %dimension_descriptor** %45, align 8
  %49 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %48, i32 0
  %50 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 0
  %51 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 1
  %52 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 2
  store i32 1, i32* %50, align 4
  store i32 1, i32* %51, align 4
  store i32 4, i32* %52, align 4
  call void @__module_fpm_compiler_enumerate_libraries(%compiler_t_polymorphic* %39, i8** %prefix_arg, %array* %array_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res)
  %53 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = alloca i8*, align 8
  store i8* %54, i8** %55, align 8
  %56 = call i8* (i8*, i8*, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @serialization_info, i32 0, i32 0), i32 0, i8** %55)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %56, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  %57 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 0
  %58 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 1
  %59 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 2
  %60 = load i8*, i8** %57, align 8
  call void @_lfortran_free(i8* %60)
  store i8* null, i8** %57, align 8
  store i64 0, i64* %58, align 4
  store i64 0, i64* %59, align 4
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %loop.end
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i32)

declare void @_lfortran_string_init(i64, i8*)

declare void @_lfortran_free(i8*)

declare i8* @_lcompilers_string_format_fortran(i8*, i8*, i32, ...)

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_free_argv()
