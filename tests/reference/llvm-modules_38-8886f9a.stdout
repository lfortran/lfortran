; ModuleID = 'LFortran'
source_filename = "LFortran"

%0 = type { [25 x i8], i32 }
%string_descriptor = type { i8*, i64, i64 }
%compiler_t_polymorphic = type { i64, %compiler_t* }
%compiler_t = type { i32, %string_descriptor, %string_descriptor, %string_descriptor, i1, i1 }
%array = type { %string_t*, i32, %dimension_descriptor*, i1, i32 }
%string_t = type { %string_descriptor }
%dimension_descriptor = type { i32, i32, i32 }
%__vtab_compiler_t = type { i64 }

@lcompilers__nameless_enum = global [3 x %0] [%0 { [11 x i8] c"id_unknown\00", i32 0 }, %0 { [25 x i8] c"id_intel_classic_windows\00", i32 1 }, %0 { [22 x i8] c"id_intel_llvm_windows\00", i32 2 }]
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define %string_descriptor @__module_fpm_compiler_enumerate_libraries(%compiler_t_polymorphic* %self, i8** %prefix, %array* %libs) {
.entry:
  %0 = alloca %__vtab_compiler_t, align 8
  %1 = getelementptr %__vtab_compiler_t, %__vtab_compiler_t* %0, i32 0, i32 0
  store i64 0, i64* %1, align 4
  %r = alloca %string_descriptor, align 8
  %2 = getelementptr %string_descriptor, %string_descriptor* %r, i32 0, i32 0
  store i8* null, i8** %2, align 8
  %3 = getelementptr %string_descriptor, %string_descriptor* %r, i32 0, i32 1
  store i64 0, i64* %3, align 4
  %4 = getelementptr %string_descriptor, %string_descriptor* %r, i32 0, i32 2
  store i64 0, i64* %4, align 4
  %5 = getelementptr %compiler_t_polymorphic, %compiler_t_polymorphic* %self, i32 0, i32 1
  %6 = load %compiler_t*, %compiler_t** %5, align 8
  %7 = getelementptr %compiler_t, %compiler_t* %6, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 1
  %10 = getelementptr %compiler_t_polymorphic, %compiler_t_polymorphic* %self, i32 0, i32 1
  %11 = load %compiler_t*, %compiler_t** %10, align 8
  %12 = getelementptr %compiler_t, %compiler_t* %11, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 2
  %15 = icmp eq i1 %9, false
  %16 = select i1 %15, i1 %14, i1 %9
  br i1 %16, label %then, label %else

then:                                             ; preds = %.entry
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %17 = load %string_descriptor, %string_descriptor* %r, align 8
  ret %string_descriptor %17
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %array_descriptor = alloca %array, align 8
  %i = alloca i32, align 4
  %array_size = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %compiler_arg = alloca %compiler_t, align 8
  %2 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 2
  %3 = getelementptr %string_descriptor, %string_descriptor* %2, i32 0, i32 0
  store i8* null, i8** %3, align 8
  %4 = getelementptr %string_descriptor, %string_descriptor* %2, i32 0, i32 1
  store i64 0, i64* %4, align 4
  %5 = getelementptr %string_descriptor, %string_descriptor* %2, i32 0, i32 2
  store i64 0, i64* %5, align 4
  %6 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 3
  %7 = getelementptr %string_descriptor, %string_descriptor* %6, i32 0, i32 0
  store i8* null, i8** %7, align 8
  %8 = getelementptr %string_descriptor, %string_descriptor* %6, i32 0, i32 1
  store i64 0, i64* %8, align 4
  %9 = getelementptr %string_descriptor, %string_descriptor* %6, i32 0, i32 2
  store i64 0, i64* %9, align 4
  %10 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 4
  store i1 true, i1* %10, align 1
  %11 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 1
  %12 = getelementptr %string_descriptor, %string_descriptor* %11, i32 0, i32 0
  store i8* null, i8** %12, align 8
  %13 = getelementptr %string_descriptor, %string_descriptor* %11, i32 0, i32 1
  store i64 0, i64* %13, align 4
  %14 = getelementptr %string_descriptor, %string_descriptor* %11, i32 0, i32 2
  store i64 0, i64* %14, align 4
  %15 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 0
  store i32 0, i32* %15, align 4
  %16 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 5
  store i1 true, i1* %16, align 1
  %libs_arg = alloca [4 x %string_t], align 8
  store i32 4, i32* %array_size, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %array_size, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %20 = load i32, i32* %i, align 4
  %21 = getelementptr [4 x %string_t], [4 x %string_t]* %libs_arg, i32 0, i32 %20
  %22 = getelementptr %string_t, %string_t* %21, i32 0, i32 0
  %23 = getelementptr %string_descriptor, %string_descriptor* %22, i32 0, i32 0
  store i8* null, i8** %23, align 8
  %24 = getelementptr %string_descriptor, %string_descriptor* %22, i32 0, i32 1
  store i64 0, i64* %24, align 4
  %25 = getelementptr %string_descriptor, %string_descriptor* %22, i32 0, i32 2
  store i64 0, i64* %25, align 4
  %26 = load i32, i32* %i, align 4
  %27 = add i32 %26, 1
  store i32 %27, i32* %i, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %prefix_arg = alloca i8*, align 8
  %28 = call i8* @_lfortran_malloc(i32 4)
  call void @_lfortran_string_init(i32 4, i8* %28)
  store i8* %28, i8** %prefix_arg, align 8
  %29 = load i8*, i8** %prefix_arg, align 8
  %30 = alloca %compiler_t_polymorphic, align 8
  %31 = getelementptr %compiler_t_polymorphic, %compiler_t_polymorphic* %30, i32 0, i32 0
  store i64 0, i64* %31, align 4
  %32 = getelementptr %compiler_t_polymorphic, %compiler_t_polymorphic* %30, i32 0, i32 1
  store %compiler_t* %compiler_arg, %compiler_t** %32, align 8
  %33 = getelementptr [4 x %string_t], [4 x %string_t]* %libs_arg, i32 0, i32 0
  %34 = getelementptr %array, %array* %array_descriptor, i32 0, i32 0
  store %string_t* %33, %string_t** %34, align 8
  %35 = getelementptr %array, %array* %array_descriptor, i32 0, i32 1
  store i32 0, i32* %35, align 4
  %36 = getelementptr %array, %array* %array_descriptor, i32 0, i32 2
  %37 = alloca %dimension_descriptor, align 8
  store %dimension_descriptor* %37, %dimension_descriptor** %36, align 8
  %38 = getelementptr %array, %array* %array_descriptor, i32 0, i32 4
  store i32 1, i32* %38, align 4
  %39 = load %dimension_descriptor*, %dimension_descriptor** %36, align 8
  %40 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %39, i32 0
  %41 = getelementptr %dimension_descriptor, %dimension_descriptor* %40, i32 0, i32 0
  %42 = getelementptr %dimension_descriptor, %dimension_descriptor* %40, i32 0, i32 1
  %43 = getelementptr %dimension_descriptor, %dimension_descriptor* %40, i32 0, i32 2
  store i32 1, i32* %41, align 4
  store i32 1, i32* %42, align 4
  store i32 4, i32* %43, align 4
  %44 = call %string_descriptor @__module_fpm_compiler_enumerate_libraries(%compiler_t_polymorphic* %30, i8** %prefix_arg, %array* %array_descriptor)
  %45 = alloca %string_descriptor, align 8
  store %string_descriptor %44, %string_descriptor* %45, align 8
  %46 = getelementptr %string_descriptor, %string_descriptor* %45, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 2, i8* null, i32 7, i8* %47)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %48, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  br label %return

return:                                           ; preds = %loop.end
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i32)

declare void @_lfortran_string_init(i32, i8*)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)
