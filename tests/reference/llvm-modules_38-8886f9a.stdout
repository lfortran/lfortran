; ModuleID = 'LFortran'
source_filename = "LFortran"

%0 = type { [25 x i8], i32 }
%compiler_t_polymorphic = type { i64, %compiler_t* }
%compiler_t = type { i32, i8*, i8*, i8*, i1, i1 }
%array = type { %string_t*, i32, %dimension_descriptor*, i1, i32 }
%string_t = type { i8* }
%dimension_descriptor = type { i32, i32, i32 }
%__vtab_compiler_t = type { i64 }

@"1_nameless_enum" = global [3 x %0] [%0 { [11 x i8] c"id_unknown\00", i32 0 }, %0 { [25 x i8] c"id_intel_classic_windows\00", i32 1 }, %0 { [22 x i8] c"id_intel_llvm_windows\00", i32 2 }]
@0 = private unnamed_addr constant [4 x i8] c"   \00", align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @__module_lfortran_intrinsic_kind_kind(i1* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 4, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define i8* @__module_fpm_compiler_enumerate_libraries(%compiler_t_polymorphic* %self, i8** %prefix, %array* %libs) {
.entry:
  %0 = alloca %__vtab_compiler_t, align 8
  %1 = getelementptr %__vtab_compiler_t, %__vtab_compiler_t* %0, i32 0, i32 0
  store i64 0, i64* %1, align 4
  %r = alloca i8*, align 8
  store i8* null, i8** %r, align 8
  %2 = getelementptr %compiler_t_polymorphic, %compiler_t_polymorphic* %self, i32 0, i32 1
  %3 = load %compiler_t*, %compiler_t** %2, align 8
  %4 = getelementptr %compiler_t, %compiler_t* %3, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 1
  %7 = getelementptr %compiler_t_polymorphic, %compiler_t_polymorphic* %self, i32 0, i32 1
  %8 = load %compiler_t*, %compiler_t** %7, align 8
  %9 = getelementptr %compiler_t, %compiler_t* %8, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 2
  %12 = icmp eq i1 %6, false
  %13 = alloca i1, align 1
  br i1 %12, label %then, label %else

then:                                             ; preds = %.entry
  store i1 %11, i1* %13, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  store i1 %6, i1* %13, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %14 = load i1, i1* %13, align 1
  br i1 %14, label %then1, label %else2

then1:                                            ; preds = %ifcont
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  br label %return

return:                                           ; preds = %ifcont3
  %15 = load i8*, i8** %r, align 8
  ret i8* %15
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %compiler_arg = alloca %compiler_t, align 8
  %2 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 0
  %3 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 2
  %4 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 3
  %5 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 4
  store i1 true, i1* %5, align 1
  %6 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 1
  %7 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 0
  store i32 0, i32* %7, align 4
  %8 = getelementptr %compiler_t, %compiler_t* %compiler_arg, i32 0, i32 5
  store i1 true, i1* %8, align 1
  %libs_arg = alloca %array, align 8
  %9 = getelementptr %array, %array* %libs_arg, i32 0, i32 1
  store i32 0, i32* %9, align 4
  %10 = getelementptr %array, %array* %libs_arg, i32 0, i32 2
  %11 = alloca i32, align 4
  store i32 1, i32* %11, align 4
  %12 = load i32, i32* %11, align 4
  %13 = alloca %dimension_descriptor, i32 %12, align 8
  %14 = getelementptr %array, %array* %libs_arg, i32 0, i32 4
  store i32 1, i32* %14, align 4
  store %dimension_descriptor* %13, %dimension_descriptor** %10, align 8
  %15 = load %dimension_descriptor*, %dimension_descriptor** %10, align 8
  %16 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %15, i32 0
  %17 = getelementptr %dimension_descriptor, %dimension_descriptor* %16, i32 0, i32 0
  %18 = getelementptr %dimension_descriptor, %dimension_descriptor* %16, i32 0, i32 1
  %19 = getelementptr %dimension_descriptor, %dimension_descriptor* %16, i32 0, i32 2
  store i32 1, i32* %17, align 4
  store i32 1, i32* %18, align 4
  store i32 4, i32* %19, align 4
  %20 = alloca i32, align 4
  store i32 4, i32* %20, align 4
  %21 = getelementptr %array, %array* %libs_arg, i32 0, i32 0
  %22 = load i32, i32* %20, align 4
  %23 = alloca %string_t, i32 %22, align 8
  store %string_t* %23, %string_t** %21, align 8
  %prefix_arg = alloca i8*, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i8** %prefix_arg, align 8
  %24 = alloca %compiler_t_polymorphic, align 8
  %25 = getelementptr %compiler_t_polymorphic, %compiler_t_polymorphic* %24, i32 0, i32 0
  store i64 0, i64* %25, align 4
  %26 = getelementptr %compiler_t_polymorphic, %compiler_t_polymorphic* %24, i32 0, i32 1
  store %compiler_t* %compiler_arg, %compiler_t** %26, align 8
  %27 = alloca %array, align 8
  %28 = call i8* @__module_fpm_compiler_enumerate_libraries(%compiler_t_polymorphic* %24, i8** %prefix_arg, %array* %libs_arg)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %28, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)
