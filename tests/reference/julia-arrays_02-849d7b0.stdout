module lfortran_intrinsic_kind

function dkind(x::Float64)::Int32
    local r::Int32
    r = 8
    return r
end

function kind(x::Bool)::Int32
    local r::Int32
    r = 4
    return r
end

function lkind(x::Bool)::Int32
    local r::Int32
    r = 4
    return r
end

function selected_char_kind(r::String)::Int32
    local res::Int32
    res = 1
    return res
end

function selected_int_kind(r::Int32)::Int32
    local res::Int32
    if r < 3
        res = 1
    else
        if r < 5
            res = 2
        else
            if r < 10
                res = 4
            else
                res = 8
            end
        end
    end
    return res
end

function selected_real_kind(p::Int32)::Int32
    local res::Int32
    if p < 7
        res = 4
    else
        res = 8
    end
    return res
end

function skind(x::Float32)::Int32
    local r::Int32
    r = 4
    return r
end

end

using Main.lfortran_intrinsic_kind: kind

function main()
    local a::Array{Float64, 1}
    local b::Float64
    local dp::Int32 = kind(  0.00000000000000000e+00)
    a[1] =   3.00000000000000000e+00
    a[2] =   2.00000000000000000e+00
    a[3] =   1.00000000000000000e+00
    b = sum(a)
    if abs(b -   6.00000000000000000e+00) >   9.99999999999999980e-13
        println(Base.stderr, "ERROR STOP")
        exit(1)
    end
end

main()
