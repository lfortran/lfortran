module lfortran_intrinsic_builtin

function achar(i::Int32, kind::Int32)::String
    local achar::String = ""
    return achar
end

function allocated(x::Array{Int32, 1})::Bool
    local allocated::Bool = false
    return allocated
end

function any(mask::Array{Bool, 1}, dim::Int32)::Bool
    local r::Bool = false
    return r
end

function bit_size(x::Int32)::Int32
    local bit_size::Int32 = 0
    return bit_size
end

function command_argument_count()::Int32
    local r::Int32 = 0
    return r
end

function execute_command_line(command::String, wait::Bool, exitstat::Int32, cmdstat::Int32, cmdmsg::String) end

function get_command_argument(number::Int32, value::Base.RefValue{String}, length::Base.RefValue{Int32}, status::Base.RefValue{Int32}) end

function get_environment_variable(name::String, value::String, length::Int32, status::Int32, trim_name::Bool) end

function is_iostat_end(i::Int32)::Bool
    local r::Bool = false
    return r
end

function is_iostat_eor(i::Int32)::Bool
    local r::Bool = false
    return r
end

function lbound(x::Array{Int32, 1}, dim::Int32)::Int32
    local lbound::Int32 = 0
    return lbound
end

function max(a::Int32, b::Int32)::Int32
    local max::Int32 = 0
    return max
end

function maxval(x::Array{Int32, 1})::Int32
    local maxval::Int32 = 0
    return maxval
end

function min(a::Int32, b::Int32)::Int32
    local min::Int32 = 0
    return min
end

function minval(x::Array{Int32, 1})::Int32
    local minval::Int32 = 0
    return minval
end

function move_alloc(from::Base.RefValue{Int32}, to::Base.RefValue{Int32}) end

function real(x::Array{Int32, 1}, kind::Int32)::Float32
    local real::Float32 = 0.0
    return real
end

function reshape(x::Array{Int32, 1}, shape_vec::Array{Int32, 1})::Int32
    local r::Int32 = 0
    return r
end

function shape(x::Array{Int32, 1})::Int32
    local shape::Int32 = 0
    return shape
end

function sum(x::Array{Int32, 1})::Int32
    local sum::Int32 = 0
    return sum
end

function tiny(x::Array{Int32, 1})::Float32
    local tiny::Float32 = 0.0
    return tiny
end

function ubound(x::Array{Int32, 1}, dim::Int32)::Int32
    local ubound::Int32 = 0
    return ubound
end

end

module lfortran_intrinsic_kind

function dkind(x::Float64)::Int32
    local r::Int32 = 0
    r = 8
    return r
end

function kind(x::Bool)::Int32
    local r::Int32 = 0
    r = 4
    return r
end

function lkind(x::Bool)::Int32
    local r::Int32 = 0
    r = 4
    return r
end

function selected_char_kind(r::String)::Int32
    local res::Int32 = 0
    res = 1
    return res
end

function selected_int_kind(r::Int32)::Int32
    local res::Int32 = 0
    if r < 10
        res = 4
    else
        res = 8
    end
    return res
end

function selected_real_kind(p::Int32)::Int32
    local res::Int32 = 0
    if p < 7
        res = 4
    else
        res = 8
    end
    return res
end

function skind(x::Float32)::Int32
    local r::Int32 = 0
    r = 4
    return r
end

end

module lfortran_intrinsic_math

function alog(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dlog(x)
    return r
end

function cabs(x::ComplexF32)::Float32
    local r::Float32 = 0.0
    r = ssqrt(Float32((real(x) ^ Float32(2)) + (caimag(x) ^ Float32(2))))
    return r
end

function cacos(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_cacos(x)
    return r
end

function cacosh(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_cacosh(x)
    return r
end

function caimag(x::ComplexF32)::Float32
    local r::Float32 = 0.0
    r = c_caimag(x)
    return r
end

function casin(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_casin(x)
    return r
end

function casinh(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_casinh(x)
    return r
end

function catan(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_catan(x)
    return r
end

function catanh(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_catanh(x)
    return r
end

function ccos(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_ccos(x)
    return r
end

function ccosh(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_ccosh(x)
    return r
end

function cexp(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_cexp(x)
    return r
end

function clog(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_clog(x)
    return r
end

function conjgz32(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = complex(real(x)) - complex(caimag(x)) * ComplexF32(0, 1)
    return r
end

function conjgz64(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = complex(real(x)) - complex(zaimag(x)) * ComplexF32(0, 1)
    return r
end

function cpu_time(t::Base.RefValue{Float64})
    c_cpu_time(t)
end

function crange(x::ComplexF32)::Int32
    local r::Int32 = 0
    r = 37
    return r
end

function csin(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_csin(x)
    return r
end

function csinh(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_csinh(x)
    return r
end

function csqrt(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_csqrt(x)
    return r
end

function ctan(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_ctan(x)
    return r
end

function ctanh(x::ComplexF32)::ComplexF32
    local r::ComplexF32 = 0.0
    r = c_ctanh(x)
    return r
end

function dabs(x::Float64)::Float64
    local r::Float64 = 0.0
    if x ≥ Float64(0)
        r = x
    else
        r = -x
    end
    return r
end

function dacos(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dacos(x)
    return r
end

function dacosh(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dacosh(x)
    return r
end

function dasin(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dasin(x)
    return r
end

function dasinh(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dasinh(x)
    return r
end

function datan(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_datan(x)
    return r
end

function datan2(y::Float64, x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_datan2(y, x)
    return r
end

function datanh(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_datanh(x)
    return r
end

function dcos(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dcos(x)
    return r
end

function dcosh(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dcosh(x)
    return r
end

function depsilon(x::Float64)::Float64
    local r::Float64 = 0.0
    r =   2.22044604925031308e-16
    return r
end

function derf(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_derf(x)
    return r
end

function derfc(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_derfc(x)
    return r
end

function dexp(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dexp(x)
    return r
end

function dgamma(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dgamma(x)
    return r
end

function dlog(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dlog(x)
    return r
end

function dlog10(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dlog10(x)
    return r
end

function dlog_gamma(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dlog_gamma(x)
    return r
end

function dotproductr32r32(x::Array{Float32, 1}, y::Array{Float32, 1})::Float32
    local r::Float32 = 0.0
    return r
end

function dotproductr64r64(x::Array{Float64, 1}, y::Array{Float64, 1})::Float64
    local r::Float64 = 0.0
    return r
end

function dotproductz32z32(x::Array{ComplexF32, 1}, y::Array{ComplexF32, 1})::ComplexF32
    local r::ComplexF32 = 0.0
    return r
end

function dotproductz64z64(x::Array{ComplexF64, 1}, y::Array{ComplexF64, 1})::ComplexF64
    local r::ComplexF64 = 0.0
    return r
end

function dp_rand_num(harvest::Base.RefValue{Float64})
    c_dp_rand_num(harvest)
end

function drange(x::Float64)::Int32
    local r::Int32 = 0
    r = 307
    return r
end

function dsin(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dsin(x)
    return r
end

function dsinh(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dsinh(x)
    return r
end

function dsqrt(x::Float64)::Float64
    local r::Float64 = 0.0
    r = sqrt(x)
    return r
end

function dtan(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dtan(x)
    return r
end

function dtanh(x::Float64)::Float64
    local r::Float64 = 0.0
    r = c_dtanh(x)
    return r
end

function i16abs(x::Int16)::Int16
    local r::Int16 = 0
    if x ≥ 0
        r = x
    else
        r = -x
    end
    return r
end

function i32range(x::Int32)::Int32
    local r::Int32 = 0
    r = 9
    return r
end

function i32sys_clock(count::Base.RefValue{Int32}, count_rate::Base.RefValue{Int32}, count_max::Base.RefValue{Int32})
    c_i32sys_clock(count, count_rate, count_max)
end

function i64abs(x::Int64)::Int64
    local r::Int64 = 0
    if x ≥ 0
        r = x
    else
        r = -x
    end
    return r
end

function i64range(x::Int64)::Int32
    local r::Int32 = 0
    r = 18
    return r
end

function i64sys_clock(count::Base.RefValue{Int64}, count_rate::Base.RefValue{Int64}, count_max::Base.RefValue{Int64})
    c_i64sys_clock(count, count_rate, count_max)
end

function i8abs(x::Int8)::Int8
    local r::Int8 = 0
    if x ≥ 0
        r = x
    else
        r = -x
    end
    return r
end

function iabs(x::Int32)::Int32
    local r::Int32 = 0
    if x ≥ 0
        r = x
    else
        r = -x
    end
    return r
end

function int16range(x::Int16)::Int32
    local r::Int32 = 0
    r = 4
    return r
end

function int8range(x::Int8)::Int32
    local r::Int32 = 0
    r = 2
    return r
end

function sabs(x::Float32)::Float32
    local r::Float32 = 0.0
    if x ≥ Float32(0)
        r = x
    else
        r = -x
    end
    return r
end

function sacos(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_sacos(x)
    return r
end

function sacosh(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_sacosh(x)
    return r
end

function sasin(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_sasin(x)
    return r
end

function sasinh(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_sasinh(x)
    return r
end

function satan(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_satan(x)
    return r
end

function satan2(y::Float32, x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_satan2(y, x)
    return r
end

function satanh(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_satanh(x)
    return r
end

function scos(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_scos(x)
    return r
end

function scosh(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_scosh(x)
    return r
end

function sepsilon(x::Float32)::Float32
    local r::Float32 = 0.0
    r =   1.19209290000000012e-07
    return r
end

function serf(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_serf(x)
    return r
end

function serfc(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_serfc(x)
    return r
end

function sexp(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_sexp(x)
    return r
end

function sgamma(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_sgamma(x)
    return r
end

function signi16(x::Int16, y::Int16)::Int16
    local r::Int16 = 0
    if x ≥ 0 && y ≥ 0 || x ≤ 0 && y ≤ 0
        r = x
    else
        r = -x
    end
    return r
end

function signi32(x::Int32, y::Int32)::Int32
    local r::Int32 = 0
    if x ≥ 0 && y ≥ 0 || x ≤ 0 && y ≤ 0
        r = x
    else
        r = -x
    end
    return r
end

function signi64(x::Int64, y::Int64)::Int64
    local r::Int64 = 0
    if x ≥ 0 && y ≥ 0 || x ≤ 0 && y ≤ 0
        r = x
    else
        r = -x
    end
    return r
end

function signi8(x::Int8, y::Int8)::Int8
    local r::Int8 = 0
    if x ≥ 0 && y ≥ 0 || x ≤ 0 && y ≤ 0
        r = x
    else
        r = -x
    end
    return r
end

function signr32(x::Float32, y::Float32)::Float32
    local r::Float32 = 0.0
    if x ≥ Float32(0) && y ≥ Float32(0) || x ≤ Float32(0) && y ≤ Float32(0)
        r = x
    else
        r = -x
    end
    return r
end

function signr64(x::Float64, y::Float64)::Float64
    local r::Float64 = 0.0
    if x ≥ Float64(0) && y ≥ Float64(0) || x ≤ Float64(0) && y ≤ Float64(0)
        r = x
    else
        r = -x
    end
    return r
end

function slog(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_slog(x)
    return r
end

function slog10(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_slog10(x)
    return r
end

function slog_gamma(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_slog_gamma(x)
    return r
end

function sp_rand_num(harvest::Base.RefValue{Float32})
    c_sp_rand_num(harvest)
end

function srange(x::Float32)::Int32
    local r::Int32 = 0
    r = 37
    return r
end

function ssin(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_ssin(x)
    return r
end

function ssinh(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_ssinh(x)
    return r
end

function ssqrt(x::Float32)::Float32
    local r::Float32 = 0.0
    r = sqrt(x)
    return r
end

function stan(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_stan(x)
    return r
end

function stanh(x::Float32)::Float32
    local r::Float32 = 0.0
    r = c_stanh(x)
    return r
end

function zabs(x::ComplexF64)::Float64
    local r::Float64 = 0.0
    r = dsqrt(Float64((real(x) ^ Float64(2)) + (zaimag(x) ^ Float64(2))))
    return r
end

function zacos(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_zacos(x)
    return r
end

function zacosh(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_zacosh(x)
    return r
end

function zaimag(x::ComplexF64)::Float64
    local r::Float64 = 0.0
    r = c_zaimag(x)
    return r
end

function zasin(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_zasin(x)
    return r
end

function zasinh(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_zasinh(x)
    return r
end

function zatan(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_zatan(x)
    return r
end

function zatanh(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_zatanh(x)
    return r
end

function zcos(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_zcos(x)
    return r
end

function zcosh(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_zcosh(x)
    return r
end

function zexp(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_zexp(x)
    return r
end

function zlog(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_zlog(x)
    return r
end

function zrange(x::ComplexF64)::Int32
    local r::Int32 = 0
    r = 307
    return r
end

function zsin(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_zsin(x)
    return r
end

function zsinh(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_zsinh(x)
    return r
end

function zsqrt(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_zsqrt(x)
    return r
end

function ztan(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_ztan(x)
    return r
end

function ztanh(x::ComplexF64)::ComplexF64
    local r::ComplexF64 = 0.0
    r = c_ztanh(x)
    return r
end

end

module lfortran_intrinsic_iso_c_binding

function c_associated(c_ptr_1::c_ptr)::Bool
    local c_associated::Bool = false
    return c_associated
end

function c_f_pointer(cptr::c_ptr, fptr::Base.RefValue{Int32}, shape::Array{Int32, 1}) end

function c_loc(x::Int32)::Int32
    local c_loc::Int32 = 0
    return c_loc
end

end

module lfortran_intrinsic_iso_fortran_env

end

using Main.lfortran_intrinsic_builtin: sum
using Main.lfortran_intrinsic_kind: kind
using Main.lfortran_intrinsic_math: abs@dabs

function main()
    local a = Array{Float64, 1}(undef, 3)
    local b::Float64 = 0.0
    local dp::Int32 = kind(  0.00000000000000000e+00)
    a[1] =   3.00000000000000000e+00
    a[2] =   2.00000000000000000e+00
    a[3] =   1.00000000000000000e+00
    b = Float64(sum(a))
    if dabs(Float64(b -   6.00000000000000000e+00)) >   9.99999999999999980e-13
        println(Base.stderr, "ERROR STOP")
        exit(1)
    end
end

main()
