; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [18 x i8] c"%13.8e%s%23.17e%s\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@6 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@7 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define float @_lcompilers_abs_f32(float* %x) {
.entry:
  %_lcompilers_abs_f32 = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  store float %2, float* %_lcompilers_abs_f32, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load float, float* %x, align 4
  %4 = fneg float %3
  store float %4, float* %_lcompilers_abs_f32, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load float, float* %_lcompilers_abs_f32, align 4
  ret float %5
}

define double @_lcompilers_abs_f64(double* %x) {
.entry:
  %_lcompilers_abs_f64 = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  store double %2, double* %_lcompilers_abs_f64, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  %4 = fneg double %3
  store double %4, double* %_lcompilers_abs_f64, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load double, double* %_lcompilers_abs_f64, align 8
  ret double %5
}

define float @_lcompilers_sin_f32(float* %x) {
.entry:
  %_lcompilers_sin_f32 = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_ssin(float %0)
  store float %1, float* %_lcompilers_sin_f32, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %_lcompilers_sin_f32, align 4
  ret float %2
}

declare float @_lfortran_ssin(float)

define double @_lcompilers_sin_f64(double* %x) {
.entry:
  %_lcompilers_sin_f64 = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dsin(double %0)
  store double %1, double* %_lcompilers_sin_f64, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %_lcompilers_sin_f64, align 8
  ret double %2
}

declare double @_lfortran_dsin(double)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value14 = alloca double, align 8
  %call_arg_value13 = alloca double, align 8
  %call_arg_value12 = alloca float, align 4
  %call_arg_value5 = alloca double, align 8
  %call_arg_value1 = alloca float, align 4
  %call_arg_value = alloca float, align 4
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %x = alloca float, align 4
  store float 0x3FEFEB7AA0000000, float* %x, align 4
  %y = alloca double, align 8
  store double 0x3FEFEB7A9B2C6D8B, double* %y, align 8
  %2 = load float, float* %x, align 4
  %3 = fpext float %2 to double
  %4 = load double, double* %y, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i32 0, i32 0), double %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), double %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %5 = load float, float* %x, align 4
  %6 = fsub float %5, 0x3FEFEB7AA0000000
  store float %6, float* %call_arg_value, align 4
  %7 = call float @_lcompilers_abs_f32(float* %call_arg_value)
  %8 = fcmp ugt float %7, 0x3EB0C6F7A0000000
  br i1 %8, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %9 = call float @_lcompilers_sin_f32(float* %x)
  %10 = fsub float %9, 0x3FEAE238A0000000
  store float %10, float* %call_arg_value1, align 4
  %11 = call float @_lcompilers_abs_f32(float* %call_arg_value1)
  %12 = fcmp ugt float %11, 0x3EB0C6F7A0000000
  br i1 %12, label %then2, label %else3

then2:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %13 = load double, double* %y, align 8
  %14 = fsub double %13, 0x3FEFEB7A9FAE5B9E
  store double %14, double* %call_arg_value5, align 8
  %15 = call double @_lcompilers_abs_f64(double* %call_arg_value5)
  %16 = fcmp ugt double %15, 0x3E7AD7F29ABCAF48
  br i1 %16, label %then6, label %else7

then6:                                            ; preds = %ifcont4
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont8

else7:                                            ; preds = %ifcont4
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %then6
  br i1 false, label %then9, label %else10

then9:                                            ; preds = %ifcont8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont11

else10:                                           ; preds = %ifcont8
  br label %ifcont11

ifcont11:                                         ; preds = %else10, %then9
  %17 = call double @_lcompilers_sin_f64(double* %y)
  %18 = load float, float* %x, align 4
  %19 = call float @_lcompilers_sin_f32(float* %x)
  %20 = fadd float %18, %19
  store float %20, float* %call_arg_value12, align 4
  %21 = call float @_lcompilers_sin_f32(float* %call_arg_value12)
  %22 = fpext float %21 to double
  %23 = fadd double %17, %22
  store double %23, double* %call_arg_value13, align 8
  %24 = call double @_lcompilers_sin_f64(double* %call_arg_value13)
  %25 = fsub double %24, 0x3FEF20DD85ACA7BE
  store double %25, double* %call_arg_value14, align 8
  %26 = call double @_lcompilers_abs_f64(double* %call_arg_value14)
  %27 = fcmp ugt double %26, 0x3E7AD7F29ABCAF48
  br i1 %27, label %then15, label %else16

then15:                                           ; preds = %ifcont11
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont17

else16:                                           ; preds = %ifcont11
  br label %ifcont17

ifcont17:                                         ; preds = %else16, %then15
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
