; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@string_const_data = private constant [11 x i8] c"ERROR STOP\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data, i32 0, i32 0), i64 10 }>
@string_const_data.1 = private constant [2 x i8] c"\0A\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.1, i32 0, i32 0), i64 1 }>
@0 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [6 x i8] c"I4,I4\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.3 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.3, i32 0, i32 0), i64 10 }>
@string_const_data.5 = private constant [2 x i8] c"\0A\00"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.5, i32 0, i32 0), i64 1 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.7 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.8 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.7, i32 0, i32 0), i64 10 }>
@string_const_data.9 = private constant [2 x i8] c"\0A\00"
@string_const.10 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.9, i32 0, i32 0), i64 1 }>
@4 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.11 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.12 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.11, i32 0, i32 0), i64 10 }>
@string_const_data.13 = private constant [2 x i8] c"\0A\00"
@string_const.14 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.13, i32 0, i32 0), i64 1 }>
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.15 = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.16 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.17 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.16, i32 0, i32 0), i64 10 }>
@string_const_data.18 = private constant [2 x i8] c"\0A\00"
@string_const.19 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.18, i32 0, i32 0), i64 1 }>
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.20 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.21 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.20, i32 0, i32 0), i64 10 }>
@string_const_data.22 = private constant [2 x i8] c"\0A\00"
@string_const.23 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.22, i32 0, i32 0), i64 1 }>
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.24 = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.25 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.26 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.25, i32 0, i32 0), i64 10 }>
@string_const_data.27 = private constant [2 x i8] c"\0A\00"
@string_const.28 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.27, i32 0, i32 0), i64 1 }>
@12 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.29 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.30 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.29, i32 0, i32 0), i64 10 }>
@string_const_data.31 = private constant [2 x i8] c"\0A\00"
@string_const.32 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.31, i32 0, i32 0), i64 1 }>
@13 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.33 = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@15 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.34 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.35 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.34, i32 0, i32 0), i64 10 }>
@string_const_data.36 = private constant [2 x i8] c"\0A\00"
@string_const.37 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.36, i32 0, i32 0), i64 1 }>
@16 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value27 = alloca i32, align 4
  %call_arg_value19 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %i1 = alloca i32, align 4
  %j2 = alloca i32, align 4
  store i32 1, i32* %i1, align 4
  store i32 1, i32* %j2, align 4
  %2 = load i32, i32* %j2, align 4
  %3 = icmp ne i32 %2, 1
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  %4 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %5 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i8* %4, i8* %5)
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  call void @f(i32* %i1, i32* %j2)
  %6 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i32* %i1, i32* %j2)
  %7 = call i64 @_lfortran_str_len(i8* %6)
  %8 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %8 to %string_descriptor*
  %9 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %6, i8** %9, align 8
  %10 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %7, i64* %10, align 4
  %11 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %14 = load i64, i64* %13, align 4
  %15 = trunc i64 %14 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %12, i32 %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0), i32 1)
  %16 = load i32, i32* %i1, align 4
  %17 = icmp ne i32 %16, 1
  br i1 %17, label %then3, label %else4

then3:                                            ; preds = %ifcont
  %18 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  %19 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.6, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %18, i8* %19)
  call void @exit(i32 1)
  br label %ifcont5

else4:                                            ; preds = %ifcont
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  %20 = load i32, i32* %j2, align 4
  %21 = icmp ne i32 %20, 2
  br i1 %21, label %then6, label %else7

then6:                                            ; preds = %ifcont5
  %22 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.8, i32 0, i32 0), align 8
  %23 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.10, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i8* %22, i8* %23)
  call void @exit(i32 1)
  br label %ifcont8

else7:                                            ; preds = %ifcont5
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %then6
  store i32 1, i32* %j2, align 4
  %24 = load i32, i32* %j2, align 4
  %25 = icmp ne i32 %24, 1
  br i1 %25, label %then9, label %else10

then9:                                            ; preds = %ifcont8
  %26 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.12, i32 0, i32 0), align 8
  %27 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.14, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %26, i8* %27)
  call void @exit(i32 1)
  br label %ifcont11

else10:                                           ; preds = %ifcont8
  br label %ifcont11

ifcont11:                                         ; preds = %else10, %then9
  store i32 3, i32* %call_arg_value, align 4
  call void @f(i32* %call_arg_value, i32* %j2)
  %28 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.15, i32 0, i32 0), i32 0, i32 0, i32* %j2)
  %29 = call i64 @_lfortran_str_len(i8* %28)
  %30 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc12 = bitcast i8* %30 to %string_descriptor*
  %31 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc12, i32 0, i32 0
  store i8* %28, i8** %31, align 8
  %32 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc12, i32 0, i32 1
  store i64 %29, i64* %32, align 4
  %33 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc12, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc12, i32 0, i32 1
  %36 = load i64, i64* %35, align 4
  %37 = trunc i64 %36 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %34, i32 %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0), i32 1)
  %38 = load i32, i32* %j2, align 4
  %39 = icmp ne i32 %38, 4
  br i1 %39, label %then13, label %else14

then13:                                           ; preds = %ifcont11
  %40 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.17, i32 0, i32 0), align 8
  %41 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.19, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* %40, i8* %41)
  call void @exit(i32 1)
  br label %ifcont15

else14:                                           ; preds = %ifcont11
  br label %ifcont15

ifcont15:                                         ; preds = %else14, %then13
  store i32 1, i32* %j2, align 4
  %42 = load i32, i32* %j2, align 4
  %43 = icmp ne i32 %42, 1
  br i1 %43, label %then16, label %else17

then16:                                           ; preds = %ifcont15
  %44 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.21, i32 0, i32 0), align 8
  %45 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.23, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* %44, i8* %45)
  call void @exit(i32 1)
  br label %ifcont18

else17:                                           ; preds = %ifcont15
  br label %ifcont18

ifcont18:                                         ; preds = %else17, %then16
  store i32 3, i32* %call_arg_value19, align 4
  call void @f(i32* %call_arg_value19, i32* %j2)
  %46 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.24, i32 0, i32 0), i32 0, i32 0, i32* %j2)
  %47 = call i64 @_lfortran_str_len(i8* %46)
  %48 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc20 = bitcast i8* %48 to %string_descriptor*
  %49 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc20, i32 0, i32 0
  store i8* %46, i8** %49, align 8
  %50 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc20, i32 0, i32 1
  store i64 %47, i64* %50, align 4
  %51 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc20, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc20, i32 0, i32 1
  %54 = load i64, i64* %53, align 4
  %55 = trunc i64 %54 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* %52, i32 %55, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0), i32 1)
  %56 = load i32, i32* %j2, align 4
  %57 = icmp ne i32 %56, 4
  br i1 %57, label %then21, label %else22

then21:                                           ; preds = %ifcont18
  %58 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.26, i32 0, i32 0), align 8
  %59 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.28, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i32 0, i32 0), i8* %58, i8* %59)
  call void @exit(i32 1)
  br label %ifcont23

else22:                                           ; preds = %ifcont18
  br label %ifcont23

ifcont23:                                         ; preds = %else22, %then21
  store i32 1, i32* %j2, align 4
  %60 = load i32, i32* %j2, align 4
  %61 = icmp ne i32 %60, 1
  br i1 %61, label %then24, label %else25

then24:                                           ; preds = %ifcont23
  %62 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.30, i32 0, i32 0), align 8
  %63 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.32, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @13, i32 0, i32 0), i8* %62, i8* %63)
  call void @exit(i32 1)
  br label %ifcont26

else25:                                           ; preds = %ifcont23
  br label %ifcont26

ifcont26:                                         ; preds = %else25, %then24
  %64 = load i32, i32* %i1, align 4
  %65 = add i32 %64, 2
  store i32 %65, i32* %call_arg_value27, align 4
  call void @f(i32* %call_arg_value27, i32* %j2)
  %66 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.33, i32 0, i32 0), i32 0, i32 0, i32* %j2)
  %67 = call i64 @_lfortran_str_len(i8* %66)
  %68 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc28 = bitcast i8* %68 to %string_descriptor*
  %69 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc28, i32 0, i32 0
  store i8* %66, i8** %69, align 8
  %70 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc28, i32 0, i32 1
  store i64 %67, i64* %70, align 4
  %71 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc28, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc28, i32 0, i32 1
  %74 = load i64, i64* %73, align 4
  %75 = trunc i64 %74 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @15, i32 0, i32 0), i8* %72, i32 %75, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i32 0, i32 0), i32 1)
  %76 = load i32, i32* %j2, align 4
  %77 = icmp ne i32 %76, 4
  br i1 %77, label %then29, label %else30

then29:                                           ; preds = %ifcont26
  %78 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.35, i32 0, i32 0), align 8
  %79 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.37, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @16, i32 0, i32 0), i8* %78, i8* %79)
  call void @exit(i32 1)
  br label %ifcont31

else30:                                           ; preds = %ifcont26
  br label %ifcont31

ifcont31:                                         ; preds = %else30, %then29
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont31
  ret i32 0
}

define void @f(i32* %a, i32* %b) {
.entry:
  %0 = load i32, i32* %a, align 4
  %1 = add i32 %0, 1
  store i32 %1, i32* %b, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lpython_free_argv()
