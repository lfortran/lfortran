#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}


struct dimension_descriptor
{
    int32_t lower_bound, length;
};

struct f32_3_1
{
    Kokkos::View<float*>* data;
    dimension_descriptor dims[1];
    bool is_allocated;

    f32_3_1(Kokkos::View<float*>* data_): data{data_} {};
};

// Forward declarations
namespace {
float abs(float a);

template <typename T0>
float sum(T0* a);
}

// Implementations
namespace {
float abs(float a)
{
    float r;
    std::cout << "abs" << std::endl;
    if (a > (float)(0)) {
        r = a;
    } else {
        r = -a;
    }
    return r;
}


template <typename T0>
float sum(T0* a)
{
    int32_t i;
    float r;
    std::cout << "sum" << std::endl;
    r = (float)(0);
    for (i=1; i<=a->data->extent(0); i++) {
        r = r + a->data->operator[](i - a->dims[0].lower_bound);
    }
    return r;
}


void main2() {
    Kokkos::View<float*> a_data("a_data", 3);
    f32_3_1 a_value(&a_data);
    f32_3_1* a = &a_value;
    a->dims[0].lower_bound = 1;
    a->dims[0].length = 3;
    float b;
    a->data->operator[](1 - a->dims[0].lower_bound) = (float)(3);
    a->data->operator[](2 - a->dims[0].lower_bound) = (float)(2);
    a->data->operator[](3 - a->dims[0].lower_bound) = (float)(1);
    b = sum(a);
    if (abs(b - (float)(6)) >   1.00000000000000008e-05) {
        std::cerr << "ERROR STOP" << std::endl;
        exit(1);
    }
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
