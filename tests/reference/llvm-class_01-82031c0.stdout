; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>
%circle_polymorphic = type { i64, %circle* }
%circle = type <{ float }>
%__vtab_circle = type { i64 }

@__module_class_circle1_pi = global float 0x400921FB60000000
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [25 x i8] c"S-DESC-12,R4,S-DESC-8,R4\00", align 1
@string_const_data = private constant [13 x i8] c"Circle: r = \00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([13 x i8], [13 x i8]* @string_const_data, i32 0, i32 0), i64 12 }>
@string_const_data.1 = private constant [9 x i8] c" area = \00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([9 x i8], [9 x i8]* @string_const_data.1, i32 0, i32 0), i64 8 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define float @__module_class_circle1_circle_area(%circle_polymorphic* %this) {
.entry:
  %0 = alloca %__vtab_circle, align 8
  %1 = getelementptr %__vtab_circle, %__vtab_circle* %0, i32 0, i32 0
  store i64 0, i64* %1, align 4
  %area = alloca float, align 4
  %2 = load float, float* @__module_class_circle1_pi, align 4
  %3 = getelementptr %circle_polymorphic, %circle_polymorphic* %this, i32 0, i32 1
  %4 = load %circle*, %circle** %3, align 8
  %5 = getelementptr %circle, %circle* %4, i32 0, i32 0
  %6 = load float, float* %5, align 4
  %simplified_pow_operation = fmul float %6, %6
  %7 = fmul float %2, %simplified_pow_operation
  store float %7, float* %area, align 4
  br label %return

return:                                           ; preds = %.entry
  %8 = load float, float* %area, align 4
  ret float %8
}

define void @__module_class_circle1_circle_print(%circle_polymorphic* %this) {
.entry:
  %0 = alloca %__vtab_circle, align 8
  %1 = getelementptr %__vtab_circle, %__vtab_circle* %0, i32 0, i32 0
  store i64 0, i64* %1, align 4
  %area = alloca float, align 4
  %2 = call float @__module_class_circle1_circle_area(%circle_polymorphic* %this)
  store float %2, float* %area, align 4
  %3 = getelementptr %circle_polymorphic, %circle_polymorphic* %this, i32 0, i32 1
  %4 = load %circle*, %circle** %3, align 8
  %5 = getelementptr %circle, %circle* %4, i32 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = alloca float, align 4
  store float %6, float* %7, align 4
  %8 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, %string_descriptor* @string_const, float* %7, %string_descriptor* @string_const.2, float* %area)
  %9 = call i64 @_lfortran_str_len(i8* %8)
  %10 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %10 to %string_descriptor*
  %11 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %8, i8** %11, align 8
  %12 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %9, i64* %12, align 4
  %13 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, ...)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = alloca %__vtab_circle, align 8
  %3 = getelementptr %__vtab_circle, %__vtab_circle* %2, i32 0, i32 0
  store i64 0, i64* %3, align 4
  %c = alloca %circle, align 8
  %4 = getelementptr %circle, %circle* %c, i32 0, i32 0
  %5 = getelementptr %circle, %circle* %c, i32 0, i32 0
  store float 1.500000e+00, float* %5, align 4
  %6 = alloca %circle_polymorphic, align 8
  %7 = getelementptr %circle_polymorphic, %circle_polymorphic* %6, i32 0, i32 0
  store i64 0, i64* %7, align 4
  %8 = getelementptr %circle_polymorphic, %circle_polymorphic* %6, i32 0, i32 1
  store %circle* %c, %circle** %8, align 8
  call void @__module_class_circle1_circle_print(%circle_polymorphic* %6)
  %9 = getelementptr %circle, %circle* %c, i32 0, i32 0
  store float 2.000000e+00, float* %9, align 4
  %10 = alloca %circle_polymorphic, align 8
  %11 = getelementptr %circle_polymorphic, %circle_polymorphic* %10, i32 0, i32 0
  store i64 0, i64* %11, align 4
  %12 = getelementptr %circle_polymorphic, %circle_polymorphic* %10, i32 0, i32 1
  store %circle* %c, %circle** %12, align 8
  call void @__module_class_circle1_circle_print(%circle_polymorphic* %10)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lpython_free_argv()
