; ModuleID = 'LFortran'
source_filename = "LFortran"

%calculator = type {}

@0 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @_lcompilers_abs_i32(i32* %x) {
.entry:
  %_lcompilers_abs_i32 = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = icmp sge i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i32, i32* %x, align 4
  store i32 %2, i32* %_lcompilers_abs_i32, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i32, i32* %x, align 4
  %4 = sub i32 0, %3
  store i32 %4, i32* %_lcompilers_abs_i32, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i32, i32* %_lcompilers_abs_i32, align 4
  ret i32 %5
}

define i32 @__module_modules_module_function_with_nopass_square(i32* %x, i1* %is_x_present_) {
.entry:
  %square_result = alloca i32, align 4
  %0 = load i1, i1* %is_x_present_, align 1
  br i1 %0, label %then, label %else

then:                                             ; preds = %.entry
  %1 = load i32, i32* %x, align 4
  %2 = load i32, i32* %x, align 4
  %3 = mul i32 %1, %2
  store i32 %3, i32* %square_result, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  store i32 1, i32* %square_result, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %4 = load i32, i32* %square_result, align 4
  ret i32 %4
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca i1, align 1
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %calc = alloca %calculator, align 8
  %number = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 4, i32* %number, align 4
  store i1 true, i1* %call_arg_value, align 1
  %2 = call i32 @__module_modules_module_function_with_nopass_square(i32* %number, i1* %call_arg_value)
  store i32 %2, i32* %result, align 4
  %3 = call i32 @_lcompilers_abs_i32(i32* %result)
  %4 = icmp ne i32 %3, 16
  br i1 %4, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
