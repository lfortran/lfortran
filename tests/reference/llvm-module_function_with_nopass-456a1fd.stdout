; ModuleID = 'LFortran'
source_filename = "LFortran"

%calculator = type {}

@0 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@9 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @__module_modules_module_function_with_nopass_area(i32* %x, i1* %is_x_present_, i32* %y, i1* %is_y_present_) {
.entry:
  %area_result = alloca i32, align 4
  %0 = load i1, i1* %is_x_present_, align 1
  %1 = load i1, i1* %is_y_present_, align 1
  %2 = icmp eq i1 %0, false
  %3 = select i1 %2, i1 %0, i1 %1
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  %4 = load i32, i32* %x, align 4
  %5 = load i32, i32* %y, align 4
  %6 = mul i32 %4, %5
  store i32 %6, i32* %area_result, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  store i32 1, i32* %area_result, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %7 = load i32, i32* %area_result, align 4
  ret i32 %7
}

define i32 @__module_modules_module_function_with_nopass_square(i32* %x, i1* %is_x_present_) {
.entry:
  %square_result = alloca i32, align 4
  %0 = load i1, i1* %is_x_present_, align 1
  br i1 %0, label %then, label %else

then:                                             ; preds = %.entry
  %1 = load i32, i32* %x, align 4
  %2 = load i32, i32* %x, align 4
  %3 = mul i32 %1, %2
  store i32 %3, i32* %square_result, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  store i32 1, i32* %square_result, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %4 = load i32, i32* %square_result, align 4
  ret i32 %4
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value15 = alloca i1, align 1
  %call_arg_value14 = alloca i1, align 1
  %call_arg_value13 = alloca i32, align 4
  %call_arg_value9 = alloca i1, align 1
  %call_arg_value8 = alloca i32, align 4
  %call_arg_value7 = alloca i1, align 1
  %call_arg_value6 = alloca i32, align 4
  %call_arg_value2 = alloca i1, align 1
  %call_arg_value1 = alloca i1, align 1
  %call_arg_value = alloca i1, align 1
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %__libasr_created_variable_ = alloca i32, align 4
  %__libasr_created_variable_1 = alloca i32, align 4
  %__libasr_created_variable_2 = alloca i32, align 4
  %area1 = alloca i32, align 4
  %area2 = alloca i32, align 4
  %area3 = alloca i32, align 4
  %calc = alloca %calculator, align 8
  %number = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 4, i32* %number, align 4
  store i1 true, i1* %call_arg_value, align 1
  %2 = call i32 @__module_modules_module_function_with_nopass_square(i32* %number, i1* %call_arg_value)
  store i32 %2, i32* %result, align 4
  %3 = load i32, i32* %result, align 4
  %4 = icmp ne i32 %3, 16
  br i1 %4, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  store i1 false, i1* %call_arg_value1, align 1
  store i1 false, i1* %call_arg_value2, align 1
  %5 = call i32 @__module_modules_module_function_with_nopass_area(i32* %__libasr_created_variable_, i1* %call_arg_value1, i32* %__libasr_created_variable_1, i1* %call_arg_value2)
  store i32 %5, i32* %area1, align 4
  %6 = load i32, i32* %area1, align 4
  %7 = icmp ne i32 %6, 1
  br i1 %7, label %then3, label %else4

then3:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont5

else4:                                            ; preds = %ifcont
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  store i32 1, i32* %call_arg_value6, align 4
  store i1 true, i1* %call_arg_value7, align 1
  store i32 2, i32* %call_arg_value8, align 4
  store i1 true, i1* %call_arg_value9, align 1
  %8 = call i32 @__module_modules_module_function_with_nopass_area(i32* %call_arg_value6, i1* %call_arg_value7, i32* %call_arg_value8, i1* %call_arg_value9)
  store i32 %8, i32* %area2, align 4
  %9 = load i32, i32* %area2, align 4
  %10 = icmp ne i32 %9, 2
  br i1 %10, label %then10, label %else11

then10:                                           ; preds = %ifcont5
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont12

else11:                                           ; preds = %ifcont5
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  store i32 1, i32* %call_arg_value13, align 4
  store i1 true, i1* %call_arg_value14, align 1
  store i1 false, i1* %call_arg_value15, align 1
  %11 = call i32 @__module_modules_module_function_with_nopass_area(i32* %call_arg_value13, i1* %call_arg_value14, i32* %__libasr_created_variable_2, i1* %call_arg_value15)
  store i32 %11, i32* %area3, align 4
  %12 = load i32, i32* %area3, align 4
  %13 = icmp ne i32 %12, 1
  br i1 %13, label %then16, label %else17

then16:                                           ; preds = %ifcont12
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont18

else17:                                           ; preds = %ifcont12
  br label %ifcont18

ifcont18:                                         ; preds = %else17, %then16
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
