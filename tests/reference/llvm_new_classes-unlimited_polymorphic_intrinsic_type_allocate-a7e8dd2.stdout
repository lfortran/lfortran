; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>
%"~unlimited_polymorphic_type" = type <{ i32 (...)**, i8* }>

@_Type_Info_integer_8 = linkonce_odr unnamed_addr constant { i8*, i8* } { i8* inttoptr (i32 8 to i8*), i8* inttoptr (i8 8 to i8*) }, align 8
@_VTable_integer_8 = linkonce_odr unnamed_addr constant { [2 x i8*] } { [2 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_Type_Info_integer_8 to i8*)] }, align 8
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data = private constant [10 x i8] c"integer(8)"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([10 x i8], [10 x i8]* @string_const_data, i32 0, i32 0), i64 10 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@_Type_Info_integer_4 = linkonce_odr unnamed_addr constant { i8*, i8* } { i8* inttoptr (i32 4 to i8*), i8* inttoptr (i8 4 to i8*) }, align 8
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.1 = private constant [10 x i8] c"integer(4)"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([10 x i8], [10 x i8]* @string_const_data.1, i32 0, i32 0), i64 10 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@_Type_Info_real_4 = linkonce_odr unnamed_addr constant { i8*, i8* } { i8* inttoptr (i32 6 to i8*), i8* inttoptr (i8 4 to i8*) }, align 8
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.3 = private constant [4 x i8] c"real"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.3, i32 0, i32 0), i64 4 }>
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.5 = private constant [7 x i8] c"default"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([7 x i8], [7 x i8]* @string_const_data.5, i32 0, i32 0), i64 7 }>
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %x = alloca i64, align 8
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %var = alloca %"~unlimited_polymorphic_type"*, align 8
  store %"~unlimited_polymorphic_type"* null, %"~unlimited_polymorphic_type"** %var, align 8
  %x1 = alloca i64, align 8
  store i64 10, i64* %x1, align 4
  %2 = call i8* @_lfortran_malloc(i64 8)
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 8, i1 false)
  %3 = bitcast i8* %2 to %"~unlimited_polymorphic_type"*
  store %"~unlimited_polymorphic_type"* %3, %"~unlimited_polymorphic_type"** %var, align 8
  %4 = load %"~unlimited_polymorphic_type"*, %"~unlimited_polymorphic_type"** %var, align 8
  %5 = bitcast %"~unlimited_polymorphic_type"* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [2 x i8*] }, { [2 x i8*] }* @_VTable_integer_8, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = bitcast i64* %x1 to i8*
  %7 = getelementptr %"~unlimited_polymorphic_type", %"~unlimited_polymorphic_type"* %4, i32 0, i32 1
  store i8* %6, i8** %7, align 8
  %8 = load %"~unlimited_polymorphic_type"*, %"~unlimited_polymorphic_type"** %var, align 8
  %9 = bitcast %"~unlimited_polymorphic_type"* %8 to i8*
  %10 = call i8* @__lfortran_dynamic_cast(i8* %9, i8* bitcast ({ i8*, i8* }* @_Type_Info_integer_8 to i8*), i1 true)
  %11 = icmp ne i8* %10, null
  br i1 %11, label %then, label %else

then:                                             ; preds = %.entry
  %12 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %12, i32 10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  %13 = load %"~unlimited_polymorphic_type"*, %"~unlimited_polymorphic_type"** %var, align 8
  %14 = bitcast %"~unlimited_polymorphic_type"* %13 to i8*
  %15 = call i8* @__lfortran_dynamic_cast(i8* %14, i8* bitcast ({ i8*, i8* }* @_Type_Info_integer_4 to i8*), i1 true)
  %16 = icmp ne i8* %15, null
  br i1 %16, label %then2, label %else3

then2:                                            ; preds = %else
  %17 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %17, i32 10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  br label %ifcont

else3:                                            ; preds = %else
  %18 = load %"~unlimited_polymorphic_type"*, %"~unlimited_polymorphic_type"** %var, align 8
  %19 = bitcast %"~unlimited_polymorphic_type"* %18 to i8*
  %20 = call i8* @__lfortran_dynamic_cast(i8* %19, i8* bitcast ({ i8*, i8* }* @_Type_Info_real_4 to i8*), i1 true)
  %21 = icmp ne i8* %20, null
  br i1 %21, label %then4, label %else5

then4:                                            ; preds = %else3
  %22 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %22, i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i32 1)
  br label %ifcont

else5:                                            ; preds = %else3
  %23 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.6, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %23, i32 7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0), i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else5, %then4, %then2, %then
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i64)

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #0

declare i8* @__lfortran_dynamic_cast(i8*, i8*, i1)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lpython_free_argv()

attributes #0 = { argmemonly nounwind willreturn writeonly }
