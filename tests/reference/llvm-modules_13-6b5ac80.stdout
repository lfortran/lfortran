; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @__module_module_13_f1() {
.entry:
  %f1 = alloca i32, align 4
  %0 = call i32 @__module_module_13_f2()
  store i32 %0, i32* %f1, align 4
  br label %return

return:                                           ; preds = %.entry
  %1 = load i32, i32* %f1, align 4
  ret i32 %1
}

define i32 @__module_module_13_f2() {
.entry:
  %f2 = alloca i32, align 4
  store i32 5, i32* %f2, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %f2, align 4
  ret i32 %0
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %f = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %f1 = alloca i32, align 4
  %2 = call i32 @__module_module_13_f1()
  store i32 %2, i32* %f1, align 4
  %3 = alloca i64, align 8
  %4 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i64* %3, i32 0, i32 0, i32* %f1)
  %5 = load i64, i64* %3, align 4
  %6 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %6 to %string_descriptor*
  %7 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %4, i8** %7, align 8
  %8 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %5, i64* %8, align 4
  %9 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %12 = load i64, i64* %11, align 4
  %13 = trunc i64 %12 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %10, i32 %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lpython_free_argv()
