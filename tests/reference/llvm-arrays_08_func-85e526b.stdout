; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@5 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value8 = alloca i32, align 4
  %call_arg_value7 = alloca i32, align 4
  %call_arg_value6 = alloca i32, align 4
  %call_arg_value5 = alloca i32, align 4
  %call_arg_value4 = alloca i32, align 4
  %call_arg_value3 = alloca i32, align 4
  %call_arg_value2 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %i = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %i1 = alloca i32, align 4
  %r = alloca i1, align 1
  %x = alloca [10 x i32], align 4
  %y = alloca [10 x i32], align 4
  store i32 0, i32* %i1, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %2 = load i32, i32* %i1, align 4
  %3 = add i32 %2, 1
  %4 = icmp sle i32 %3, 10
  br i1 %4, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %5 = load i32, i32* %i1, align 4
  %6 = add i32 %5, 1
  store i32 %6, i32* %i1, align 4
  %7 = load i32, i32* %i1, align 4
  %8 = sub i32 %7, 1
  %9 = mul i32 1, %8
  %10 = add i32 0, %9
  %11 = getelementptr [10 x i32], [10 x i32]* %x, i32 0, i32 %10
  %12 = load i32, i32* %i1, align 4
  store i32 %12, i32* %11, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %13 = getelementptr [10 x i32], [10 x i32]* %x, i32 0, i32 0
  store i32 1, i32* %call_arg_value, align 4
  store i32 10, i32* %call_arg_value2, align 4
  %14 = getelementptr [10 x i32], [10 x i32]* %y, i32 0, i32 0
  store i32 1, i32* %call_arg_value3, align 4
  store i32 10, i32* %call_arg_value4, align 4
  call void @copy_from_to_integer____0_integer____1(i32* %13, i32* %call_arg_value, i32* %call_arg_value2, i32* %14, i32* %call_arg_value3, i32* %call_arg_value4)
  %15 = getelementptr [10 x i32], [10 x i32]* %x, i32 0, i32 0
  store i32 1, i32* %call_arg_value5, align 4
  store i32 10, i32* %call_arg_value6, align 4
  %16 = getelementptr [10 x i32], [10 x i32]* %y, i32 0, i32 0
  store i32 1, i32* %call_arg_value7, align 4
  store i32 10, i32* %call_arg_value8, align 4
  %17 = call i1 @verify_integer____0_integer____1(i32* %15, i32* %call_arg_value5, i32* %call_arg_value6, i32* %16, i32* %call_arg_value7, i32* %call_arg_value8)
  store i1 %17, i1* %r, align 1
  %18 = load i1, i1* %r, align 1
  %19 = icmp eq i1 %18, false
  %20 = select i1 %19, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0)
  %21 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 2, i8* null, i32 8, i8* %20)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i8* %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %22 = load i1, i1* %r, align 1
  %23 = xor i1 %22, true
  br i1 %23, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

define void @copy_from_to_integer____0_integer____1(i32* %a, i32* %__1a, i32* %__2a, i32* %b, i32* %__1b, i32* %__2b) {
.entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = load i32, i32* %__2a, align 4
  %3 = mul i32 1, %2
  %4 = icmp sle i32 %1, %3
  br i1 %4, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %5 = load i32, i32* %i, align 4
  %6 = add i32 %5, 1
  store i32 %6, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %__1b, align 4
  %9 = load i32, i32* %__2b, align 4
  %10 = sub i32 %7, %8
  %11 = mul i32 1, %10
  %12 = add i32 0, %11
  %13 = mul i32 1, %9
  %14 = getelementptr inbounds i32, i32* %b, i32 %12
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %__1a, align 4
  %17 = load i32, i32* %__2a, align 4
  %18 = sub i32 %15, %16
  %19 = mul i32 1, %18
  %20 = add i32 0, %19
  %21 = mul i32 1, %17
  %22 = getelementptr inbounds i32, i32* %a, i32 %20
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %14, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  ret void
}

define i1 @verify_integer____0_integer____1(i32* %a, i32* %__1a, i32* %__2a, i32* %b, i32* %__1b, i32* %__2b) {
.entry:
  %i = alloca i32, align 4
  %r = alloca i1, align 1
  store i1 true, i1* %r, align 1
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = load i32, i32* %__2a, align 4
  %3 = mul i32 1, %2
  %4 = icmp sle i32 %1, %3
  br i1 %4, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %5 = load i32, i32* %i, align 4
  %6 = add i32 %5, 1
  store i32 %6, i32* %i, align 4
  %7 = load i1, i1* %r, align 1
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %__1a, align 4
  %10 = load i32, i32* %__2a, align 4
  %11 = sub i32 %8, %9
  %12 = mul i32 1, %11
  %13 = add i32 0, %12
  %14 = mul i32 1, %10
  %15 = getelementptr inbounds i32, i32* %a, i32 %13
  %16 = load i32, i32* %15, align 4
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %__1b, align 4
  %19 = load i32, i32* %__2b, align 4
  %20 = sub i32 %17, %18
  %21 = mul i32 1, %20
  %22 = add i32 0, %21
  %23 = mul i32 1, %19
  %24 = getelementptr inbounds i32, i32* %b, i32 %22
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %16, %25
  %27 = icmp eq i1 %7, false
  %28 = select i1 %27, i1 %7, i1 %26
  store i1 %28, i1* %r, align 1
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %29 = load i1, i1* %r, align 1
  ret i1 %29
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
