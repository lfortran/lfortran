; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@5 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define void @copy_from_to_a_b(i32* %a, i32* %__1a, i32* %__2a, i32* %b, i32* %__1b, i32* %__2b) {
.entry:
  %i = alloca i32
  store i32 0, i32* %i
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %i
  %1 = add i32 %0, 1
  %2 = load i32, i32* %__2a
  %3 = mul i32 1, %2
  %4 = icmp sle i32 %1, %3
  br i1 %4, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %5 = load i32, i32* %i
  %6 = add i32 %5, 1
  store i32 %6, i32* %i
  %7 = load i32, i32* %i
  %8 = load i32, i32* %__1b
  %9 = load i32, i32* %__2b
  %10 = sub i32 %7, %8
  %11 = mul i32 1, %10
  %12 = add i32 0, %11
  %13 = mul i32 1, %9
  %14 = getelementptr inbounds i32, i32* %b, i32 %12
  %15 = load i32, i32* %i
  %16 = load i32, i32* %__1a
  %17 = load i32, i32* %__2a
  %18 = sub i32 %15, %16
  %19 = mul i32 1, %18
  %20 = add i32 0, %19
  %21 = mul i32 1, %17
  %22 = getelementptr inbounds i32, i32* %a, i32 %20
  %23 = load i32, i32* %22
  store i32 %23, i32* %14
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  ret void
}

define i1 @verify_a_b(i32* %a, i32* %__1a, i32* %__2a, i32* %b, i32* %__1b, i32* %__2b) {
.entry:
  %i = alloca i32
  %r = alloca i1
  store i1 true, i1* %r
  store i32 0, i32* %i
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %i
  %1 = add i32 %0, 1
  %2 = load i32, i32* %__2a
  %3 = mul i32 1, %2
  %4 = icmp sle i32 %1, %3
  br i1 %4, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %5 = load i32, i32* %i
  %6 = add i32 %5, 1
  store i32 %6, i32* %i
  %7 = load i1, i1* %r
  %8 = load i32, i32* %i
  %9 = load i32, i32* %__1a
  %10 = load i32, i32* %__2a
  %11 = sub i32 %8, %9
  %12 = mul i32 1, %11
  %13 = add i32 0, %12
  %14 = mul i32 1, %10
  %15 = getelementptr inbounds i32, i32* %a, i32 %13
  %16 = load i32, i32* %15
  %17 = load i32, i32* %i
  %18 = load i32, i32* %__1b
  %19 = load i32, i32* %__2b
  %20 = sub i32 %17, %18
  %21 = mul i32 1, %20
  %22 = add i32 0, %21
  %23 = mul i32 1, %19
  %24 = getelementptr inbounds i32, i32* %b, i32 %22
  %25 = load i32, i32* %24
  %26 = icmp eq i32 %16, %25
  %27 = and i1 %7, %26
  store i1 %27, i1* %r
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %28 = load i1, i1* %r
  ret i1 %28
}

define i32 @main() {
.entry:
  %call_arg_value7 = alloca i32
  %call_arg_value6 = alloca i32
  %call_arg_value5 = alloca i32
  %call_arg_value4 = alloca i32
  %call_arg_value3 = alloca i32
  %call_arg_value2 = alloca i32
  %call_arg_value1 = alloca i32
  %call_arg_value = alloca i32
  %i = alloca i32
  %r = alloca i1
  %x = alloca %array
  %0 = getelementptr %array, %array* %x, i32 0, i32 1
  store i32 0, i32* %0
  %1 = getelementptr %array, %array* %x, i32 0, i32 2
  %2 = alloca i32
  store i32 1, i32* %2
  %3 = load i32, i32* %2
  %4 = alloca %dimension_descriptor, i32 %3
  %5 = getelementptr %array, %array* %x, i32 0, i32 4
  store i32 1, i32* %5
  store %dimension_descriptor* %4, %dimension_descriptor** %1
  %6 = load %dimension_descriptor*, %dimension_descriptor** %1
  %7 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %6, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 1
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 2
  store i32 1, i32* %8
  store i32 1, i32* %9
  store i32 10, i32* %10
  %11 = alloca i32
  store i32 10, i32* %11
  %12 = getelementptr %array, %array* %x, i32 0, i32 0
  %13 = load i32, i32* %11
  %14 = alloca i32, i32 %13
  store i32* %14, i32** %12
  %y = alloca %array
  %15 = getelementptr %array, %array* %y, i32 0, i32 1
  store i32 0, i32* %15
  %16 = getelementptr %array, %array* %y, i32 0, i32 2
  %17 = alloca i32
  store i32 1, i32* %17
  %18 = load i32, i32* %17
  %19 = alloca %dimension_descriptor, i32 %18
  %20 = getelementptr %array, %array* %y, i32 0, i32 4
  store i32 1, i32* %20
  store %dimension_descriptor* %19, %dimension_descriptor** %16
  %21 = load %dimension_descriptor*, %dimension_descriptor** %16
  %22 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %21, i32 0
  %23 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 0
  %24 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 1
  %25 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 2
  store i32 1, i32* %23
  store i32 1, i32* %24
  store i32 10, i32* %25
  %26 = alloca i32
  store i32 10, i32* %26
  %27 = getelementptr %array, %array* %y, i32 0, i32 0
  %28 = load i32, i32* %26
  %29 = alloca i32, i32 %28
  store i32* %29, i32** %27
  store i32 0, i32* %i
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %30 = load i32, i32* %i
  %31 = add i32 %30, 1
  %32 = icmp sle i32 %31, 10
  br i1 %32, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %33 = load i32, i32* %i
  %34 = add i32 %33, 1
  store i32 %34, i32* %i
  %35 = load i32, i32* %i
  %36 = getelementptr %array, %array* %x, i32 0, i32 2
  %37 = load %dimension_descriptor*, %dimension_descriptor** %36
  %38 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %37, i32 0
  %39 = getelementptr %dimension_descriptor, %dimension_descriptor* %38, i32 0, i32 1
  %40 = load i32, i32* %39
  %41 = sub i32 %35, %40
  %42 = mul i32 1, %41
  %43 = add i32 0, %42
  %44 = getelementptr %dimension_descriptor, %dimension_descriptor* %38, i32 0, i32 2
  %45 = load i32, i32* %44
  %46 = mul i32 1, %45
  %47 = getelementptr %array, %array* %x, i32 0, i32 0
  %48 = load i32*, i32** %47
  %49 = getelementptr inbounds i32, i32* %48, i32 %43
  %50 = load i32, i32* %i
  store i32 %50, i32* %49
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %51 = getelementptr %array, %array* %x, i32 0, i32 0
  %52 = load i32*, i32** %51
  store i32 1, i32* %call_arg_value
  store i32 10, i32* %call_arg_value1
  %53 = getelementptr %array, %array* %y, i32 0, i32 0
  %54 = load i32*, i32** %53
  store i32 1, i32* %call_arg_value2
  store i32 10, i32* %call_arg_value3
  call void @copy_from_to_a_b(i32* %52, i32* %call_arg_value, i32* %call_arg_value1, i32* %54, i32* %call_arg_value2, i32* %call_arg_value3)
  %55 = getelementptr %array, %array* %x, i32 0, i32 0
  %56 = load i32*, i32** %55
  store i32 1, i32* %call_arg_value4
  store i32 10, i32* %call_arg_value5
  %57 = getelementptr %array, %array* %y, i32 0, i32 0
  %58 = load i32*, i32** %57
  store i32 1, i32* %call_arg_value6
  store i32 10, i32* %call_arg_value7
  %59 = call i1 @verify_a_b(i32* %56, i32* %call_arg_value4, i32* %call_arg_value5, i32* %58, i32* %call_arg_value6, i32* %call_arg_value7)
  store i1 %59, i1* %r
  %60 = load i1, i1* %r
  %61 = icmp eq i1 %60, false
  %62 = select i1 %61, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i8* %62, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %63 = load i1, i1* %r
  %64 = xor i1 %63, true
  br i1 %64, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
