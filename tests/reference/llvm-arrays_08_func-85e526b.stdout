; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@5 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define void @copy_from_to(%array* %a, %array* %b) {
.entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body2, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = getelementptr %array, %array* %a, i32 0, i32 2
  %3 = load %dimension_descriptor*, %dimension_descriptor** %2, align 8
  %4 = getelementptr %array, %array* %a, i32 0, i32 4
  %5 = load i32, i32* %4, align 4
  %6 = alloca i32, align 4
  store i32 1, i32* %6, align 4
  %7 = alloca i32, align 4
  store i32 0, i32* %7, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %loop.body, %loop.head
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, %5
  br i1 %9, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head1
  %10 = load i32, i32* %7, align 4
  %11 = load i32, i32* %6, align 4
  %12 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %3, i32 %10
  %13 = getelementptr %dimension_descriptor, %dimension_descriptor* %12, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = mul i32 %11, %14
  store i32 %15, i32* %6, align 4
  %16 = add i32 %10, 1
  store i32 %16, i32* %7, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %17 = load i32, i32* %6, align 4
  %18 = icmp sle i32 %1, %17
  br i1 %18, label %loop.body2, label %loop.end3

loop.body2:                                       ; preds = %loop.end
  %19 = load i32, i32* %i, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* %i, align 4
  %21 = load i32, i32* %i, align 4
  %22 = getelementptr %array, %array* %b, i32 0, i32 2
  %23 = load %dimension_descriptor*, %dimension_descriptor** %22, align 8
  %24 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %23, i32 0
  %25 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = sub i32 %21, %26
  %28 = mul i32 1, %27
  %29 = add i32 0, %28
  %30 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = mul i32 1, %31
  %33 = getelementptr %array, %array* %b, i32 0, i32 0
  %34 = load i32*, i32** %33, align 8
  %35 = getelementptr inbounds i32, i32* %34, i32 %29
  %36 = load i32, i32* %i, align 4
  %37 = getelementptr %array, %array* %a, i32 0, i32 2
  %38 = load %dimension_descriptor*, %dimension_descriptor** %37, align 8
  %39 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %38, i32 0
  %40 = getelementptr %dimension_descriptor, %dimension_descriptor* %39, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = sub i32 %36, %41
  %43 = mul i32 1, %42
  %44 = add i32 0, %43
  %45 = getelementptr %dimension_descriptor, %dimension_descriptor* %39, i32 0, i32 2
  %46 = load i32, i32* %45, align 4
  %47 = mul i32 1, %46
  %48 = getelementptr %array, %array* %a, i32 0, i32 0
  %49 = load i32*, i32** %48, align 8
  %50 = getelementptr inbounds i32, i32* %49, i32 %44
  %51 = load i32, i32* %50, align 4
  store i32 %51, i32* %35, align 4
  br label %loop.head

loop.end3:                                        ; preds = %loop.end
  br label %return

return:                                           ; preds = %loop.end3
  ret void
}

define i1 @verify(%array* %a, %array* %b) {
.entry:
  %i = alloca i32, align 4
  %r = alloca i1, align 1
  store i1 true, i1* %r, align 1
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body2, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = getelementptr %array, %array* %a, i32 0, i32 2
  %3 = load %dimension_descriptor*, %dimension_descriptor** %2, align 8
  %4 = getelementptr %array, %array* %a, i32 0, i32 4
  %5 = load i32, i32* %4, align 4
  %6 = alloca i32, align 4
  store i32 1, i32* %6, align 4
  %7 = alloca i32, align 4
  store i32 0, i32* %7, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %loop.body, %loop.head
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, %5
  br i1 %9, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head1
  %10 = load i32, i32* %7, align 4
  %11 = load i32, i32* %6, align 4
  %12 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %3, i32 %10
  %13 = getelementptr %dimension_descriptor, %dimension_descriptor* %12, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = mul i32 %11, %14
  store i32 %15, i32* %6, align 4
  %16 = add i32 %10, 1
  store i32 %16, i32* %7, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %17 = load i32, i32* %6, align 4
  %18 = icmp sle i32 %1, %17
  br i1 %18, label %loop.body2, label %loop.end3

loop.body2:                                       ; preds = %loop.end
  %19 = load i32, i32* %i, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* %i, align 4
  %21 = load i1, i1* %r, align 1
  %22 = load i32, i32* %i, align 4
  %23 = getelementptr %array, %array* %a, i32 0, i32 2
  %24 = load %dimension_descriptor*, %dimension_descriptor** %23, align 8
  %25 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %24, i32 0
  %26 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = sub i32 %22, %27
  %29 = mul i32 1, %28
  %30 = add i32 0, %29
  %31 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = mul i32 1, %32
  %34 = getelementptr %array, %array* %a, i32 0, i32 0
  %35 = load i32*, i32** %34, align 8
  %36 = getelementptr inbounds i32, i32* %35, i32 %30
  %37 = load i32, i32* %36, align 4
  %38 = load i32, i32* %i, align 4
  %39 = getelementptr %array, %array* %b, i32 0, i32 2
  %40 = load %dimension_descriptor*, %dimension_descriptor** %39, align 8
  %41 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %40, i32 0
  %42 = getelementptr %dimension_descriptor, %dimension_descriptor* %41, i32 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = sub i32 %38, %43
  %45 = mul i32 1, %44
  %46 = add i32 0, %45
  %47 = getelementptr %dimension_descriptor, %dimension_descriptor* %41, i32 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = mul i32 1, %48
  %50 = getelementptr %array, %array* %b, i32 0, i32 0
  %51 = load i32*, i32** %50, align 8
  %52 = getelementptr inbounds i32, i32* %51, i32 %46
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %37, %53
  %55 = and i1 %21, %54
  store i1 %55, i1* %r, align 1
  br label %loop.head

loop.end3:                                        ; preds = %loop.end
  br label %return

return:                                           ; preds = %loop.end3
  %56 = load i1, i1* %r, align 1
  ret i1 %56
}

define i32 @main() {
.entry:
  %i = alloca i32, align 4
  %r = alloca i1, align 1
  %x = alloca %array, align 8
  %0 = getelementptr %array, %array* %x, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array, %array* %x, i32 0, i32 2
  %2 = alloca i32, align 4
  store i32 1, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = alloca %dimension_descriptor, i32 %3, align 8
  %5 = getelementptr %array, %array* %x, i32 0, i32 4
  store i32 1, i32* %5, align 4
  store %dimension_descriptor* %4, %dimension_descriptor** %1, align 8
  %6 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %7 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %6, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 1
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 2
  store i32 1, i32* %8, align 4
  store i32 1, i32* %9, align 4
  store i32 10, i32* %10, align 4
  %11 = alloca i32, align 4
  store i32 10, i32* %11, align 4
  %12 = getelementptr %array, %array* %x, i32 0, i32 0
  %13 = load i32, i32* %11, align 4
  %14 = alloca i32, i32 %13, align 4
  store i32* %14, i32** %12, align 8
  %y = alloca %array, align 8
  %15 = getelementptr %array, %array* %y, i32 0, i32 1
  store i32 0, i32* %15, align 4
  %16 = getelementptr %array, %array* %y, i32 0, i32 2
  %17 = alloca i32, align 4
  store i32 1, i32* %17, align 4
  %18 = load i32, i32* %17, align 4
  %19 = alloca %dimension_descriptor, i32 %18, align 8
  %20 = getelementptr %array, %array* %y, i32 0, i32 4
  store i32 1, i32* %20, align 4
  store %dimension_descriptor* %19, %dimension_descriptor** %16, align 8
  %21 = load %dimension_descriptor*, %dimension_descriptor** %16, align 8
  %22 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %21, i32 0
  %23 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 0
  %24 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 1
  %25 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 2
  store i32 1, i32* %23, align 4
  store i32 1, i32* %24, align 4
  store i32 10, i32* %25, align 4
  %26 = alloca i32, align 4
  store i32 10, i32* %26, align 4
  %27 = getelementptr %array, %array* %y, i32 0, i32 0
  %28 = load i32, i32* %26, align 4
  %29 = alloca i32, i32 %28, align 4
  store i32* %29, i32** %27, align 8
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body2, %.entry
  %30 = load i32, i32* %i, align 4
  %31 = add i32 %30, 1
  %32 = getelementptr %array, %array* %x, i32 0, i32 2
  %33 = load %dimension_descriptor*, %dimension_descriptor** %32, align 8
  %34 = getelementptr %array, %array* %x, i32 0, i32 4
  %35 = load i32, i32* %34, align 4
  %36 = alloca i32, align 4
  store i32 1, i32* %36, align 4
  %37 = alloca i32, align 4
  store i32 0, i32* %37, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %loop.body, %loop.head
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, %35
  br i1 %39, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head1
  %40 = load i32, i32* %37, align 4
  %41 = load i32, i32* %36, align 4
  %42 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %33, i32 %40
  %43 = getelementptr %dimension_descriptor, %dimension_descriptor* %42, i32 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = mul i32 %41, %44
  store i32 %45, i32* %36, align 4
  %46 = add i32 %40, 1
  store i32 %46, i32* %37, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %47 = load i32, i32* %36, align 4
  %48 = icmp sle i32 %31, %47
  br i1 %48, label %loop.body2, label %loop.end3

loop.body2:                                       ; preds = %loop.end
  %49 = load i32, i32* %i, align 4
  %50 = add i32 %49, 1
  store i32 %50, i32* %i, align 4
  %51 = load i32, i32* %i, align 4
  %52 = getelementptr %array, %array* %x, i32 0, i32 2
  %53 = load %dimension_descriptor*, %dimension_descriptor** %52, align 8
  %54 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %53, i32 0
  %55 = getelementptr %dimension_descriptor, %dimension_descriptor* %54, i32 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 %51, %56
  %58 = mul i32 1, %57
  %59 = add i32 0, %58
  %60 = getelementptr %dimension_descriptor, %dimension_descriptor* %54, i32 0, i32 2
  %61 = load i32, i32* %60, align 4
  %62 = mul i32 1, %61
  %63 = getelementptr %array, %array* %x, i32 0, i32 0
  %64 = load i32*, i32** %63, align 8
  %65 = getelementptr inbounds i32, i32* %64, i32 %59
  %66 = load i32, i32* %i, align 4
  store i32 %66, i32* %65, align 4
  br label %loop.head

loop.end3:                                        ; preds = %loop.end
  %67 = alloca %array, align 8
  %68 = alloca %array, align 8
  call void @copy_from_to(%array* %x, %array* %y)
  %69 = alloca %array, align 8
  %70 = alloca %array, align 8
  %71 = call i1 @verify(%array* %x, %array* %y)
  store i1 %71, i1* %r, align 1
  %72 = load i1, i1* %r, align 1
  %73 = icmp eq i1 %72, false
  %74 = select i1 %73, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i8* %74, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %75 = load i1, i1* %r, align 1
  %76 = xor i1 %75, true
  br i1 %76, label %then, label %else

then:                                             ; preds = %loop.end3
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end3
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)
