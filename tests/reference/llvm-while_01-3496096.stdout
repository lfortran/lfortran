; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@9 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@12 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@15 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@17 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %i1 = alloca i32, align 4
  %j2 = alloca i32, align 4
  store i32 1, i32* %i1, align 4
  store i32 0, i32* %j2, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %2 = load i32, i32* %i1, align 4
  %3 = icmp slt i32 %2, 11
  br i1 %3, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %4 = load i32, i32* %j2, align 4
  %5 = load i32, i32* %i1, align 4
  %6 = add i32 %4, %5
  store i32 %6, i32* %j2, align 4
  %7 = load i32, i32* %i1, align 4
  %8 = add i32 %7, 1
  store i32 %8, i32* %i1, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %9 = load i32, i32* %j2, align 4
  %10 = icmp ne i32 %9, 55
  br i1 %10, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %11 = load i32, i32* %i1, align 4
  %12 = icmp ne i32 %11, 11
  br i1 %12, label %then3, label %else4

then3:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont5

else4:                                            ; preds = %ifcont
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  store i32 1, i32* %i1, align 4
  store i32 0, i32* %j2, align 4
  br label %loop.head6

loop.head6:                                       ; preds = %loop.body7, %ifcont5
  %13 = load i32, i32* %i1, align 4
  %14 = icmp sle i32 %13, 10
  br i1 %14, label %loop.body7, label %loop.end8

loop.body7:                                       ; preds = %loop.head6
  %15 = load i32, i32* %j2, align 4
  %16 = load i32, i32* %i1, align 4
  %17 = add i32 %15, %16
  store i32 %17, i32* %j2, align 4
  %18 = load i32, i32* %i1, align 4
  %19 = add i32 %18, 1
  store i32 %19, i32* %i1, align 4
  br label %loop.head6

loop.end8:                                        ; preds = %loop.head6
  %20 = load i32, i32* %j2, align 4
  %21 = icmp ne i32 %20, 55
  br i1 %21, label %then9, label %else10

then9:                                            ; preds = %loop.end8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont11

else10:                                           ; preds = %loop.end8
  br label %ifcont11

ifcont11:                                         ; preds = %else10, %then9
  %22 = load i32, i32* %i1, align 4
  %23 = icmp ne i32 %22, 11
  br i1 %23, label %then12, label %else13

then12:                                           ; preds = %ifcont11
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont14

else13:                                           ; preds = %ifcont11
  br label %ifcont14

ifcont14:                                         ; preds = %else13, %then12
  store i32 1, i32* %i1, align 4
  store i32 0, i32* %j2, align 4
  br label %loop.head15

loop.head15:                                      ; preds = %loop.body16, %ifcont14
  %24 = load i32, i32* %i1, align 4
  %25 = icmp slt i32 %24, 1
  br i1 %25, label %loop.body16, label %loop.end17

loop.body16:                                      ; preds = %loop.head15
  %26 = load i32, i32* %j2, align 4
  %27 = load i32, i32* %i1, align 4
  %28 = add i32 %26, %27
  store i32 %28, i32* %j2, align 4
  %29 = load i32, i32* %i1, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %i1, align 4
  br label %loop.head15

loop.end17:                                       ; preds = %loop.head15
  %31 = load i32, i32* %j2, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %then18, label %else19

then18:                                           ; preds = %loop.end17
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @14, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont20

else19:                                           ; preds = %loop.end17
  br label %ifcont20

ifcont20:                                         ; preds = %else19, %then18
  %33 = load i32, i32* %i1, align 4
  %34 = icmp ne i32 %33, 1
  br i1 %34, label %then21, label %else22

then21:                                           ; preds = %ifcont20
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont23

else22:                                           ; preds = %ifcont20
  br label %ifcont23

ifcont23:                                         ; preds = %else22, %then21
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont23
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
