; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [12 x i8] c"I4,I4,I4,R4\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [5 x i8] c"[R4]\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.2 = private unnamed_addr constant [5 x i8] c"[R4]\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.3 = private unnamed_addr constant [10 x i8] c"[R4],[I4]\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %array_bound7 = alloca i32, align 4
  %array_bound = alloca i32, align 4
  %__1_k = alloca i32, align 4
  %__libasr_index_0_ = alloca i32, align 4
  %boz_1 = alloca i32, align 4
  %boz_2 = alloca i32, align 4
  %boz_3 = alloca i32, align 4
  %i = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %__1_k1 = alloca i32, align 4
  %__libasr_index_0_2 = alloca i32, align 4
  %arr1 = alloca [2 x float], align 4
  %arr2 = alloca [2 x i32], align 4
  %boz_13 = alloca i32, align 4
  %boz_24 = alloca i32, align 4
  %boz_35 = alloca i32, align 4
  %boz_4 = alloca float, align 4
  %i6 = alloca i32, align 4
  %matrix1 = alloca [5 x float], align 4
  %matrix2 = alloca [5 x float], align 4
  store float 0x3707400000000000, float* %boz_4, align 4
  store i32 1, i32* %__1_k1, align 4
  %2 = load i32, i32* %__1_k1, align 4
  %3 = sub i32 %2, 1
  %4 = mul i32 1, %3
  %5 = add i32 0, %4
  %6 = getelementptr [5 x float], [5 x float]* %matrix1, i32 0, i32 %5
  store float 0x36B0000000000000, float* %6, align 4
  store i32 2, i32* %__1_k1, align 4
  %7 = load i32, i32* %__1_k1, align 4
  %8 = sub i32 %7, 1
  %9 = mul i32 1, %8
  %10 = add i32 0, %9
  %11 = getelementptr [5 x float], [5 x float]* %matrix1, i32 0, i32 %10
  store float 0x3700000000000000, float* %11, align 4
  store i32 3, i32* %__1_k1, align 4
  %12 = load i32, i32* %__1_k1, align 4
  %13 = sub i32 %12, 1
  %14 = mul i32 1, %13
  %15 = add i32 0, %14
  %16 = getelementptr [5 x float], [5 x float]* %matrix1, i32 0, i32 %15
  store float 0x3700000000000000, float* %16, align 4
  store i32 4, i32* %__1_k1, align 4
  %17 = load i32, i32* %__1_k1, align 4
  %18 = sub i32 %17, 1
  %19 = mul i32 1, %18
  %20 = add i32 0, %19
  %21 = getelementptr [5 x float], [5 x float]* %matrix1, i32 0, i32 %20
  store float 0x4008F5C280000000, float* %21, align 4
  store i32 5, i32* %__1_k1, align 4
  %22 = load i32, i32* %__1_k1, align 4
  %23 = sub i32 %22, 1
  %24 = mul i32 1, %23
  %25 = add i32 0, %24
  %26 = getelementptr [5 x float], [5 x float]* %matrix1, i32 0, i32 %25
  store float 0x3755780000000000, float* %26, align 4
  store i32 93, i32* %boz_13, align 4
  store i32 1255, i32* %boz_24, align 4
  store i32 2748, i32* %boz_35, align 4
  store float 0x3707400000000000, float* %boz_4, align 4
  br i1 true, label %then, label %else

then:                                             ; preds = %.entry
  store i32 1, i32* %array_bound, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %27 = load i32, i32* %array_bound, align 4
  %28 = sub i32 %27, 1
  store i32 %28, i32* %__libasr_index_0_2, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %ifcont
  %29 = load i32, i32* %__libasr_index_0_2, align 4
  %30 = add i32 %29, 1
  br i1 true, label %then8, label %else9

then8:                                            ; preds = %loop.head
  store i32 5, i32* %array_bound7, align 4
  br label %ifcont10

else9:                                            ; preds = %loop.head
  br label %ifcont10

ifcont10:                                         ; preds = %else9, %then8
  %31 = load i32, i32* %array_bound7, align 4
  %32 = icmp sle i32 %30, %31
  br i1 %32, label %loop.body, label %loop.end

loop.body:                                        ; preds = %ifcont10
  %33 = load i32, i32* %__libasr_index_0_2, align 4
  %34 = add i32 %33, 1
  store i32 %34, i32* %__libasr_index_0_2, align 4
  %35 = load i32, i32* %__libasr_index_0_2, align 4
  %36 = sub i32 %35, 1
  %37 = mul i32 1, %36
  %38 = add i32 0, %37
  %39 = getelementptr [5 x float], [5 x float]* %matrix2, i32 0, i32 %38
  store float 0x36B0000000000000, float* %39, align 4
  br label %loop.head

loop.end:                                         ; preds = %ifcont10
  %40 = getelementptr [2 x float], [2 x float]* %arr1, i32 0, i32 0
  store float 0x3FF3333340000000, float* %40, align 4
  %41 = getelementptr [2 x i32], [2 x i32]* %arr2, i32 0, i32 0
  store i32 2, i32* %41, align 4
  %42 = getelementptr [2 x float], [2 x float]* %arr1, i32 0, i32 1
  store float 0x36A0000000000000, float* %42, align 4
  %43 = getelementptr [2 x i32], [2 x i32]* %arr2, i32 0, i32 1
  store i32 3, i32* %43, align 4
  %44 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i32* %boz_13, i32* %boz_24, i32* %boz_35, float* %boz_4)
  %45 = call i64 @_lfortran_str_len(i8* %44)
  %46 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %46 to %string_descriptor*
  %47 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %44, i8** %47, align 8
  %48 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %45, i64* %48, align 4
  %49 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  %51 = getelementptr [5 x float], [5 x float]* %matrix1, i32 0, i32 0
  %52 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @serialization_info.1, i32 0, i32 0), i32 1, i32 0, i64 5, float* %51)
  %53 = call i64 @_lfortran_str_len(i8* %52)
  %54 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc11 = bitcast i8* %54 to %string_descriptor*
  %55 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc11, i32 0, i32 0
  store i8* %52, i8** %55, align 8
  %56 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc11, i32 0, i32 1
  store i64 %53, i64* %56, align 4
  %57 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc11, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %58, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  %59 = getelementptr [5 x float], [5 x float]* %matrix2, i32 0, i32 0
  %60 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @serialization_info.2, i32 0, i32 0), i32 1, i32 0, i64 5, float* %59)
  %61 = call i64 @_lfortran_str_len(i8* %60)
  %62 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc12 = bitcast i8* %62 to %string_descriptor*
  %63 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc12, i32 0, i32 0
  store i8* %60, i8** %63, align 8
  %64 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc12, i32 0, i32 1
  store i64 %61, i64* %64, align 4
  %65 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc12, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %66, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %67 = getelementptr [2 x float], [2 x float]* %arr1, i32 0, i32 0
  %68 = getelementptr [2 x i32], [2 x i32]* %arr2, i32 0, i32 0
  %69 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @serialization_info.3, i32 0, i32 0), i32 2, i32 0, i64 2, i64 2, float* %67, i32* %68)
  %70 = call i64 @_lfortran_str_len(i8* %69)
  %71 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc13 = bitcast i8* %71 to %string_descriptor*
  %72 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc13, i32 0, i32 0
  store i8* %69, i8** %72, align 8
  %73 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc13, i32 0, i32 1
  store i64 %70, i64* %73, align 4
  %74 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc13, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %75, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %loop.end
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_free_argv()
