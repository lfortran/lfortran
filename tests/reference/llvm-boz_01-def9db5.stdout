; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [13 x i8] c"%d%s%d%s%d%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %__libasr_created_variable_ = alloca i32, align 4
  %__libasr_created_variable_1 = alloca i32, align 4
  %__libasr_created_variable_2 = alloca i32, align 4
  %boz_1 = alloca i32, align 4
  %boz_2 = alloca i32, align 4
  %boz_3 = alloca i32, align 4
  store i32 93, i32* %boz_1, align 4
  store i32 1255, i32* %boz_2, align 4
  store i32 2748, i32* %boz_3, align 4
  %2 = load i32, i32* %boz_1, align 4
  %3 = load i32, i32* %boz_2, align 4
  %4 = load i32, i32* %boz_3, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i32 0, i32 0), i32 %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)
