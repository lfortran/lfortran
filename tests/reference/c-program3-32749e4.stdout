
#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <lfortran_intrinsics.h>

#define ASSERT(cond)                                                           \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            exit(1);                                                           \
        }                                                                      \
    }
#define ASSERT_MSG(cond, msg)                                                  \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            printf("%s", "ERROR MESSAGE:\n");                                  \
            printf("%s%s", msg, "\n");                                         \
            exit(1);                                                           \
        }                                                                      \
    }


struct dimension_descriptor
{
    int32_t lower_bound, length;
};

// Implementations
float func2(float a, float b)
{
    float c;
    c = a*b;
    return c;
}

float func1(float a, float b)
{
    float c;
    c = a + b;
    c = func2(c, c);
    return c;
}

int main(int argc, char* argv[])
{
    _lpython_set_argv(argc, argv);
    float x;
    float y;
    float z;
    x =   5.00000000000000000e+00;
    y =   2.00000000000000000e+00;
    z = x*y;
    printf("%s%s%f\n", "10.0 ==", " ", z);
    z = func1(x, y);
    printf("%s%s%f\n", "49.0 ==", " ", z);
    z = func2(x, y);
    printf("%s%s%f\n", "10.0 ==", " ", z);
    return 0;
}
