; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data = private constant [3 x i8] c"d()"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([3 x i8], [3 x i8]* @string_const_data, i32 0, i32 0), i64 3 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.1 = private constant [3 x i8] c"b()"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([3 x i8], [3 x i8]* @string_const_data.1, i32 0, i32 0), i64 3 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @__module_nested_01_a_b() {
.entry:
  %b = alloca i32, align 4
  %e = alloca i32, align 4
  %0 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %0, i32 3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  %1 = call i32 @b.__module_nested_01_a_d()
  store i32 %1, i32* %e, align 4
  store i32 0, i32* %b, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load i32, i32* %b, align 4
  ret i32 %2
}

define i32 @b.__module_nested_01_a_d() {
.entry:
  %d = alloca i32, align 4
  %0 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %0, i32 3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  store i32 1, i32* %d, align 4
  br label %return

return:                                           ; preds = %.entry
  %1 = load i32, i32* %d, align 4
  ret i32 %1
}

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %c = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %c1 = alloca i32, align 4
  %2 = call i32 @__module_nested_01_a_b()
  store i32 %2, i32* %c1, align 4
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lpython_free_argv()
