; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_8 = type { double, double }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@c_null_ptr = external global void*
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [10 x i8] c"%23.17e%s\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [2 x i8] c" \00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [12 x i8] c"(%lf,%lf)%s\00", align 1
@8 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define double @_lcompilers_abs(double* %x) {
.entry:
  %_lcompilers_abs = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dabs(double %0)
  store double %1, double* %_lcompilers_abs, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %_lcompilers_abs, align 8
  ret double %2
}

declare double @_lfortran_dabs(double)

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

define double @__module_lfortran_intrinsic_math_dtan(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dtan(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dtan(double)

define %complex_8 @__module_lfortran_intrinsic_math_ztan(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_ztan(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_ztan(%complex_8)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value1 = alloca double, align 8
  %call_arg_value = alloca double, align 8
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %x = alloca double, align 8
  %z = alloca %complex_8, align 8
  store double 1.500000e+00, double* %x, align 8
  %2 = call double @__module_lfortran_intrinsic_math_dtan(double* %x)
  store double %2, double* %x, align 8
  %3 = load double, double* %x, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i32 0, i32 0), double %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  %4 = load double, double* %x, align 8
  %5 = fsub double %4, 0x402C33ED50B88778
  store double %5, double* %call_arg_value, align 8
  %6 = call double @_lcompilers_abs(double* %call_arg_value)
  %7 = fcmp ugt double %6, 1.000000e-10
  br i1 %7, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %8 = alloca %complex_8, align 8
  %9 = getelementptr %complex_8, %complex_8* %8, i32 0, i32 0
  %10 = getelementptr %complex_8, %complex_8* %8, i32 0, i32 1
  store double 1.500000e+00, double* %9, align 8
  store double 3.500000e+00, double* %10, align 8
  %11 = load %complex_8, %complex_8* %8, align 8
  store %complex_8 %11, %complex_8* %z, align 8
  %12 = call %complex_8 @__module_lfortran_intrinsic_math_ztan(%complex_8* %z)
  store %complex_8 %12, %complex_8* %z, align 8
  %13 = load %complex_8, %complex_8* %z, align 8
  %14 = alloca %complex_8, align 8
  store %complex_8 %13, %complex_8* %14, align 8
  %15 = getelementptr %complex_8, %complex_8* %14, i32 0, i32 0
  %16 = load double, double* %15, align 8
  %17 = alloca %complex_8, align 8
  store %complex_8 %13, %complex_8* %17, align 8
  %18 = getelementptr %complex_8, %complex_8* %17, i32 0, i32 1
  %19 = load double, double* %18, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i32 0, i32 0), double %16, double %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  %20 = load %complex_8, %complex_8* %z, align 8
  %21 = alloca %complex_8, align 8
  store %complex_8 %20, %complex_8* %21, align 8
  %22 = getelementptr %complex_8, %complex_8* %21, i32 0, i32 0
  %23 = load double, double* %22, align 8
  %24 = fsub double %23, 0x3F30E5C06C0C177D
  store double %24, double* %call_arg_value1, align 8
  %25 = call double @_lcompilers_abs(double* %call_arg_value1)
  %26 = fcmp ugt double %25, 1.000000e-10
  br i1 %26, label %then2, label %else3

then2:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @8, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
