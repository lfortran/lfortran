syntax error: Token 'print' is unexpected here
  --> tests/errors/continue_compilation_1.f90:75:5
   |
75 |     print*, nint(1e12_8)
   |     ^^^^^ 

semantic error: Implicit typing is not allowed, enable it by using --implicit-typing 
 --> tests/errors/continue_compilation_1.f90:2:5 - 3:1
  |
2 |        implicit integer(a-f), real(e-z)
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
...
  |
3 |    
  | ...^ 

semantic error: arguments of `repeat` intrinsic must be scalar
  --> tests/errors/continue_compilation_1.f90:86:38
   |
86 |     character(3), parameter :: ar1 = repeat(["abc", "#^1", "123"], [1, 2, 3])
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: Assignment to loop variable `i` is not allowed
  --> tests/errors/continue_compilation_1.f90:20:8
   |
20 |        i = i + 1
   |        ^ 

semantic error:  first argument of `maskl` must be less than or equal to the BIT_SIZE of INTEGER(KIND=4)
  --> tests/errors/continue_compilation_1.f90:24:13
   |
24 |     print*, maskl(63)
   |             ^^^^^^^^^ 

semantic error: first argument of `maskr` must be less than or equal to the BIT_SIZE of INTEGER(KIND=4)
  --> tests/errors/continue_compilation_1.f90:26:13
   |
26 |     print*, maskr(63)
   |             ^^^^^^^^^ 

semantic error: first argument of `maskl` must be nonnegative
  --> tests/errors/continue_compilation_1.f90:28:13
   |
28 |     print*, maskl(-24)
   |             ^^^^^^^^^^ 

semantic error: first argument of `maskr` must be nonnegative
  --> tests/errors/continue_compilation_1.f90:30:13
   |
30 |     print*, maskr(-24)
   |             ^^^^^^^^^^ 

semantic error: The argument `matrix_a` in `matmul` must be of type Integer, Real, Complex or Logical
  --> tests/errors/continue_compilation_1.f90:32:21
   |
32 |     print *, matmul(a1, b1)
   |                     ^^ 

semantic error: The argument `matrix_b` in `matmul` must be of type Integer, Real or Complex if first matrix is of numeric type
  --> tests/errors/continue_compilation_1.f90:34:25
   |
34 |     print *, matmul(b1, a1)
   |                         ^^ 

semantic error: The `matmul` intrinsic doesn't handle logical type yet
  --> tests/errors/continue_compilation_1.f90:36:14
   |
36 |     print *, matmul(a2, b1)
   |              ^^^^^^^^^^^^^^ 

semantic error: `matmul` accepts arrays of rank 1 or 2 only, provided an array with rank, 3
  --> tests/errors/continue_compilation_1.f90:38:21
   |
38 |     print *, matmul(a3, b1)
   |                     ^^ 

semantic error: `matmul` accepts arrays of rank 1 or 2 only, provided an array with rank, 4
  --> tests/errors/continue_compilation_1.f90:40:25
   |
40 |     print *, matmul(b1, b4)
   |                         ^^ 

semantic error: The argument `matrix_b` in `matmul` must be of rank 2, provided an array with rank, 1
  --> tests/errors/continue_compilation_1.f90:42:24
   |
42 |     print *, matmul(a, b)
   |                        ^ 

semantic error: `transpose` accepts arrays of rank 2 only, provided an array with rank, 1
  --> tests/errors/continue_compilation_1.f90:44:24
   |
44 |     print *, transpose(a)
   |                        ^ 

semantic error: Kind of all the arguments of Mergebits must be the same
  --> tests/errors/continue_compilation_1.f90:46:14
   |
46 |     print *, merge_bits(8, 12_8, 2)
   |              ^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: Kind of all the arguments of Mergebits must be the same
  --> tests/errors/continue_compilation_1.f90:48:14
   |
48 |     print *, merge_bits(a5, b5, c5)
   |              ^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: Second argument of modulo cannot be 0
  --> tests/errors/continue_compilation_1.f90:64:14
   |
64 |     print *, modulo(1, 0)
   |              ^^^^^^^^^^^^ 

semantic error: Function 'my_func' not found (not user defined nor intrinsic)
  --> tests/errors/continue_compilation_1.f90:66:5
   |
66 |     call my_func(y=1, x=2, z=1)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: Result of `nint` overflows its kind(4)
  --> tests/errors/continue_compilation_1.f90:76:13
   |
76 |     print*, nint(1000000000000.0000000000000000d0)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: Invalid argument `hello` supplied
  --> tests/errors/continue_compilation_1.f90:78:5
   |
78 |     OPEN(file="numbers", hello="world")
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: Cannot assign to a constant variable
  --> tests/errors/continue_compilation_1.f90:80:5
   |
80 |     i1 = 3
   |     ^^^^^^ assignment here
   |
10 |     integer, parameter :: i1 = 2
   |                           ~~~~~~ declared as constant

semantic error: Expected 0 or 1 arguments, got 2 arguments instead.
  --> tests/errors/continue_compilation_1.f90:82:5
   |
82 |     call FLUSH(1, 2)
   |     ^^^^^^^^^^^^^^^^ 

semantic error: `kind` argument of `verify` intrinsic must be a scalar
  --> tests/errors/continue_compilation_1.f90:84:39
   |
84 |     print*, verify(string, set, kind= [4, 4] )
   |                                       ^^^^^^ 

semantic error: arguments of `and` intrinsic must be scalar
  --> tests/errors/continue_compilation_1.f90:85:14
   |
85 |     print *, and([1, 2, 3], [1, 2, 3])
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: The shift argument of 'dshiftl' intrinsic must be less than or equal to the bit size of the integer
  --> tests/errors/continue_compilation_1.f90:88:28
   |
88 |     print *, dshiftl(1, 2, 34)
   |                            ^^ 

semantic error: The shift argument of 'dshiftl' intrinsic must be non-negative integer
  --> tests/errors/continue_compilation_1.f90:89:28
   |
89 |     print *, dshiftl(1, 2, -2)
   |                            ^^ 

semantic error: The shift argument of 'dshiftr' intrinsic must be less than or equal to the bit size of the integer
  --> tests/errors/continue_compilation_1.f90:91:28
   |
91 |     print *, dshiftr(1, 2, 34)
   |                            ^^ 

semantic error: The shift argument of 'dshiftr' intrinsic must be non-negative integer
  --> tests/errors/continue_compilation_1.f90:92:28
   |
92 |     print *, dshiftr(1, 2, -2)
   |                            ^^ 

semantic error: arguments of `selected_int_kind` intrinsic must be scalar
  --> tests/errors/continue_compilation_1.f90:94:14
   |
94 |     print *, selected_int_kind([1,2,3])
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: arguments of `selected_real_kind` intrinsic must be scalar
  --> tests/errors/continue_compilation_1.f90:95:14
   |
95 |     print *, selected_real_kind([1,2,3])
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: arguments of `selected_char_kind` intrinsic must be scalar
  --> tests/errors/continue_compilation_1.f90:96:14
   |
96 |     print *, selected_char_kind(['c', 'a', 'b'])
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: `dim` argument of the `Sum` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:105:30
    |
105 |     print *, sum(arr1, dim = 2)
    |                              ^ Must have 0 < dim <= 1 for array of rank 1

semantic error: `dim` argument of the `Sum` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:106:30
    |
106 |     print *, sum(arr1, dim = -1)
    |                              ^^ Must have 0 < dim <= 1 for array of rank 1

semantic error: `dim` argument of the `Sum` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:107:44
    |
107 |     print *, sum(arr1, mask = mask1, dim = 2)
    |                                            ^ Must have 0 < dim <= 1 for array of rank 1

semantic error: `dim` argument of the `Sum` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:108:44
    |
108 |     print *, sum(arr1, mask = mask1, dim = -1)
    |                                            ^^ Must have 0 < dim <= 1 for array of rank 1

semantic error: `dim` argument of the `Product` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:110:34
    |
110 |     print *, product(arr2, dim = 3)
    |                                  ^ Must have 0 < dim <= 2 for array of rank 2

semantic error: `dim` argument of the `Product` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:111:34
    |
111 |     print *, product(arr2, dim = -1)
    |                                  ^^ Must have 0 < dim <= 2 for array of rank 2

semantic error: `dim` argument of the `Product` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:112:48
    |
112 |     print *, product(arr2, mask = mask2, dim = 3)
    |                                                ^ Must have 0 < dim <= 2 for array of rank 2

semantic error: `dim` argument of the `Product` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:113:48
    |
113 |     print *, product(arr2, mask = mask2, dim = -1)
    |                                                ^^ Must have 0 < dim <= 2 for array of rank 2

semantic error: `dim` argument of the `Iparity` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:115:34
    |
115 |     print *, iparity(arr3, dim = 4)
    |                                  ^ Must have 0 < dim <= 3 for array of rank 3

semantic error: `dim` argument of the `Iparity` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:116:34
    |
116 |     print *, iparity(arr3, dim = -1)
    |                                  ^^ Must have 0 < dim <= 3 for array of rank 3

semantic error: `dim` argument of the `Iparity` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:117:48
    |
117 |     print *, iparity(arr3, mask = mask3, dim = 4)
    |                                                ^ Must have 0 < dim <= 3 for array of rank 3

semantic error: `dim` argument of the `Iparity` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:118:48
    |
118 |     print *, iparity(arr3, mask = mask3, dim = -1)
    |                                                ^^ Must have 0 < dim <= 3 for array of rank 3

semantic error: Expected logical expression in if statement, but recieved integer instead
   --> tests/errors/continue_compilation_1.f90:124:9
    |
124 |     if (q1) q1 = 1
    |         ^^ integer expression, expected logical

semantic error: Expected logical expression in if statement, but recieved real instead
   --> tests/errors/continue_compilation_1.f90:125:9
    |
125 |     if (r1) r1 = 1.0
    |         ^^ real expression, expected logical

semantic error: Expected logical expression in if statement, but recieved string instead
   --> tests/errors/continue_compilation_1.f90:126:9
    |
126 |     if (c1) c1 = 'a'
    |         ^^ string expression, expected logical

semantic error: The ranks of the `array` and `mask` arguments of the `Sum` intrinsic must be the same
   --> tests/errors/continue_compilation_1.f90:131:18
    |
131 |     print *, sum(arr1, mask2)
    |                  ^^^^  ^^^^^ `array` is rank 1, but `mask` is rank 2

semantic error: The ranks of the `array` and `mask` arguments of the `Sum` intrinsic must be the same
   --> tests/errors/continue_compilation_1.f90:132:18
    |
132 |     print *, sum(arr2, mask3, 2)
    |                  ^^^^  ^^^^^ `array` is rank 2, but `mask` is rank 3

semantic error: The shapes of the `array` and `mask` arguments of the `Iparity` intrinsic must be the same
   --> tests/errors/continue_compilation_1.f90:133:22
    |
133 |     print *, iparity(arr2, mask4)
    |                      ^^^^  ^^^^^ `array` has shape [2,3], but `mask` has shape [3,2]

semantic error: The shapes of the `array` and `mask` arguments of the `Iparity` intrinsic must be the same
   --> tests/errors/continue_compilation_1.f90:134:22
    |
134 |     print *, iparity(arr3, mask5, 3)
    |                      ^^^^  ^^^^^ `array` has shape [2,1,3], but `mask` has shape [2,3,1]

semantic error: Argument to 'present' must be a variable, but got an expression
   --> tests/errors/continue_compilation_1.f90:137:22
    |
137 |     print *, present(a + 1)
    |                      ^^^^^ Expected a variable here

semantic error: Argument to 'present' must be an optional dummy argument
   --> tests/errors/continue_compilation_1.f90:140:22
    |
140 |     print *, present(a)
    |                      ^ This variable is not 'optional'

semantic error: Different shape for arguments `array` and `mask` for pack intrinsic (3 and 4)
   --> tests/errors/continue_compilation_1.f90:142:30
    |
142 |     print *, pack([1, 2, 3], [.true., .true., .true., .true.])
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: reshape accepts arrays for `source` argument, found str instead.
   --> tests/errors/continue_compilation_1.f90:144:22
    |
144 |     print *, reshape("hello", [2, 3])
    |                      ^^^^^^^ 

semantic error: reshape accepts arrays for `source` argument, found bool instead.
   --> tests/errors/continue_compilation_1.f90:145:22
    |
145 |     print *, reshape(.true., [2, 3])
    |                      ^^^^^^ 

semantic error: reshape accepts arrays for `shape` argument, found str instead.
   --> tests/errors/continue_compilation_1.f90:146:36
    |
146 |     print *, reshape([1, 2, 3, 4], "hello")
    |                                    ^^^^^^^ 

semantic error: reshape accepts arrays for `shape` argument, found bool instead.
   --> tests/errors/continue_compilation_1.f90:147:36
    |
147 |     print *, reshape([1, 2, 3, 4], .false.)
    |                                    ^^^^^^^ 

semantic error: reshape accepts `source` array with size greater than or equal to size specified by `shape` array
   --> tests/errors/continue_compilation_1.f90:149:14
    |
149 |     print *, reshape([1, 2, 3, 4], [2, 3])
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `shape` specifies size of 6 which exceeds the `source` array size of 4

semantic error: Division by zero
   --> tests/errors/continue_compilation_1.f90:152:14
    |
152 |     print *, 1/0
    |              ^^^ 

semantic error: Division by zero
   --> tests/errors/continue_compilation_1.f90:155:14
    |
155 |     print *, x/zero
    |              ^^^^^^ 

semantic error: Type mismatch in binary operator, the types must be compatible
   --> tests/errors/continue_compilation_1.f90:158:14
    |
158 |     print *, v**str
    |              ^  ^^^ type mismatch (real and string)

semantic error: Type mismatch in binary operator, the types must be compatible
   --> tests/errors/continue_compilation_1.f90:159:14
    |
159 |     print *, str**v
    |              ^^^  ^ type mismatch (string and real)

semantic error: The shift argument of 'shiftl' intrinsic must be less than or equal to the bit size of the integer
   --> tests/errors/continue_compilation_1.f90:161:24
    |
161 |     print *, shiftl(2, 34)
    |                        ^^ Shift value is 34, but bit size of integer is 32

semantic error: The shift argument of 'shiftl' intrinsic must be non-negative integer
   --> tests/errors/continue_compilation_1.f90:162:24
    |
162 |     print *, shiftl(2, -3)
    |                        ^^ 

semantic error: The shift argument of 'shiftr' intrinsic must be less than or equal to the bit size of the integer
   --> tests/errors/continue_compilation_1.f90:163:24
    |
163 |     print *, shiftr(2, 34)
    |                        ^^ Shift value is 34, but bit size of integer is 32

semantic error: The shift argument of 'shiftr' intrinsic must be non-negative integer
   --> tests/errors/continue_compilation_1.f90:164:24
    |
164 |     print *, shiftr(2, -3)
    |                        ^^ 

semantic error: The shift argument of 'rshift' intrinsic must be less than or equal to the bit size of the integer
   --> tests/errors/continue_compilation_1.f90:165:24
    |
165 |     print *, rshift(2, 34)
    |                        ^^ Shift value is 34, but bit size of integer is 32

semantic error: The shift argument of 'rshift' intrinsic must be non-negative integer
   --> tests/errors/continue_compilation_1.f90:166:24
    |
166 |     print *, rshift(2, -3)
    |                        ^^ 
