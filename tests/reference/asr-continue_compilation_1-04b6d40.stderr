syntax error: Token 'print' is unexpected here
  --> tests/errors/continue_compilation_1.f90:82:5
   |
82 |     print*, nint(1e12_8)
   |     ^^^^^ 

semantic error: Implicit typing is not allowed, enable it by using --implicit-typing 
 --> tests/errors/continue_compilation_1.f90:2:5 - 3:1
  |
2 |        implicit integer(a-f), real(e-z)
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
...
  |
3 |    
  | ...^ 

semantic error: Cannot convert LOGICAL to REAL
  --> tests/errors/continue_compilation_1.f90:18:20
   |
18 |     real :: adwf = .true.
   |                    ^^^^^^ 

semantic error: arguments of `repeat` intrinsic must be scalar
  --> tests/errors/continue_compilation_1.f90:93:38
   |
93 |     character(3), parameter :: ar1 = repeat(["abc", "#^1", "123"], [1, 2, 3])
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: Symbol is already declared in the same scope
   --> tests/errors/continue_compilation_1.f90:161:16
    |
161 |     integer :: x = 1
    |                ^^^^^ redeclaration
    |
 14 |     real :: x
    |             ~ original declaration

semantic error: Type mismatch in assignment, the types must be compatible
  --> tests/errors/continue_compilation_1.f90:19:5
   |
19 |     x = y 
   |     ^   ^ type mismatch (real and logical)

semantic error: Assignment to loop variable `i` is not allowed
  --> tests/errors/continue_compilation_1.f90:27:8
   |
27 |        i = i + 1
   |        ^ 

semantic error:  first argument of `maskl` must be less than or equal to the BIT_SIZE of INTEGER(KIND=4)
  --> tests/errors/continue_compilation_1.f90:31:13
   |
31 |     print*, maskl(63)
   |             ^^^^^^^^^ 

semantic error: first argument of `maskr` must be less than or equal to the BIT_SIZE of INTEGER(KIND=4)
  --> tests/errors/continue_compilation_1.f90:33:13
   |
33 |     print*, maskr(63)
   |             ^^^^^^^^^ 

semantic error: first argument of `maskl` must be nonnegative
  --> tests/errors/continue_compilation_1.f90:35:13
   |
35 |     print*, maskl(-24)
   |             ^^^^^^^^^^ 

semantic error: first argument of `maskr` must be nonnegative
  --> tests/errors/continue_compilation_1.f90:37:13
   |
37 |     print*, maskr(-24)
   |             ^^^^^^^^^^ 

semantic error: The argument `matrix_a` in `matmul` must be of type Integer, Real, Complex or Logical
  --> tests/errors/continue_compilation_1.f90:39:21
   |
39 |     print *, matmul(a1, b1)
   |                     ^^ 

semantic error: The argument `matrix_b` in `matmul` must be of type Integer, Real or Complex if first matrix is of numeric type
  --> tests/errors/continue_compilation_1.f90:41:25
   |
41 |     print *, matmul(b1, a1)
   |                         ^^ 

semantic error: The `matmul` intrinsic doesn't handle logical type yet
  --> tests/errors/continue_compilation_1.f90:43:14
   |
43 |     print *, matmul(a2, b1)
   |              ^^^^^^^^^^^^^^ 

semantic error: `matmul` accepts arrays of rank 1 or 2 only, provided an array with rank, 3
  --> tests/errors/continue_compilation_1.f90:45:21
   |
45 |     print *, matmul(a3, b1)
   |                     ^^ 

semantic error: `matmul` accepts arrays of rank 1 or 2 only, provided an array with rank, 4
  --> tests/errors/continue_compilation_1.f90:47:25
   |
47 |     print *, matmul(b1, b4)
   |                         ^^ 

semantic error: The argument `matrix_b` in `matmul` must be of rank 2, provided an array with rank, 1
  --> tests/errors/continue_compilation_1.f90:49:24
   |
49 |     print *, matmul(a, b)
   |                        ^ 

semantic error: `transpose` accepts arrays of rank 2 only, provided an array with rank, 1
  --> tests/errors/continue_compilation_1.f90:51:24
   |
51 |     print *, transpose(a)
   |                        ^ 

semantic error: Kind of all the arguments of Mergebits must be the same
  --> tests/errors/continue_compilation_1.f90:53:14
   |
53 |     print *, merge_bits(8, 12_8, 2)
   |              ^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: Kind of all the arguments of Mergebits must be the same
  --> tests/errors/continue_compilation_1.f90:55:14
   |
55 |     print *, merge_bits(a5, b5, c5)
   |              ^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: Second argument of modulo cannot be 0
  --> tests/errors/continue_compilation_1.f90:71:14
   |
71 |     print *, modulo(1, 0)
   |              ^^^^^^^^^^^^ 

semantic error: Function 'my_func' not found (not user defined nor intrinsic)
  --> tests/errors/continue_compilation_1.f90:73:5
   |
73 |     call my_func(y=1, x=2, z=1)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: Result of `nint` overflows its kind(4)
  --> tests/errors/continue_compilation_1.f90:83:13
   |
83 |     print*, nint(1000000000000.0000000000000000d0)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: Invalid argument `hello` supplied
  --> tests/errors/continue_compilation_1.f90:85:5
   |
85 |     OPEN(file="numbers", hello="world")
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: Cannot assign to a constant variable
  --> tests/errors/continue_compilation_1.f90:87:5
   |
87 |     i1 = 3
   |     ^^^^^^ assignment here
   |
10 |     integer, parameter :: i1 = 2
   |                           ~~~~~~ declared as constant

semantic error: Expected 0 or 1 arguments, got 2 arguments instead.
  --> tests/errors/continue_compilation_1.f90:89:5
   |
89 |     call FLUSH(1, 2)
   |     ^^^^^^^^^^^^^^^^ 

semantic error: `kind` argument of `verify` intrinsic must be a scalar
  --> tests/errors/continue_compilation_1.f90:91:39
   |
91 |     print*, verify(string, set, kind= [4, 4] )
   |                                       ^^^^^^ 

semantic error: arguments of `and` intrinsic must be scalar
  --> tests/errors/continue_compilation_1.f90:92:14
   |
92 |     print *, and([1, 2, 3], [1, 2, 3])
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: The shift argument of 'dshiftl' intrinsic must be less than or equal to the bit size of the integer
  --> tests/errors/continue_compilation_1.f90:95:28
   |
95 |     print *, dshiftl(1, 2, 34)
   |                            ^^ 

semantic error: The shift argument of 'dshiftl' intrinsic must be non-negative integer
  --> tests/errors/continue_compilation_1.f90:96:28
   |
96 |     print *, dshiftl(1, 2, -2)
   |                            ^^ 

semantic error: The shift argument of 'dshiftr' intrinsic must be less than or equal to the bit size of the integer
  --> tests/errors/continue_compilation_1.f90:98:28
   |
98 |     print *, dshiftr(1, 2, 34)
   |                            ^^ 

semantic error: The shift argument of 'dshiftr' intrinsic must be non-negative integer
  --> tests/errors/continue_compilation_1.f90:99:28
   |
99 |     print *, dshiftr(1, 2, -2)
   |                            ^^ 

semantic error: arguments of `selected_int_kind` intrinsic must be scalar
   --> tests/errors/continue_compilation_1.f90:101:14
    |
101 |     print *, selected_int_kind([1,2,3])
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: arguments of `selected_real_kind` intrinsic must be scalar
   --> tests/errors/continue_compilation_1.f90:102:14
    |
102 |     print *, selected_real_kind([1,2,3])
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: arguments of `selected_char_kind` intrinsic must be scalar
   --> tests/errors/continue_compilation_1.f90:103:14
    |
103 |     print *, selected_char_kind(['c', 'a', 'b'])
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: `dim` argument of the `Sum` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:112:30
    |
112 |     print *, sum(arr1, dim = 2)
    |                              ^ Must have 0 < dim <= 1 for array of rank 1

semantic error: `dim` argument of the `Sum` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:113:30
    |
113 |     print *, sum(arr1, dim = -1)
    |                              ^^ Must have 0 < dim <= 1 for array of rank 1

semantic error: `dim` argument of the `Sum` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:114:44
    |
114 |     print *, sum(arr1, mask = mask1, dim = 2)
    |                                            ^ Must have 0 < dim <= 1 for array of rank 1

semantic error: `dim` argument of the `Sum` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:115:44
    |
115 |     print *, sum(arr1, mask = mask1, dim = -1)
    |                                            ^^ Must have 0 < dim <= 1 for array of rank 1

semantic error: `dim` argument of the `Product` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:117:34
    |
117 |     print *, product(arr2, dim = 3)
    |                                  ^ Must have 0 < dim <= 2 for array of rank 2

semantic error: `dim` argument of the `Product` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:118:34
    |
118 |     print *, product(arr2, dim = -1)
    |                                  ^^ Must have 0 < dim <= 2 for array of rank 2

semantic error: `dim` argument of the `Product` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:119:48
    |
119 |     print *, product(arr2, mask = mask2, dim = 3)
    |                                                ^ Must have 0 < dim <= 2 for array of rank 2

semantic error: `dim` argument of the `Product` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:120:48
    |
120 |     print *, product(arr2, mask = mask2, dim = -1)
    |                                                ^^ Must have 0 < dim <= 2 for array of rank 2

semantic error: `dim` argument of the `Iparity` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:122:34
    |
122 |     print *, iparity(arr3, dim = 4)
    |                                  ^ Must have 0 < dim <= 3 for array of rank 3

semantic error: `dim` argument of the `Iparity` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:123:34
    |
123 |     print *, iparity(arr3, dim = -1)
    |                                  ^^ Must have 0 < dim <= 3 for array of rank 3

semantic error: `dim` argument of the `Iparity` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:124:48
    |
124 |     print *, iparity(arr3, mask = mask3, dim = 4)
    |                                                ^ Must have 0 < dim <= 3 for array of rank 3

semantic error: `dim` argument of the `Iparity` intrinsic is out of bounds
   --> tests/errors/continue_compilation_1.f90:125:48
    |
125 |     print *, iparity(arr3, mask = mask3, dim = -1)
    |                                                ^^ Must have 0 < dim <= 3 for array of rank 3

semantic error: Expected logical expression in if statement, but recieved integer instead
   --> tests/errors/continue_compilation_1.f90:131:9
    |
131 |     if (q1) q1 = 1
    |         ^^ integer expression, expected logical

semantic error: Expected logical expression in if statement, but recieved real instead
   --> tests/errors/continue_compilation_1.f90:132:9
    |
132 |     if (r1) r1 = 1.0
    |         ^^ real expression, expected logical

semantic error: Expected logical expression in if statement, but recieved string instead
   --> tests/errors/continue_compilation_1.f90:133:9
    |
133 |     if (c1) c1 = 'a'
    |         ^^ string expression, expected logical

semantic error: The ranks of the `array` and `mask` arguments of the `Sum` intrinsic must be the same
   --> tests/errors/continue_compilation_1.f90:138:18
    |
138 |     print *, sum(arr1, mask2)
    |                  ^^^^  ^^^^^ `array` is rank 1, but `mask` is rank 2

semantic error: The ranks of the `array` and `mask` arguments of the `Sum` intrinsic must be the same
   --> tests/errors/continue_compilation_1.f90:139:18
    |
139 |     print *, sum(arr2, mask3, 2)
    |                  ^^^^  ^^^^^ `array` is rank 2, but `mask` is rank 3

semantic error: The shapes of the `array` and `mask` arguments of the `Iparity` intrinsic must be the same
   --> tests/errors/continue_compilation_1.f90:140:22
    |
140 |     print *, iparity(arr2, mask4)
    |                      ^^^^  ^^^^^ `array` has shape [2,3], but `mask` has shape [3,2]

semantic error: The shapes of the `array` and `mask` arguments of the `Iparity` intrinsic must be the same
   --> tests/errors/continue_compilation_1.f90:141:22
    |
141 |     print *, iparity(arr3, mask5, 3)
    |                      ^^^^  ^^^^^ `array` has shape [2,1,3], but `mask` has shape [2,3,1]

semantic error: Argument to 'present' must be a variable, but got an expression
   --> tests/errors/continue_compilation_1.f90:144:22
    |
144 |     print *, present(a + 1)
    |                      ^^^^^ Expected a variable here

semantic error: Argument to 'present' must be an optional dummy argument
   --> tests/errors/continue_compilation_1.f90:147:22
    |
147 |     print *, present(a)
    |                      ^ This variable is not 'optional'

semantic error: Different shape for arguments `array` and `mask` for pack intrinsic (3 and 4)
   --> tests/errors/continue_compilation_1.f90:149:30
    |
149 |     print *, pack([1, 2, 3], [.true., .true., .true., .true.])
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

semantic error: reshape accepts arrays for `source` argument, found str instead.
   --> tests/errors/continue_compilation_1.f90:151:22
    |
151 |     print *, reshape("hello", [2, 3])
    |                      ^^^^^^^ 

semantic error: reshape accepts arrays for `source` argument, found bool instead.
   --> tests/errors/continue_compilation_1.f90:152:22
    |
152 |     print *, reshape(.true., [2, 3])
    |                      ^^^^^^ 

semantic error: reshape accepts arrays for `shape` argument, found str instead.
   --> tests/errors/continue_compilation_1.f90:153:36
    |
153 |     print *, reshape([1, 2, 3, 4], "hello")
    |                                    ^^^^^^^ 

semantic error: reshape accepts arrays for `shape` argument, found bool instead.
   --> tests/errors/continue_compilation_1.f90:154:36
    |
154 |     print *, reshape([1, 2, 3, 4], .false.)
    |                                    ^^^^^^^ 

semantic error: reshape accepts `source` array with size greater than or equal to size specified by `shape` array
   --> tests/errors/continue_compilation_1.f90:156:14
    |
156 |     print *, reshape([1, 2, 3, 4], [2, 3])
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `shape` specifies size of 6 which exceeds the `source` array size of 4

semantic error: Division by zero
   --> tests/errors/continue_compilation_1.f90:159:14
    |
159 |     print *, 1/0
    |              ^^^ 

semantic error: Type mismatch in binary operator, the types must be compatible
   --> tests/errors/continue_compilation_1.f90:165:14
    |
165 |     print *, v**str
    |              ^  ^^^ type mismatch (real and string)

semantic error: Type mismatch in binary operator, the types must be compatible
   --> tests/errors/continue_compilation_1.f90:166:14
    |
166 |     print *, str**v
    |              ^^^  ^ type mismatch (string and real)

semantic error: The shift argument of 'shiftl' intrinsic must be less than or equal to the bit size of the integer
   --> tests/errors/continue_compilation_1.f90:168:24
    |
168 |     print *, shiftl(2, 34)
    |                        ^^ Shift value is 34, but bit size of integer is 32

semantic error: The shift argument of 'shiftl' intrinsic must be non-negative integer
   --> tests/errors/continue_compilation_1.f90:169:24
    |
169 |     print *, shiftl(2, -3)
    |                        ^^ 

semantic error: The shift argument of 'shiftr' intrinsic must be less than or equal to the bit size of the integer
   --> tests/errors/continue_compilation_1.f90:170:24
    |
170 |     print *, shiftr(2, 34)
    |                        ^^ Shift value is 34, but bit size of integer is 32

semantic error: The shift argument of 'shiftr' intrinsic must be non-negative integer
   --> tests/errors/continue_compilation_1.f90:171:24
    |
171 |     print *, shiftr(2, -3)
    |                        ^^ 

semantic error: The shift argument of 'rshift' intrinsic must be less than or equal to the bit size of the integer
   --> tests/errors/continue_compilation_1.f90:172:24
    |
172 |     print *, rshift(2, 34)
    |                        ^^ Shift value is 34, but bit size of integer is 32

semantic error: The shift argument of 'rshift' intrinsic must be non-negative integer
   --> tests/errors/continue_compilation_1.f90:173:24
    |
173 |     print *, rshift(2, -3)
    |                        ^^ 

semantic error: Input to `Sum` is expected to be numeric, but got string[:]
   --> tests/errors/continue_compilation_1.f90:176:18
    |
176 |     print *, sum([c1])
    |                  ^^^^ must be integer, real or complex type

semantic error: Input to `Product` is expected to be numeric, but got string[:]
   --> tests/errors/continue_compilation_1.f90:177:22
    |
177 |     print *, product([c1])
    |                      ^^^^ must be integer, real or complex type

semantic error: Input to `MinVal` is expected to be of integer, real or character type, but got complex[:]
   --> tests/errors/continue_compilation_1.f90:178:21
    |
178 |     print *, minval([c])
    |                     ^^^ must be integer, real or character type

semantic error: Input to `MaxVal` is expected to be of integer, real or character type, but got complex[:]
   --> tests/errors/continue_compilation_1.f90:179:21
    |
179 |     print *, maxval([c])
    |                     ^^^ must be integer, real or character type

semantic error: Argument to intrinsic `Sum` is expected to be an array, found: integer
   --> tests/errors/continue_compilation_1.f90:181:14
    |
181 |     print *, sum(q1)
    |              ^^^^^^^ 

semantic error: Argument to intrinsic `Product` is expected to be an array, found: real
   --> tests/errors/continue_compilation_1.f90:182:14
    |
182 |     print *, product(r1)
    |              ^^^^^^^^^^^ 

semantic error: Argument to intrinsic `MinVal` is expected to be an array, found: integer
   --> tests/errors/continue_compilation_1.f90:183:14
    |
183 |     print *, minval(q1)
    |              ^^^^^^^^^^ 

semantic error: Argument to intrinsic `MaxVal` is expected to be an array, found: real
   --> tests/errors/continue_compilation_1.f90:184:14
    |
184 |     print *, maxval(r1)
    |              ^^^^^^^^^^ 

semantic error: 'mask' argument of 'sum' intrinsic must be logical
   --> tests/errors/continue_compilation_1.f90:186:14
    |
186 |     print *, sum([1, 2, 3], mask = [1, 2, 3])
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
