; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [10 x i8] c"%23.17e%s\00", align 1

define double @_lcompilers_sin_f64(double* %x) {
.entry:
  %_lcompilers_sin_f64 = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dsin(double %0)
  store double %1, double* %_lcompilers_sin_f64, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %_lcompilers_sin_f64, align 8
  ret double %2
}

declare double @_lfortran_dsin(double)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %x = alloca double, align 8
  store double 0x3FEFEB7A9B2C6D8B, double* %x, align 8
  %2 = load double, double* %x, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i32 0, i32 0), double %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)
