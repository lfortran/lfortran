; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@3 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @Sum_4_2_0_integer_______0(i32* %array, i32* %__1array, i32* %__2array, i32* %__3array, i32* %__4array) {
.entry:
  %__1_i = alloca i32, align 4
  %__2_i = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 0, i32* %result, align 4
  %0 = load i32, i32* %__1array, align 4
  %1 = sub i32 %0, 1
  store i32 %1, i32* %__1_i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.end, %.entry
  %2 = load i32, i32* %__1_i, align 4
  %3 = add i32 %2, 1
  %4 = load i32, i32* %__2array, align 4
  %5 = load i32, i32* %__1array, align 4
  %6 = add i32 %4, %5
  %7 = sub i32 %6, 1
  %8 = icmp sle i32 %3, %7
  br i1 %8, label %loop.body, label %loop.end3

loop.body:                                        ; preds = %loop.head
  %9 = load i32, i32* %__1_i, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %__1_i, align 4
  %11 = load i32, i32* %__3array, align 4
  %12 = sub i32 %11, 1
  store i32 %12, i32* %__2_i, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %loop.body2, %loop.body
  %13 = load i32, i32* %__2_i, align 4
  %14 = add i32 %13, 1
  %15 = load i32, i32* %__4array, align 4
  %16 = load i32, i32* %__3array, align 4
  %17 = add i32 %15, %16
  %18 = sub i32 %17, 1
  %19 = icmp sle i32 %14, %18
  br i1 %19, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %20 = load i32, i32* %__2_i, align 4
  %21 = add i32 %20, 1
  store i32 %21, i32* %__2_i, align 4
  %22 = load i32, i32* %result, align 4
  %23 = load i32, i32* %__1_i, align 4
  %24 = load i32, i32* %__2_i, align 4
  %25 = load i32, i32* %__1array, align 4
  %26 = load i32, i32* %__2array, align 4
  %27 = load i32, i32* %__3array, align 4
  %28 = load i32, i32* %__4array, align 4
  %29 = sub i32 %23, %25
  %30 = mul i32 1, %29
  %31 = add i32 0, %30
  %32 = mul i32 1, %26
  %33 = sub i32 %24, %27
  %34 = mul i32 %32, %33
  %35 = add i32 %31, %34
  %36 = mul i32 %32, %28
  %37 = getelementptr inbounds i32, i32* %array, i32 %35
  %38 = load i32, i32* %37, align 4
  %39 = add i32 %22, %38
  store i32 %39, i32* %result, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  br label %loop.head

loop.end3:                                        ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end3
  %40 = load i32, i32* %result, align 4
  ret i32 %40
}

define i32 @_lcompilers_abs_i32(i32* %x) {
.entry:
  %_lcompilers_abs_i32 = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = icmp sge i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i32, i32* %x, align 4
  store i32 %2, i32* %_lcompilers_abs_i32, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i32, i32* %x, align 4
  %4 = sub i32 0, %3
  store i32 %4, i32* %_lcompilers_abs_i32, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i32, i32* %_lcompilers_abs_i32, align 4
  ret i32 %5
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value7 = alloca i32, align 4
  %call_arg_value6 = alloca i32, align 4
  %call_arg_value5 = alloca i32, align 4
  %call_arg_value4 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca [50 x i32], align 4
  %xdiff = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.end, %.entry
  %2 = load i32, i32* %i, align 4
  %3 = add i32 %2, 1
  %4 = icmp sle i32 %3, 5
  br i1 %4, label %loop.body, label %loop.end3

loop.body:                                        ; preds = %loop.head
  %5 = load i32, i32* %i, align 4
  %6 = add i32 %5, 1
  store i32 %6, i32* %i, align 4
  store i32 0, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %loop.body2, %loop.body
  %7 = load i32, i32* %j, align 4
  %8 = add i32 %7, 1
  %9 = icmp sle i32 %8, 10
  br i1 %9, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %10 = load i32, i32* %j, align 4
  %11 = add i32 %10, 1
  store i32 %11, i32* %j, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %j, align 4
  %14 = sub i32 %12, 1
  %15 = mul i32 1, %14
  %16 = add i32 0, %15
  %17 = sub i32 %13, 1
  %18 = mul i32 5, %17
  %19 = add i32 %16, %18
  %20 = getelementptr [50 x i32], [50 x i32]* %x, i32 0, i32 %19
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %23 = add i32 %21, %22
  store i32 %23, i32* %20, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  br label %loop.head

loop.end3:                                        ; preds = %loop.head
  %24 = getelementptr [50 x i32], [50 x i32]* %x, i32 0, i32 0
  store i32 1, i32* %call_arg_value, align 4
  store i32 5, i32* %call_arg_value4, align 4
  store i32 1, i32* %call_arg_value5, align 4
  store i32 10, i32* %call_arg_value6, align 4
  %25 = call i32 @Sum_4_2_0_integer_______0(i32* %24, i32* %call_arg_value, i32* %call_arg_value4, i32* %call_arg_value5, i32* %call_arg_value6)
  %26 = sub i32 %25, 425
  store i32 %26, i32* %call_arg_value7, align 4
  %27 = call i32 @_lcompilers_abs_i32(i32* %call_arg_value7)
  store i32 %27, i32* %xdiff, align 4
  %28 = load i32, i32* %xdiff, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %28, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %29 = load i32, i32* %xdiff, align 4
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %then, label %else

then:                                             ; preds = %loop.end3
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end3
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
