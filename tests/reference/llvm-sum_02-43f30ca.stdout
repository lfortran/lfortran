; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define i32 @Sum_4_2_0(%array* %array) {
.entry:
  %__1_i = alloca i32, align 4
  %__2_i = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 0, i32* %result, align 4
  %0 = getelementptr %array, %array* %array, i32 0, i32 2
  %1 = load %dimension_descriptor*, %dimension_descriptor** %0, align 8
  %2 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 0
  %3 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = sub i32 %4, 1
  store i32 %5, i32* %__1_i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.end, %.entry
  %6 = load i32, i32* %__1_i, align 4
  %7 = add i32 %6, 1
  %8 = getelementptr %array, %array* %array, i32 0, i32 2
  %9 = load %dimension_descriptor*, %dimension_descriptor** %8, align 8
  %10 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %9, i32 0
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %10, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr %dimension_descriptor, %dimension_descriptor* %10, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = add i32 %14, %12
  %16 = sub i32 %15, 1
  %17 = icmp sle i32 %7, %16
  br i1 %17, label %loop.body, label %loop.end3

loop.body:                                        ; preds = %loop.head
  %18 = load i32, i32* %__1_i, align 4
  %19 = add i32 %18, 1
  store i32 %19, i32* %__1_i, align 4
  %20 = getelementptr %array, %array* %array, i32 0, i32 2
  %21 = load %dimension_descriptor*, %dimension_descriptor** %20, align 8
  %22 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %21, i32 1
  %23 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sub i32 %24, 1
  store i32 %25, i32* %__2_i, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %loop.body2, %loop.body
  %26 = load i32, i32* %__2_i, align 4
  %27 = add i32 %26, 1
  %28 = getelementptr %array, %array* %array, i32 0, i32 2
  %29 = load %dimension_descriptor*, %dimension_descriptor** %28, align 8
  %30 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %29, i32 1
  %31 = getelementptr %dimension_descriptor, %dimension_descriptor* %30, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr %dimension_descriptor, %dimension_descriptor* %30, i32 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = add i32 %34, %32
  %36 = sub i32 %35, 1
  %37 = icmp sle i32 %27, %36
  br i1 %37, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %38 = load i32, i32* %__2_i, align 4
  %39 = add i32 %38, 1
  store i32 %39, i32* %__2_i, align 4
  %40 = load i32, i32* %result, align 4
  %41 = load i32, i32* %__1_i, align 4
  %42 = load i32, i32* %__2_i, align 4
  %43 = getelementptr %array, %array* %array, i32 0, i32 2
  %44 = load %dimension_descriptor*, %dimension_descriptor** %43, align 8
  %45 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %44, i32 0
  %46 = getelementptr %dimension_descriptor, %dimension_descriptor* %45, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = sub i32 %41, %47
  %49 = getelementptr %dimension_descriptor, %dimension_descriptor* %45, i32 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = mul i32 %50, %48
  %52 = add i32 0, %51
  %53 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %44, i32 1
  %54 = getelementptr %dimension_descriptor, %dimension_descriptor* %53, i32 0, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = sub i32 %42, %55
  %57 = getelementptr %dimension_descriptor, %dimension_descriptor* %53, i32 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = mul i32 %58, %56
  %60 = add i32 %52, %59
  %61 = getelementptr %array, %array* %array, i32 0, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = add i32 %60, %62
  %64 = getelementptr %array, %array* %array, i32 0, i32 0
  %65 = load i32*, i32** %64, align 8
  %66 = getelementptr inbounds i32, i32* %65, i32 %63
  %67 = load i32, i32* %66, align 4
  %68 = add i32 %40, %67
  store i32 %68, i32* %result, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  br label %loop.head

loop.end3:                                        ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end3
  %69 = load i32, i32* %result, align 4
  ret i32 %69
}

define i32 @_lcompilers_abs_i32(i32* %x) {
.entry:
  %_lcompilers_abs_i32 = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = icmp sge i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i32, i32* %x, align 4
  store i32 %2, i32* %_lcompilers_abs_i32, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i32, i32* %x, align 4
  %4 = sub i32 0, %3
  store i32 %4, i32* %_lcompilers_abs_i32, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i32, i32* %_lcompilers_abs_i32, align 4
  ret i32 %5
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca i32, align 4
  %array_descriptor = alloca %array, align 8
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca [50 x i32], align 4
  %xdiff = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.end, %.entry
  %2 = load i32, i32* %i, align 4
  %3 = add i32 %2, 1
  %4 = icmp sle i32 %3, 5
  br i1 %4, label %loop.body, label %loop.end3

loop.body:                                        ; preds = %loop.head
  %5 = load i32, i32* %i, align 4
  %6 = add i32 %5, 1
  store i32 %6, i32* %i, align 4
  store i32 0, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %loop.body2, %loop.body
  %7 = load i32, i32* %j, align 4
  %8 = add i32 %7, 1
  %9 = icmp sle i32 %8, 10
  br i1 %9, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %10 = load i32, i32* %j, align 4
  %11 = add i32 %10, 1
  store i32 %11, i32* %j, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %j, align 4
  %14 = sub i32 %12, 1
  %15 = mul i32 1, %14
  %16 = add i32 0, %15
  %17 = sub i32 %13, 1
  %18 = mul i32 5, %17
  %19 = add i32 %16, %18
  %20 = getelementptr [50 x i32], [50 x i32]* %x, i32 0, i32 %19
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %23 = add i32 %21, %22
  store i32 %23, i32* %20, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  br label %loop.head

loop.end3:                                        ; preds = %loop.head
  %24 = getelementptr [50 x i32], [50 x i32]* %x, i32 0, i32 0
  %25 = getelementptr %array, %array* %array_descriptor, i32 0, i32 0
  store i32* %24, i32** %25, align 8
  %26 = getelementptr %array, %array* %array_descriptor, i32 0, i32 1
  store i32 0, i32* %26, align 4
  %27 = getelementptr %array, %array* %array_descriptor, i32 0, i32 2
  %28 = alloca i32, align 4
  store i32 2, i32* %28, align 4
  %29 = load i32, i32* %28, align 4
  %30 = alloca %dimension_descriptor, i32 %29, align 8
  %31 = getelementptr %array, %array* %array_descriptor, i32 0, i32 4
  store i32 2, i32* %31, align 4
  store %dimension_descriptor* %30, %dimension_descriptor** %27, align 8
  %32 = load %dimension_descriptor*, %dimension_descriptor** %27, align 8
  %33 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %32, i32 0
  %34 = getelementptr %dimension_descriptor, %dimension_descriptor* %33, i32 0, i32 0
  %35 = getelementptr %dimension_descriptor, %dimension_descriptor* %33, i32 0, i32 1
  %36 = getelementptr %dimension_descriptor, %dimension_descriptor* %33, i32 0, i32 2
  store i32 1, i32* %34, align 4
  store i32 1, i32* %35, align 4
  store i32 5, i32* %36, align 4
  %37 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %32, i32 1
  %38 = getelementptr %dimension_descriptor, %dimension_descriptor* %37, i32 0, i32 0
  %39 = getelementptr %dimension_descriptor, %dimension_descriptor* %37, i32 0, i32 1
  %40 = getelementptr %dimension_descriptor, %dimension_descriptor* %37, i32 0, i32 2
  store i32 5, i32* %38, align 4
  store i32 1, i32* %39, align 4
  store i32 10, i32* %40, align 4
  %41 = call i32 @Sum_4_2_0(%array* %array_descriptor)
  %42 = sub i32 %41, 425
  store i32 %42, i32* %call_arg_value, align 4
  %43 = call i32 @_lcompilers_abs_i32(i32* %call_arg_value)
  store i32 %43, i32* %xdiff, align 4
  %44 = load i32, i32* %xdiff, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %45 = load i32, i32* %xdiff, align 4
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %then, label %else

then:                                             ; preds = %loop.end3
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end3
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
