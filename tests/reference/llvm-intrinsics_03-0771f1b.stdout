; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@c_null_ptr = external global void*
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [9 x i8] c"%13.8e%s\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

define double @__module_lfortran_intrinsic_math_dcos(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dcos(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dcos(double)

define float @__module_lfortran_intrinsic_math_scos(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_scos(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_scos(float)

define double @__module_lfortran_intrinsic_math2_dabs(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  store double %2, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  %4 = fsub double 0.000000e+00, %3
  store double %4, double* %r, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load double, double* %r, align 8
  ret double %5
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca double, align 8
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %a = alloca double, align 8
  %r1 = alloca double, align 8
  %r2 = alloca double, align 8
  %x = alloca float, align 4
  store float 0xBFEFE8D5A0000000, float* %x, align 4
  %2 = load float, float* %x, align 4
  %3 = fpext float %2 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i32 0, i32 0), double %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  store double 4.200000e+00, double* %a, align 8
  %4 = call double @__module_lfortran_intrinsic_math_dcos(double* %a)
  store double %4, double* %r1, align 8
  store double 0xBFDF606EEC8AC71E, double* %r2, align 8
  %5 = load double, double* %r1, align 8
  %6 = load double, double* %r2, align 8
  %7 = fsub double %5, %6
  store double %7, double* %call_arg_value, align 8
  %8 = call double @__module_lfortran_intrinsic_math2_dabs(double* %call_arg_value)
  %9 = fcmp ugt double %8, 1.000000e-15
  br i1 %9, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
