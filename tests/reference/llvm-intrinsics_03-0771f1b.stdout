; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@intrinsics_03.i = internal global i32 -12
@string_const_data = private constant [11 x i8] c"ERROR STOP\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data, i32 0, i32 0), i64 10 }>
@string_const_data.1 = private constant [2 x i8] c"\0A\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.1, i32 0, i32 0), i64 1 }>
@0 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.3 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.3, i32 0, i32 0), i64 10 }>
@string_const_data.5 = private constant [2 x i8] c"\0A\00"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.5, i32 0, i32 0), i64 1 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.7 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.8 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.7, i32 0, i32 0), i64 10 }>
@string_const_data.9 = private constant [2 x i8] c"\0A\00"
@string_const.10 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.9, i32 0, i32 0), i64 1 }>
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.11 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.12 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.11, i32 0, i32 0), i64 10 }>
@string_const_data.13 = private constant [2 x i8] c"\0A\00"
@string_const.14 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.13, i32 0, i32 0), i64 1 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.15 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.16 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.15, i32 0, i32 0), i64 10 }>
@string_const_data.17 = private constant [2 x i8] c"\0A\00"
@string_const.18 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.17, i32 0, i32 0), i64 1 }>
@6 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define float @_lcompilers_abs_f32(float* %x) {
.entry:
  %_lcompilers_abs_f32 = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp oge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  store float %2, float* %_lcompilers_abs_f32, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load float, float* %x, align 4
  %4 = fneg float %3
  store float %4, float* %_lcompilers_abs_f32, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load float, float* %_lcompilers_abs_f32, align 4
  ret float %5
}

define double @_lcompilers_abs_f64(double* %x) {
.entry:
  %_lcompilers_abs_f64 = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp oge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  store double %2, double* %_lcompilers_abs_f64, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  %4 = fneg double %3
  store double %4, double* %_lcompilers_abs_f64, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load double, double* %_lcompilers_abs_f64, align 8
  ret double %5
}

define i32 @_lcompilers_abs_i32(i32* %x) {
.entry:
  %_lcompilers_abs_i32 = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = icmp sge i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i32, i32* %x, align 4
  store i32 %2, i32* %_lcompilers_abs_i32, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i32, i32* %x, align 4
  %4 = sub i32 0, %3
  store i32 %4, i32* %_lcompilers_abs_i32, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i32, i32* %_lcompilers_abs_i32, align 4
  ret i32 %5
}

define double @_lcompilers_cos_f64(double* %x) {
.entry:
  %_lcompilers_cos_f64 = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dcos(double %0)
  store double %1, double* %_lcompilers_cos_f64, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %_lcompilers_cos_f64, align 8
  ret double %2
}

declare double @_lfortran_dcos(double)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value11 = alloca double, align 8
  %call_arg_value7 = alloca double, align 8
  %call_arg_value6 = alloca double, align 8
  %call_arg_value5 = alloca double, align 8
  %call_arg_value1 = alloca double, align 8
  %call_arg_value = alloca float, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %a = alloca double, align 8
  %r1 = alloca double, align 8
  %r2 = alloca double, align 8
  %x = alloca float, align 4
  store double 4.200000e+00, double* %a, align 8
  store float 0xBFEFE8D5A0000000, float* %x, align 4
  %2 = load float, float* %x, align 4
  %3 = fadd float %2, 0x3FEFE8D5A0000000
  store float %3, float* %call_arg_value, align 4
  %4 = call float @_lcompilers_abs_f32(float* %call_arg_value)
  %5 = fcmp ogt float %4, 0x3E7AD7F2A0000000
  br i1 %5, label %then, label %else

then:                                             ; preds = %.entry
  %6 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %7 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i8* %6, i8* %7)
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %8 = call double @_lcompilers_cos_f64(double* %a)
  %9 = fadd double %8, 0x3FDF606EE0000000
  store double %9, double* %call_arg_value1, align 8
  %10 = call double @_lcompilers_abs_f64(double* %call_arg_value1)
  %11 = fcmp ogt double %10, 0x3E7AD7F2A0000000
  br i1 %11, label %then2, label %else3

then2:                                            ; preds = %ifcont
  %12 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  %13 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.6, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %12, i8* %13)
  call void @exit(i32 1)
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %14 = load double, double* %a, align 8
  %15 = call double @_lcompilers_cos_f64(double* %a)
  %16 = fadd double %14, %15
  store double %16, double* %call_arg_value5, align 8
  %17 = call double @_lcompilers_cos_f64(double* %call_arg_value5)
  %18 = fadd double 0x3FB21BD54FC5F9A7, %17
  store double %18, double* %call_arg_value6, align 8
  %19 = call double @_lcompilers_cos_f64(double* %call_arg_value6)
  %20 = fsub double %19, 0x3FE6ECC720000000
  store double %20, double* %call_arg_value7, align 8
  %21 = call double @_lcompilers_abs_f64(double* %call_arg_value7)
  %22 = fcmp ogt double %21, 0x3E7AD7F2A0000000
  br i1 %22, label %then8, label %else9

then8:                                            ; preds = %ifcont4
  %23 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.8, i32 0, i32 0), align 8
  %24 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.10, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %23, i8* %24)
  call void @exit(i32 1)
  br label %ifcont10

else9:                                            ; preds = %ifcont4
  br label %ifcont10

ifcont10:                                         ; preds = %else9, %then8
  %25 = call double @_lcompilers_cos_f64(double* %a)
  store double %25, double* %r1, align 8
  store double 0xBFDF606EEC8AC71E, double* %r2, align 8
  %26 = load double, double* %r1, align 8
  %27 = load double, double* %r2, align 8
  %28 = fsub double %26, %27
  store double %28, double* %call_arg_value11, align 8
  %29 = call double @_lcompilers_abs_f64(double* %call_arg_value11)
  %30 = fcmp ogt double %29, 1.000000e-15
  br i1 %30, label %then12, label %else13

then12:                                           ; preds = %ifcont10
  %31 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.12, i32 0, i32 0), align 8
  %32 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.14, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %31, i8* %32)
  call void @exit(i32 1)
  br label %ifcont14

else13:                                           ; preds = %ifcont10
  br label %ifcont14

ifcont14:                                         ; preds = %else13, %then12
  %33 = call i32 @_lcompilers_abs_i32(i32* @intrinsics_03.i)
  %34 = alloca i32, align 4
  store i32 %33, i32* %34, align 4
  %35 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i32* %34)
  %36 = call i64 @_lfortran_str_len(i8* %35)
  %37 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %37 to %string_descriptor*
  %38 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %35, i8** %38, align 8
  %39 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %36, i64* %39, align 4
  %40 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %42 = call i32 @_lcompilers_abs_i32(i32* @intrinsics_03.i)
  %43 = icmp ne i32 %42, 12
  br i1 %43, label %then15, label %else16

then15:                                           ; preds = %ifcont14
  %44 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.16, i32 0, i32 0), align 8
  %45 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.18, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i8* %44, i8* %45)
  call void @exit(i32 1)
  br label %ifcont17

else16:                                           ; preds = %ifcont14
  br label %ifcont17

ifcont17:                                         ; preds = %else16, %then15
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont17
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_free_argv()
