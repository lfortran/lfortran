; ModuleID = 'LFortran'
source_filename = "LFortran"

@__module_modules_11_module11_i = global i32 1
@__module_modules_11_module11_j = global i32 2
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [7 x i8] c"S-4,I4\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"i = \00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [7 x i8] c"S-4,I4\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"j = \00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @__module_modules_11_module11_access_internally() {
.entry:
  %0 = alloca i8*, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8** %0, align 8
  %1 = call i8* (i8*, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i8** %0, i32* @__module_modules_11_module11_i)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare i8* @_lcompilers_string_format_fortran(i8*, i8*, i32, i32, ...)

declare void @_lfortran_printf(i8*, ...)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = alloca i8*, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i8** %2, align 8
  %3 = call i8* (i8*, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @serialization_info.1, i32 0, i32 0), i32 0, i32 0, i8** %2, i32* @__module_modules_11_module11_j)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  call void @__module_modules_11_module11_access_internally()
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lpython_free_argv()
