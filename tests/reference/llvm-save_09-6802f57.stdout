; ModuleID = 'LFortran'
source_filename = "LFortran"

@my_sub.intarrayfirstcall = internal global [2 x i32] [i32 1, i32 2]
@my_sub.intfirstcall = internal global i32 1
@my_sub.logicalfirstcall = internal global i1 true
@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@5 = private unnamed_addr constant [2 x i8] c" \00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c" \00", align 1
@9 = private unnamed_addr constant [2 x i8] c" \00", align 1
@10 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@11 = private unnamed_addr constant [2 x i8] c" \00", align 1
@12 = private unnamed_addr constant [2 x i8] c"\08\00", align 1
@13 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@14 = private unnamed_addr constant [2 x i8] c" \00", align 1
@15 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@16 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

define void @my_sub() {
.entry:
  %array_bound18 = alloca i32, align 4
  %array_bound13 = alloca i32, align 4
  %array_bound9 = alloca i32, align 4
  %array_bound5 = alloca i32, align 4
  %array_bound1 = alloca i32, align 4
  %array_bound = alloca i32, align 4
  %__1_k = alloca i32, align 4
  %__1_t = alloca i32, align 4
  %__1_v = alloca i32, align 4
  %__libasr__created__var__0__array_constant_ = alloca [2 x i32], align 4
  %0 = alloca <2 x i32>, align 8
  %1 = getelementptr <2 x i32>, <2 x i32>* %0, i32 0, i32 0
  store i32 1, i32* %1, align 4
  %2 = getelementptr <2 x i32>, <2 x i32>* %0, i32 0, i32 1
  store i32 2, i32* %2, align 4
  %3 = getelementptr <2 x i32>, <2 x i32>* %0, i32 0, i32 0
  %4 = load i1, i1* @my_sub.logicalfirstcall, align 1
  %5 = icmp eq i1 %4, false
  %6 = select i1 %5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i8* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %7 = load i32, i32* @my_sub.intfirstcall, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i32 %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  br i1 true, label %then, label %else

then:                                             ; preds = %.entry
  store i32 1, i32* %array_bound, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %8 = load i32, i32* %array_bound, align 4
  %9 = sub i32 %8, 1
  store i32 %9, i32* %__1_k, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %ifcont
  %10 = load i32, i32* %__1_k, align 4
  %11 = add i32 %10, 1
  br i1 true, label %then2, label %else3

then2:                                            ; preds = %loop.head
  store i32 2, i32* %array_bound1, align 4
  br label %ifcont4

else3:                                            ; preds = %loop.head
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %12 = load i32, i32* %array_bound1, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %loop.body, label %loop.end

loop.body:                                        ; preds = %ifcont4
  %14 = load i32, i32* %__1_k, align 4
  %15 = add i32 %14, 1
  store i32 %15, i32* %__1_k, align 4
  %16 = load i32, i32* %__1_k, align 4
  %17 = sub i32 %16, 1
  %18 = mul i32 1, %17
  %19 = add i32 0, %18
  %20 = getelementptr [2 x i32], [2 x i32]* @my_sub.intarrayfirstcall, i32 0, i32 %19
  %21 = load i32, i32* %20, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0), i32 %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  br label %loop.head

loop.end:                                         ; preds = %ifcont4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @13, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0))
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @16, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @15, i32 0, i32 0))
  store i1 false, i1* @my_sub.logicalfirstcall, align 1
  store i32 10, i32* @my_sub.intfirstcall, align 4
  br i1 true, label %then6, label %else7

then6:                                            ; preds = %loop.end
  store i32 1, i32* %array_bound5, align 4
  br label %ifcont8

else7:                                            ; preds = %loop.end
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %then6
  %22 = load i32, i32* %array_bound5, align 4
  store i32 %22, i32* %__1_k, align 4
  %23 = load i32, i32* %__1_k, align 4
  %24 = sub i32 %23, 1
  %25 = mul i32 1, %24
  %26 = add i32 0, %25
  %27 = getelementptr [2 x i32], [2 x i32]* %__libasr__created__var__0__array_constant_, i32 0, i32 %26
  store i32 3, i32* %27, align 4
  %28 = load i32, i32* %__1_k, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %__1_k, align 4
  %30 = load i32, i32* %__1_k, align 4
  %31 = sub i32 %30, 1
  %32 = mul i32 1, %31
  %33 = add i32 0, %32
  %34 = getelementptr [2 x i32], [2 x i32]* %__libasr__created__var__0__array_constant_, i32 0, i32 %33
  store i32 4, i32* %34, align 4
  %35 = load i32, i32* %__1_k, align 4
  %36 = add i32 %35, 1
  store i32 %36, i32* %__1_k, align 4
  br i1 true, label %then10, label %else11

then10:                                           ; preds = %ifcont8
  store i32 1, i32* %array_bound9, align 4
  br label %ifcont12

else11:                                           ; preds = %ifcont8
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  %37 = load i32, i32* %array_bound9, align 4
  store i32 %37, i32* %__1_v, align 4
  br i1 true, label %then14, label %else15

then14:                                           ; preds = %ifcont12
  store i32 1, i32* %array_bound13, align 4
  br label %ifcont16

else15:                                           ; preds = %ifcont12
  br label %ifcont16

ifcont16:                                         ; preds = %else15, %then14
  %38 = load i32, i32* %array_bound13, align 4
  %39 = sub i32 %38, 1
  store i32 %39, i32* %__1_t, align 4
  br label %loop.head17

loop.head17:                                      ; preds = %loop.body22, %ifcont16
  %40 = load i32, i32* %__1_t, align 4
  %41 = add i32 %40, 1
  br i1 true, label %then19, label %else20

then19:                                           ; preds = %loop.head17
  store i32 2, i32* %array_bound18, align 4
  br label %ifcont21

else20:                                           ; preds = %loop.head17
  br label %ifcont21

ifcont21:                                         ; preds = %else20, %then19
  %42 = load i32, i32* %array_bound18, align 4
  %43 = icmp sle i32 %41, %42
  br i1 %43, label %loop.body22, label %loop.end23

loop.body22:                                      ; preds = %ifcont21
  %44 = load i32, i32* %__1_t, align 4
  %45 = add i32 %44, 1
  store i32 %45, i32* %__1_t, align 4
  %46 = load i32, i32* %__1_t, align 4
  %47 = sub i32 %46, 1
  %48 = mul i32 1, %47
  %49 = add i32 0, %48
  %50 = getelementptr [2 x i32], [2 x i32]* @my_sub.intarrayfirstcall, i32 0, i32 %49
  %51 = load i32, i32* %__1_v, align 4
  %52 = sub i32 %51, 1
  %53 = mul i32 1, %52
  %54 = add i32 0, %53
  %55 = getelementptr [2 x i32], [2 x i32]* %__libasr__created__var__0__array_constant_, i32 0, i32 %54
  %56 = load i32, i32* %55, align 4
  store i32 %56, i32* %50, align 4
  %57 = load i32, i32* %__1_v, align 4
  %58 = add i32 %57, 1
  store i32 %58, i32* %__1_v, align 4
  br label %loop.head17

loop.end23:                                       ; preds = %ifcont21
  br label %return

return:                                           ; preds = %loop.end23
  ret void
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  call void @my_sub()
  call void @my_sub()
  call void @my_sub()
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)
