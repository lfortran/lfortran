; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [15 x i8] c"I4,I4,I4,I4,I4\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [15 x i8] c"I4,I4,I4,I4,I4\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %x = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %x1 = alloca i32, align 4
  store i32 25, i32* %x1, align 4
  %2 = alloca i32, align 4
  store i32 1, i32* %2, align 4
  %3 = alloca i32, align 4
  store i32 3, i32* %3, align 4
  %4 = load i32, i32* %x1, align 4
  %5 = add i32 25, %4
  %6 = alloca i32, align 4
  store i32 %5, i32* %6, align 4
  %7 = call i8* (i8*, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i32* %x1, i32* %2, i32* %3, i32* %x1, i32* %6)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  %8 = alloca i32, align 4
  store i32 1, i32* %8, align 4
  %9 = alloca i32, align 4
  store i32 3, i32* %9, align 4
  %10 = load i32, i32* %x1, align 4
  %11 = add i32 25, %10
  %12 = alloca i32, align 4
  store i32 %11, i32* %12, align 4
  %13 = call i8* (i8*, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @serialization_info.1, i32 0, i32 0), i32 0, i32 0, i32* %x1, i32* %8, i32* %9, i32* %x1, i32* %12)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i8*, i32, i32, ...)

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_free_argv()
