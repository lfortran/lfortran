#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}


struct dimension_descriptor
{
    int32_t lower_bound, length;
};
// Forward declarations
namespace {
}

// Implementations
namespace {

void main2() {
    static int32_t a=1;
    int32_t ap=1;
    static int32_t b=2;
    int32_t bp=2;
    static float c=  1.00000000000000000e+00;
    float cp=  1.00000000000000000e+00;
    static float d=  2.00000000000000000e+00;
    float dp=  2.00000000000000000e+00;
    std::string grade_fixed="B";
    int32_t marks;
    int32_t marks_fixed=94;
    // FIXME: select case()
    std::cout << "Your grade is " << " " << grade_fixed << std::endl;
    marks = 94;
    // FIXME: select case()
    std::cout << "Your marks are " << " " << marks << std::endl;
    // FIXME: select case()
    std::cout << "Your marks are " << " " << marks << std::endl;
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
