; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [9 x i8] c"R4,R4,R4\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [3 x i8] c"R4\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@"ERROR STOP" = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define float @_lcompilers_cos_f32(float* %x) {
.entry:
  %_lcompilers_cos_f32 = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_scos(float %0)
  store float %1, float* %_lcompilers_cos_f32, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %_lcompilers_cos_f32, align 4
  ret float %2
}

declare float @_lfortran_scos(float)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %a = alloca float, align 4
  %myreal = alloca float, align 4
  %theta = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  store float 0x3FDAE147A0000000, float* %x, align 4
  store float 0x3FD6666660000000, float* %y, align 4
  store float 0x4022333340000000, float* %myreal, align 4
  store float 1.500000e+00, float* %theta, align 4
  store float 0x3FD99999A0000000, float* %a, align 4
  %v = alloca float*, align 8
  store float* null, float** %v, align 8
  %z = alloca float, align 4
  %2 = load float, float* %x, align 4
  %3 = fmul float %2, 2.000000e+00
  %4 = load float, float* %y, align 4
  %5 = fmul float %4, 2.000000e+00
  %6 = fadd float %3, %5
  %7 = fneg float %6
  %8 = call float @_lcompilers_cos_f32(float* %theta)
  %9 = fmul float %7, %8
  store float %9, float* %z, align 4
  store float* %myreal, float** %v, align 8
  %10 = alloca i64, align 8
  %11 = load float, float* %a, align 4
  %12 = load float, float* %z, align 4
  %13 = fadd float %11, %12
  %14 = alloca float, align 4
  store float %13, float* %14, align 4
  %15 = load float, float* %a, align 4
  %16 = load float, float* %z, align 4
  %17 = fsub float %15, %16
  %18 = alloca float, align 4
  store float %17, float* %18, align 4
  %19 = load float*, float** %v, align 8
  %20 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @serialization_info, i32 0, i32 0), i64* %10, i32 0, i32 0, float* %14, float* %18, float* %19)
  %21 = load i64, i64* %10, align 4
  %22 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %22 to %string_descriptor*
  %23 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %20, i8** %23, align 8
  %24 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %21, i64* %24, align 4
  %25 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %28 = load i64, i64* %27, align 4
  %29 = trunc i64 %28 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %26, i32 %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  %30 = load float*, float** %v, align 8
  %31 = load float*, float** %v, align 8
  %32 = load float, float* %31, align 4
  %33 = fmul float %32, 0x4012666660000000
  store float %33, float* %30, align 4
  %34 = alloca i64, align 8
  %35 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.1, i32 0, i32 0), i64* %34, i32 0, i32 0, float* %myreal)
  %36 = load i64, i64* %34, align 4
  %37 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc1 = bitcast i8* %37 to %string_descriptor*
  %38 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  store i8* %35, i8** %38, align 8
  %39 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  store i64 %36, i64* %39, align 4
  %40 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  %43 = load i64, i64* %42, align 4
  %44 = trunc i64 %43 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %41, i32 %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  %45 = load float, float* %myreal, align 4
  %46 = fsub float %45, 0x4044EE1480000000
  %47 = fcmp ogt float %46, 0x3EE4F8B580000000
  %48 = load float, float* %myreal, align 4
  %49 = fsub float %48, 0x4044EE1480000000
  %50 = fcmp olt float %49, 0xBEE4F8B580000000
  %51 = icmp eq i1 %47, false
  %52 = select i1 %51, i1 %50, i1 %47
  br i1 %52, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
