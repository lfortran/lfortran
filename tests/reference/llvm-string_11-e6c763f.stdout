; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [31 x i8] c"                              \00", align 1
@1 = private unnamed_addr constant [11 x i8] c"          \00", align 1
@2 = private unnamed_addr constant [15 x i8] c"This is a test\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@6 = private unnamed_addr constant [18 x i8] c"test is not found\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c" \00", align 1
@9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@10 = private unnamed_addr constant [25 x i8] c"test is found at index: \00", align 1
@11 = private unnamed_addr constant [9 x i8] c"%s%s%d%s\00", align 1

declare i32 @__module_lfortran_intrinsic_builtin_len(i8**, i32*)

declare void @__module_lfortran_intrinsic_builtin_move_alloc(i32*, i32*)

define void @__module_lfortran_intrinsic_string_date_and_time(i8** %date, i8** %time, i8** %zone, %array* %values) {
.entry:
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @__module_lfortran_intrinsic_string_index(i8** %string_, i8** %substring_) {
.entry:
  %found = alloca i1, align 1
  %i = alloca i32, align 4
  %idx = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %pos = alloca i32, align 4
  store i1 true, i1* %found, align 1
  store i32 0, i32* %idx, align 4
  store i32 1, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %ifcont5, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = call i32 @_lfortran_str_len(i8** %string_)
  %2 = icmp slt i32 %0, %1
  %3 = load i1, i1* %found, align 1
  %4 = and i1 %2, %3
  br i1 %4, label %loop.body, label %loop.end6

loop.body:                                        ; preds = %loop.head
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont, %loop.body
  %5 = load i32, i32* %j, align 4
  %6 = call i32 @_lfortran_str_len(i8** %substring_)
  %7 = icmp slt i32 %5, %6
  %8 = load i1, i1* %found, align 1
  %9 = and i1 %7, %8
  br i1 %9, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %k, align 4
  %12 = add i32 %10, %11
  store i32 %12, i32* %pos, align 4
  %13 = load i32, i32* %pos, align 4
  %14 = sub i32 %13, 1
  %15 = load i8*, i8** %string_, align 8
  %16 = getelementptr i8, i8* %15, i32 %14
  %17 = alloca i8*, align 8
  store i8* %16, i8** %17, align 8
  %18 = load i8*, i8** %17, align 8
  %19 = load i32, i32* %j, align 4
  %20 = sub i32 %19, 1
  %21 = load i8*, i8** %substring_, align 8
  %22 = getelementptr i8, i8* %21, i32 %20
  %23 = alloca i8*, align 8
  store i8* %22, i8** %23, align 8
  %24 = load i8*, i8** %23, align 8
  %25 = load i8, i8* %18, align 1
  %26 = load i8, i8* %24, align 1
  %27 = icmp ne i8 %25, %26
  br i1 %27, label %then, label %else

then:                                             ; preds = %loop.body2
  store i1 false, i1* %found, align 1
  br label %ifcont

else:                                             ; preds = %loop.body2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %28 = load i32, i32* %k, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %k, align 4
  %30 = load i32, i32* %j, align 4
  %31 = add i32 %30, 1
  store i32 %31, i32* %j, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %32 = load i1, i1* %found, align 1
  br i1 %32, label %then3, label %else4

then3:                                            ; preds = %loop.end
  %33 = load i32, i32* %i, align 4
  store i32 %33, i32* %idx, align 4
  store i1 false, i1* %found, align 1
  br label %ifcont5

else4:                                            ; preds = %loop.end
  store i1 true, i1* %found, align 1
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  %34 = load i32, i32* %i, align 4
  %35 = add i32 %34, 1
  store i32 %35, i32* %i, align 4
  br label %loop.head

loop.end6:                                        ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end6
  %36 = load i32, i32* %idx, align 4
  ret i32 %36
}

declare i32 @_lfortran_str_len(i8**)

define i32 @main() {
.entry:
  %mystring = alloca i8*, align 8
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @0, i32 0, i32 0), i8** %mystring, align 8
  %teststring = alloca i8*, align 8
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i32 0, i32 0), i8** %teststring, align 8
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i32 0, i32 0), i8** %mystring, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8** %teststring, align 8
  %0 = call i32 @__module_lfortran_intrinsic_string_index(i8** %mystring, i8** %teststring)
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  br label %ifcont

else:                                             ; preds = %.entry
  %2 = call i32 @__module_lfortran_intrinsic_string_index(i8** %mystring, i8** %teststring)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0), i32 %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
