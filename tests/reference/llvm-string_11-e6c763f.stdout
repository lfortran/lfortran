; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@string_const_data = private constant [14 x i8] c"This is a test"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([14 x i8], [14 x i8]* @string_const_data, i32 0, i32 0), i64 14 }>
@string_const_data.1 = private constant [4 x i8] c"test"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.1, i32 0, i32 0), i64 4 }>
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.3 = private constant [17 x i8] c"test is not found"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([17 x i8], [17 x i8]* @string_const_data.3, i32 0, i32 0), i64 17 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [13 x i8] c"S-DESC-24,I4\00", align 1
@string_const_data.5 = private constant [24 x i8] c"test is found at index: "
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([24 x i8], [24 x i8]* @string_const_data.5, i32 0, i32 0), i64 24 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @_lcompilers_index_str(%string_descriptor* %str, %string_descriptor* %substr, i1* %back, i32* %kind) {
.entry:
  %_lcompilers_index_str = alloca i32, align 4
  %found = alloca i1, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %pos = alloca i32, align 4
  store i32 0, i32* %_lcompilers_index_str, align 4
  store i32 1, i32* %i, align 4
  store i1 true, i1* %found, align 1
  %0 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 1
  %1 = load i64, i64* %0, align 4
  %2 = trunc i64 %1 to i32
  %3 = getelementptr %string_descriptor, %string_descriptor* %substr, i32 0, i32 1
  %4 = load i64, i64* %3, align 4
  %5 = trunc i64 %4 to i32
  %6 = icmp slt i32 %2, %5
  br i1 %6, label %then, label %else

then:                                             ; preds = %.entry
  store i1 false, i1* %found, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %loop.head

loop.head:                                        ; preds = %ifcont10, %ifcont
  %7 = load i32, i32* %i, align 4
  %8 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 1
  %9 = load i64, i64* %8, align 4
  %10 = trunc i64 %9 to i32
  %11 = add i32 %10, 1
  %12 = icmp slt i32 %7, %11
  %13 = load i1, i1* %found, align 1
  %14 = zext i1 %13 to i32
  %15 = icmp eq i32 %14, 1
  %16 = icmp eq i1 %12, false
  %17 = select i1 %16, i1 %12, i1 %15
  br i1 %17, label %loop.body, label %loop.end11

loop.body:                                        ; preds = %loop.head
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont7, %loop.body
  %18 = load i32, i32* %j, align 4
  %19 = getelementptr %string_descriptor, %string_descriptor* %substr, i32 0, i32 1
  %20 = load i64, i64* %19, align 4
  %21 = trunc i64 %20 to i32
  %22 = icmp sle i32 %18, %21
  %23 = load i1, i1* %found, align 1
  %24 = zext i1 %23 to i32
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i1 %22, false
  %27 = select i1 %26, i1 %22, i1 %25
  br i1 %27, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %k, align 4
  %30 = add i32 %28, %29
  store i32 %30, i32* %pos, align 4
  %31 = load i32, i32* %pos, align 4
  %32 = load i32, i32* %pos, align 4
  %33 = sext i32 %31 to i64
  %34 = sext i32 %32 to i64
  %35 = sub i64 %34, %33
  %36 = add i64 %35, 1
  %37 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = sext i32 %31 to i64
  %40 = sub i64 %39, 1
  %StrSliceGEP = getelementptr i8, i8* %38, i64 %40
  %StrSlice_StrView = alloca %string_descriptor, align 8
  %41 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView, i32 0, i32 0
  store i8* %StrSliceGEP, i8** %41, align 8
  %42 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView, i32 0, i32 1
  store i64 %36, i64* %42, align 4
  %43 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView, i32 0, i32 1
  %46 = load i64, i64* %45, align 4
  %47 = load i32, i32* %j, align 4
  %48 = load i32, i32* %j, align 4
  %49 = sext i32 %47 to i64
  %50 = sext i32 %48 to i64
  %51 = sub i64 %50, %49
  %52 = add i64 %51, 1
  %53 = getelementptr %string_descriptor, %string_descriptor* %substr, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = sext i32 %47 to i64
  %56 = sub i64 %55, 1
  %StrSliceGEP3 = getelementptr i8, i8* %54, i64 %56
  %StrSlice_StrView4 = alloca %string_descriptor, align 8
  %57 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView4, i32 0, i32 0
  store i8* %StrSliceGEP3, i8** %57, align 8
  %58 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView4, i32 0, i32 1
  store i64 %52, i64* %58, align 4
  %59 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView4, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView4, i32 0, i32 1
  %62 = load i64, i64* %61, align 4
  %63 = call i32 @str_compare(i8* %44, i64 %46, i8* %60, i64 %62)
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %then5, label %else6

then5:                                            ; preds = %loop.body2
  store i1 false, i1* %found, align 1
  br label %ifcont7

else6:                                            ; preds = %loop.body2
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  %65 = load i32, i32* %j, align 4
  %66 = add i32 %65, 1
  store i32 %66, i32* %j, align 4
  %67 = load i32, i32* %k, align 4
  %68 = add i32 %67, 1
  store i32 %68, i32* %k, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %69 = load i1, i1* %found, align 1
  %70 = zext i1 %69 to i32
  %71 = icmp eq i32 %70, 1
  br i1 %71, label %then8, label %else9

then8:                                            ; preds = %loop.end
  %72 = load i32, i32* %i, align 4
  store i32 %72, i32* %_lcompilers_index_str, align 4
  %73 = load i1, i1* %back, align 1
  store i1 %73, i1* %found, align 1
  br label %ifcont10

else9:                                            ; preds = %loop.end
  store i1 true, i1* %found, align 1
  br label %ifcont10

ifcont10:                                         ; preds = %else9, %then8
  %74 = load i32, i32* %i, align 4
  %75 = add i32 %74, 1
  store i32 %75, i32* %i, align 4
  br label %loop.head

loop.end11:                                       ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end11
  %76 = load i32, i32* %_lcompilers_index_str, align 4
  ret i32 %76
}

define i32 @_lcompilers_index_str1(%string_descriptor* %str, %string_descriptor* %substr, i1* %back, i32* %kind) {
.entry:
  %_lcompilers_index_str1 = alloca i32, align 4
  %found = alloca i1, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %pos = alloca i32, align 4
  store i32 0, i32* %_lcompilers_index_str1, align 4
  store i32 1, i32* %i, align 4
  store i1 true, i1* %found, align 1
  %0 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 1
  %1 = load i64, i64* %0, align 4
  %2 = trunc i64 %1 to i32
  %3 = getelementptr %string_descriptor, %string_descriptor* %substr, i32 0, i32 1
  %4 = load i64, i64* %3, align 4
  %5 = trunc i64 %4 to i32
  %6 = icmp slt i32 %2, %5
  br i1 %6, label %then, label %else

then:                                             ; preds = %.entry
  store i1 false, i1* %found, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %loop.head

loop.head:                                        ; preds = %ifcont10, %ifcont
  %7 = load i32, i32* %i, align 4
  %8 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 1
  %9 = load i64, i64* %8, align 4
  %10 = trunc i64 %9 to i32
  %11 = add i32 %10, 1
  %12 = icmp slt i32 %7, %11
  %13 = load i1, i1* %found, align 1
  %14 = zext i1 %13 to i32
  %15 = icmp eq i32 %14, 1
  %16 = icmp eq i1 %12, false
  %17 = select i1 %16, i1 %12, i1 %15
  br i1 %17, label %loop.body, label %loop.end11

loop.body:                                        ; preds = %loop.head
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont7, %loop.body
  %18 = load i32, i32* %j, align 4
  %19 = getelementptr %string_descriptor, %string_descriptor* %substr, i32 0, i32 1
  %20 = load i64, i64* %19, align 4
  %21 = trunc i64 %20 to i32
  %22 = icmp sle i32 %18, %21
  %23 = load i1, i1* %found, align 1
  %24 = zext i1 %23 to i32
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i1 %22, false
  %27 = select i1 %26, i1 %22, i1 %25
  br i1 %27, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %k, align 4
  %30 = add i32 %28, %29
  store i32 %30, i32* %pos, align 4
  %31 = load i32, i32* %pos, align 4
  %32 = load i32, i32* %pos, align 4
  %33 = sext i32 %31 to i64
  %34 = sext i32 %32 to i64
  %35 = sub i64 %34, %33
  %36 = add i64 %35, 1
  %37 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = sext i32 %31 to i64
  %40 = sub i64 %39, 1
  %StrSliceGEP = getelementptr i8, i8* %38, i64 %40
  %StrSlice_StrView = alloca %string_descriptor, align 8
  %41 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView, i32 0, i32 0
  store i8* %StrSliceGEP, i8** %41, align 8
  %42 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView, i32 0, i32 1
  store i64 %36, i64* %42, align 4
  %43 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView, i32 0, i32 1
  %46 = load i64, i64* %45, align 4
  %47 = load i32, i32* %j, align 4
  %48 = load i32, i32* %j, align 4
  %49 = sext i32 %47 to i64
  %50 = sext i32 %48 to i64
  %51 = sub i64 %50, %49
  %52 = add i64 %51, 1
  %53 = getelementptr %string_descriptor, %string_descriptor* %substr, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = sext i32 %47 to i64
  %56 = sub i64 %55, 1
  %StrSliceGEP3 = getelementptr i8, i8* %54, i64 %56
  %StrSlice_StrView4 = alloca %string_descriptor, align 8
  %57 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView4, i32 0, i32 0
  store i8* %StrSliceGEP3, i8** %57, align 8
  %58 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView4, i32 0, i32 1
  store i64 %52, i64* %58, align 4
  %59 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView4, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView4, i32 0, i32 1
  %62 = load i64, i64* %61, align 4
  %63 = call i32 @str_compare(i8* %44, i64 %46, i8* %60, i64 %62)
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %then5, label %else6

then5:                                            ; preds = %loop.body2
  store i1 false, i1* %found, align 1
  br label %ifcont7

else6:                                            ; preds = %loop.body2
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  %65 = load i32, i32* %j, align 4
  %66 = add i32 %65, 1
  store i32 %66, i32* %j, align 4
  %67 = load i32, i32* %k, align 4
  %68 = add i32 %67, 1
  store i32 %68, i32* %k, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %69 = load i1, i1* %found, align 1
  %70 = zext i1 %69 to i32
  %71 = icmp eq i32 %70, 1
  br i1 %71, label %then8, label %else9

then8:                                            ; preds = %loop.end
  %72 = load i32, i32* %i, align 4
  store i32 %72, i32* %_lcompilers_index_str1, align 4
  %73 = load i1, i1* %back, align 1
  store i1 %73, i1* %found, align 1
  br label %ifcont10

else9:                                            ; preds = %loop.end
  store i1 true, i1* %found, align 1
  br label %ifcont10

ifcont10:                                         ; preds = %else9, %then8
  %74 = load i32, i32* %i, align 4
  %75 = add i32 %74, 1
  store i32 %75, i32* %i, align 4
  br label %loop.head

loop.end11:                                       ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end11
  %76 = load i32, i32* %_lcompilers_index_str1, align 4
  ret i32 %76
}

declare i32 @str_compare(i8*, i64, i8*, i64)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value3 = alloca i32, align 4
  %call_arg_value2 = alloca i1, align 1
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i1, align 1
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %mystring = alloca %string_descriptor, align 8
  store %string_descriptor zeroinitializer, %string_descriptor* %mystring, align 1
  %2 = getelementptr %string_descriptor, %string_descriptor* %mystring, i32 0, i32 1
  store i64 30, i64* %2, align 4
  %3 = getelementptr %string_descriptor, %string_descriptor* %mystring, i32 0, i32 0
  %4 = call i8* @_lfortran_malloc(i64 30)
  store i8* %4, i8** %3, align 8
  %teststring = alloca %string_descriptor, align 8
  store %string_descriptor zeroinitializer, %string_descriptor* %teststring, align 1
  %5 = getelementptr %string_descriptor, %string_descriptor* %teststring, i32 0, i32 1
  store i64 10, i64* %5, align 4
  %6 = getelementptr %string_descriptor, %string_descriptor* %teststring, i32 0, i32 0
  %7 = call i8* @_lfortran_malloc(i64 10)
  store i8* %7, i8** %6, align 8
  %8 = getelementptr %string_descriptor, %string_descriptor* %mystring, i32 0, i32 0
  %9 = getelementptr %string_descriptor, %string_descriptor* %mystring, i32 0, i32 1
  %10 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  call void @_lfortran_strcpy(i8** %8, i64* %9, i8 0, i8 0, i8* %10, i64 14)
  %11 = getelementptr %string_descriptor, %string_descriptor* %teststring, i32 0, i32 0
  %12 = getelementptr %string_descriptor, %string_descriptor* %teststring, i32 0, i32 1
  %13 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void @_lfortran_strcpy(i8** %11, i64* %12, i8 0, i8 0, i8* %13, i64 4)
  store i1 false, i1* %call_arg_value, align 1
  store i32 4, i32* %call_arg_value1, align 4
  %14 = call i32 @_lcompilers_index_str(%string_descriptor* %mystring, %string_descriptor* %teststring, i1* %call_arg_value, i32* %call_arg_value1)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %then, label %else

then:                                             ; preds = %.entry
  %16 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %16, i32 17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  %17 = alloca i64, align 8
  store i1 false, i1* %call_arg_value2, align 1
  store i32 4, i32* %call_arg_value3, align 4
  %18 = call i32 @_lcompilers_index_str1(%string_descriptor* %mystring, %string_descriptor* %teststring, i1* %call_arg_value2, i32* %call_arg_value3)
  %19 = alloca i32, align 4
  store i32 %18, i32* %19, align 4
  %20 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @serialization_info, i32 0, i32 0), i64* %17, i32 0, i32 0, %string_descriptor* @string_const.6, i32* %19)
  %21 = load i64, i64* %17, align 4
  %stringFormat_desc = alloca %string_descriptor, align 8
  %22 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %20, i8** %22, align 8
  %23 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %21, i64* %23, align 4
  %24 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %27 = load i64, i64* %26, align 4
  %28 = trunc i64 %27 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %25, i32 %28, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_strcpy(i8**, i64*, i8, i8, i8*, i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare void @_lpython_free_argv()
