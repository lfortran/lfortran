; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [31 x i8] c"                              \00", align 1
@1 = private unnamed_addr constant [11 x i8] c"          \00", align 1
@2 = private unnamed_addr constant [15 x i8] c"This is a test\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@6 = private unnamed_addr constant [18 x i8] c"test is not found\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c" \00", align 1
@9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@10 = private unnamed_addr constant [25 x i8] c"test is found at index: \00", align 1
@11 = private unnamed_addr constant [9 x i8] c"%s%s%d%s\00", align 1

declare i32 @__module_lfortran_intrinsic_builtin_len(i8**, i32*, i1*)

define i32 @__module_lfortran_intrinsic_string_index(i8** %string_, i8** %substring_) {
.entry:
  %call_arg_value2 = alloca i1, align 1
  %call_arg_value = alloca i1, align 1
  %found = alloca i1, align 1
  %i = alloca i32, align 4
  %idx = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %pos = alloca i32, align 4
  store i1 true, i1* %found, align 1
  store i32 0, i32* %idx, align 4
  store i32 1, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %ifcont12, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = alloca i32, align 4
  store i1 false, i1* %call_arg_value, align 1
  %2 = call i32 @_lfortran_str_len(i8** %string_)
  %3 = icmp slt i32 %0, %2
  %4 = load i1, i1* %found, align 1
  %5 = icmp eq i1 %3, false
  %6 = alloca i1, align 1
  br i1 %5, label %then, label %else

then:                                             ; preds = %loop.head
  store i1 %3, i1* %6, align 1
  br label %ifcont

else:                                             ; preds = %loop.head
  store i1 %4, i1* %6, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %7 = load i1, i1* %6, align 1
  br i1 %7, label %loop.body, label %loop.end13

loop.body:                                        ; preds = %ifcont
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont9, %loop.body
  %8 = load i32, i32* %j, align 4
  %9 = alloca i32, align 4
  store i1 false, i1* %call_arg_value2, align 1
  %10 = call i32 @_lfortran_str_len(i8** %substring_)
  %11 = icmp slt i32 %8, %10
  %12 = load i1, i1* %found, align 1
  %13 = icmp eq i1 %11, false
  %14 = alloca i1, align 1
  br i1 %13, label %then3, label %else4

then3:                                            ; preds = %loop.head1
  store i1 %11, i1* %14, align 1
  br label %ifcont5

else4:                                            ; preds = %loop.head1
  store i1 %12, i1* %14, align 1
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  %15 = load i1, i1* %14, align 1
  br i1 %15, label %loop.body6, label %loop.end

loop.body6:                                       ; preds = %ifcont5
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %k, align 4
  %18 = add i32 %16, %17
  store i32 %18, i32* %pos, align 4
  %19 = load i32, i32* %pos, align 4
  %20 = load i8*, i8** %string_, align 8
  %21 = call i8* @_lfortran_str_copy(i8* %20, i32 %19, i32 %19)
  %22 = alloca i8*, align 8
  store i8* %21, i8** %22, align 8
  %23 = load i8*, i8** %22, align 8
  %24 = load i32, i32* %j, align 4
  %25 = load i8*, i8** %substring_, align 8
  %26 = call i8* @_lfortran_str_copy(i8* %25, i32 %24, i32 %24)
  %27 = alloca i8*, align 8
  store i8* %26, i8** %27, align 8
  %28 = load i8*, i8** %27, align 8
  %29 = alloca i8*, align 8
  store i8* %23, i8** %29, align 8
  %30 = alloca i8*, align 8
  store i8* %28, i8** %30, align 8
  %31 = call i1 @_lpython_str_compare_noteq(i8** %29, i8** %30)
  br i1 %31, label %then7, label %else8

then7:                                            ; preds = %loop.body6
  store i1 false, i1* %found, align 1
  br label %ifcont9

else8:                                            ; preds = %loop.body6
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %32 = load i32, i32* %k, align 4
  %33 = add i32 %32, 1
  store i32 %33, i32* %k, align 4
  %34 = load i32, i32* %j, align 4
  %35 = add i32 %34, 1
  store i32 %35, i32* %j, align 4
  br label %loop.head1

loop.end:                                         ; preds = %ifcont5
  %36 = load i1, i1* %found, align 1
  br i1 %36, label %then10, label %else11

then10:                                           ; preds = %loop.end
  %37 = load i32, i32* %i, align 4
  store i32 %37, i32* %idx, align 4
  store i1 false, i1* %found, align 1
  br label %ifcont12

else11:                                           ; preds = %loop.end
  store i1 true, i1* %found, align 1
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  %38 = load i32, i32* %i, align 4
  %39 = add i32 %38, 1
  store i32 %39, i32* %i, align 4
  br label %loop.head

loop.end13:                                       ; preds = %ifcont
  br label %return

return:                                           ; preds = %loop.end13
  %40 = load i32, i32* %idx, align 4
  ret i32 %40
}

declare i32 @_lfortran_str_len(i8**)

declare i8* @_lfortran_str_copy(i8*, i32, i32)

declare i1 @_lpython_str_compare_noteq(i8**, i8**)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %mystring = alloca i8*, align 8
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @0, i32 0, i32 0), i8** %mystring, align 8
  %teststring = alloca i8*, align 8
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i32 0, i32 0), i8** %teststring, align 8
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i32 0, i32 0), i8** %mystring, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8** %teststring, align 8
  %2 = call i32 @__module_lfortran_intrinsic_string_index(i8** %mystring, i8** %teststring)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = call i32 @__module_lfortran_intrinsic_string_index(i8** %mystring, i8** %teststring)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0), i32 %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)
