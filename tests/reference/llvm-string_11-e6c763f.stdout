; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@string_const_data = private constant [14 x i8] c"This is a test"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([14 x i8], [14 x i8]* @string_const_data, i32 0, i32 0), i64 14 }>
@string_const_data.1 = private constant [4 x i8] c"test"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.1, i32 0, i32 0), i64 4 }>
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.3 = private constant [17 x i8] c"test is not found"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([17 x i8], [17 x i8]* @string_const_data.3, i32 0, i32 0), i64 17 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [13 x i8] c"S-DESC-24,I4\00", align 1
@string_const_data.5 = private constant [24 x i8] c"test is found at index: "
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([24 x i8], [24 x i8]* @string_const_data.5, i32 0, i32 0), i64 24 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @_lcompilers_index_str(%string_descriptor* %str, %string_descriptor* %substr, i1* %back, i32* %kind) {
.entry:
  %_lcompilers_index_str = alloca i32, align 4
  %found = alloca i1, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %pos = alloca i32, align 4
  store i32 0, i32* %_lcompilers_index_str, align 4
  store i32 1, i32* %i, align 4
  store i1 true, i1* %found, align 1
  %0 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 1
  %1 = load i64, i64* %0, align 4
  %2 = trunc i64 %1 to i32
  %3 = getelementptr %string_descriptor, %string_descriptor* %substr, i32 0, i32 1
  %4 = load i64, i64* %3, align 4
  %5 = trunc i64 %4 to i32
  %6 = icmp slt i32 %2, %5
  br i1 %6, label %then, label %else

then:                                             ; preds = %.entry
  store i1 false, i1* %found, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %loop.head

loop.head:                                        ; preds = %ifcont9, %ifcont
  %7 = load i32, i32* %i, align 4
  %8 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 1
  %9 = load i64, i64* %8, align 4
  %10 = trunc i64 %9 to i32
  %11 = add i32 %10, 1
  %12 = icmp slt i32 %7, %11
  %13 = load i1, i1* %found, align 1
  %14 = zext i1 %13 to i32
  %15 = icmp eq i32 %14, 1
  %16 = icmp eq i1 %12, false
  %17 = select i1 %16, i1 %12, i1 %15
  br i1 %17, label %loop.body, label %loop.end10

loop.body:                                        ; preds = %loop.head
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont6, %loop.body
  %18 = load i32, i32* %j, align 4
  %19 = getelementptr %string_descriptor, %string_descriptor* %substr, i32 0, i32 1
  %20 = load i64, i64* %19, align 4
  %21 = trunc i64 %20 to i32
  %22 = icmp sle i32 %18, %21
  %23 = load i1, i1* %found, align 1
  %24 = zext i1 %23 to i32
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i1 %22, false
  %27 = select i1 %26, i1 %22, i1 %25
  br i1 %27, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %k, align 4
  %30 = add i32 %28, %29
  store i32 %30, i32* %pos, align 4
  %31 = load i32, i32* %pos, align 4
  %32 = load i32, i32* %pos, align 4
  %33 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = sext i32 %31 to i64
  %36 = sext i32 %32 to i64
  %37 = call i8* @_lfortran_str_slice_fortran(i8* %34, i64 %35, i64 %36)
  %38 = load i32, i32* %pos, align 4
  %39 = load i32, i32* %pos, align 4
  %40 = sub i32 %38, %39
  %41 = add i32 %40, 1
  %42 = sext i32 %41 to i64
  %43 = call i8* @_lfortran_malloc(i64 16)
  %stringSection_desc = bitcast i8* %43 to %string_descriptor*
  %44 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc, i32 0, i32 0
  store i8* %37, i8** %44, align 8
  %45 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc, i32 0, i32 1
  store i64 %42, i64* %45, align 4
  %46 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc, i32 0, i32 1
  %49 = load i64, i64* %48, align 4
  %50 = load i32, i32* %j, align 4
  %51 = load i32, i32* %j, align 4
  %52 = getelementptr %string_descriptor, %string_descriptor* %substr, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = sext i32 %50 to i64
  %55 = sext i32 %51 to i64
  %56 = call i8* @_lfortran_str_slice_fortran(i8* %53, i64 %54, i64 %55)
  %57 = load i32, i32* %j, align 4
  %58 = load i32, i32* %j, align 4
  %59 = sub i32 %57, %58
  %60 = add i32 %59, 1
  %61 = sext i32 %60 to i64
  %62 = call i8* @_lfortran_malloc(i64 16)
  %stringSection_desc3 = bitcast i8* %62 to %string_descriptor*
  %63 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc3, i32 0, i32 0
  store i8* %56, i8** %63, align 8
  %64 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc3, i32 0, i32 1
  store i64 %61, i64* %64, align 4
  %65 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc3, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc3, i32 0, i32 1
  %68 = load i64, i64* %67, align 4
  %69 = call i32 @str_compare(i8* %47, i64 %49, i8* %66, i64 %68)
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %then4, label %else5

then4:                                            ; preds = %loop.body2
  store i1 false, i1* %found, align 1
  br label %ifcont6

else5:                                            ; preds = %loop.body2
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %71 = load i32, i32* %j, align 4
  %72 = add i32 %71, 1
  store i32 %72, i32* %j, align 4
  %73 = load i32, i32* %k, align 4
  %74 = add i32 %73, 1
  store i32 %74, i32* %k, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %75 = load i1, i1* %found, align 1
  %76 = zext i1 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %then7, label %else8

then7:                                            ; preds = %loop.end
  %78 = load i32, i32* %i, align 4
  store i32 %78, i32* %_lcompilers_index_str, align 4
  %79 = load i1, i1* %back, align 1
  store i1 %79, i1* %found, align 1
  br label %ifcont9

else8:                                            ; preds = %loop.end
  store i1 true, i1* %found, align 1
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %80 = load i32, i32* %i, align 4
  %81 = add i32 %80, 1
  store i32 %81, i32* %i, align 4
  br label %loop.head

loop.end10:                                       ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end10
  %82 = load i32, i32* %_lcompilers_index_str, align 4
  ret i32 %82
}

define i32 @_lcompilers_index_str1(%string_descriptor* %str, %string_descriptor* %substr, i1* %back, i32* %kind) {
.entry:
  %_lcompilers_index_str1 = alloca i32, align 4
  %found = alloca i1, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %pos = alloca i32, align 4
  store i32 0, i32* %_lcompilers_index_str1, align 4
  store i32 1, i32* %i, align 4
  store i1 true, i1* %found, align 1
  %0 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 1
  %1 = load i64, i64* %0, align 4
  %2 = trunc i64 %1 to i32
  %3 = getelementptr %string_descriptor, %string_descriptor* %substr, i32 0, i32 1
  %4 = load i64, i64* %3, align 4
  %5 = trunc i64 %4 to i32
  %6 = icmp slt i32 %2, %5
  br i1 %6, label %then, label %else

then:                                             ; preds = %.entry
  store i1 false, i1* %found, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %loop.head

loop.head:                                        ; preds = %ifcont9, %ifcont
  %7 = load i32, i32* %i, align 4
  %8 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 1
  %9 = load i64, i64* %8, align 4
  %10 = trunc i64 %9 to i32
  %11 = add i32 %10, 1
  %12 = icmp slt i32 %7, %11
  %13 = load i1, i1* %found, align 1
  %14 = zext i1 %13 to i32
  %15 = icmp eq i32 %14, 1
  %16 = icmp eq i1 %12, false
  %17 = select i1 %16, i1 %12, i1 %15
  br i1 %17, label %loop.body, label %loop.end10

loop.body:                                        ; preds = %loop.head
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont6, %loop.body
  %18 = load i32, i32* %j, align 4
  %19 = getelementptr %string_descriptor, %string_descriptor* %substr, i32 0, i32 1
  %20 = load i64, i64* %19, align 4
  %21 = trunc i64 %20 to i32
  %22 = icmp sle i32 %18, %21
  %23 = load i1, i1* %found, align 1
  %24 = zext i1 %23 to i32
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i1 %22, false
  %27 = select i1 %26, i1 %22, i1 %25
  br i1 %27, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %k, align 4
  %30 = add i32 %28, %29
  store i32 %30, i32* %pos, align 4
  %31 = load i32, i32* %pos, align 4
  %32 = load i32, i32* %pos, align 4
  %33 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = sext i32 %31 to i64
  %36 = sext i32 %32 to i64
  %37 = call i8* @_lfortran_str_slice_fortran(i8* %34, i64 %35, i64 %36)
  %38 = load i32, i32* %pos, align 4
  %39 = load i32, i32* %pos, align 4
  %40 = sub i32 %38, %39
  %41 = add i32 %40, 1
  %42 = sext i32 %41 to i64
  %43 = call i8* @_lfortran_malloc(i64 16)
  %stringSection_desc = bitcast i8* %43 to %string_descriptor*
  %44 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc, i32 0, i32 0
  store i8* %37, i8** %44, align 8
  %45 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc, i32 0, i32 1
  store i64 %42, i64* %45, align 4
  %46 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc, i32 0, i32 1
  %49 = load i64, i64* %48, align 4
  %50 = load i32, i32* %j, align 4
  %51 = load i32, i32* %j, align 4
  %52 = getelementptr %string_descriptor, %string_descriptor* %substr, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = sext i32 %50 to i64
  %55 = sext i32 %51 to i64
  %56 = call i8* @_lfortran_str_slice_fortran(i8* %53, i64 %54, i64 %55)
  %57 = load i32, i32* %j, align 4
  %58 = load i32, i32* %j, align 4
  %59 = sub i32 %57, %58
  %60 = add i32 %59, 1
  %61 = sext i32 %60 to i64
  %62 = call i8* @_lfortran_malloc(i64 16)
  %stringSection_desc3 = bitcast i8* %62 to %string_descriptor*
  %63 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc3, i32 0, i32 0
  store i8* %56, i8** %63, align 8
  %64 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc3, i32 0, i32 1
  store i64 %61, i64* %64, align 4
  %65 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc3, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc3, i32 0, i32 1
  %68 = load i64, i64* %67, align 4
  %69 = call i32 @str_compare(i8* %47, i64 %49, i8* %66, i64 %68)
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %then4, label %else5

then4:                                            ; preds = %loop.body2
  store i1 false, i1* %found, align 1
  br label %ifcont6

else5:                                            ; preds = %loop.body2
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %71 = load i32, i32* %j, align 4
  %72 = add i32 %71, 1
  store i32 %72, i32* %j, align 4
  %73 = load i32, i32* %k, align 4
  %74 = add i32 %73, 1
  store i32 %74, i32* %k, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %75 = load i1, i1* %found, align 1
  %76 = zext i1 %75 to i32
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %then7, label %else8

then7:                                            ; preds = %loop.end
  %78 = load i32, i32* %i, align 4
  store i32 %78, i32* %_lcompilers_index_str1, align 4
  %79 = load i1, i1* %back, align 1
  store i1 %79, i1* %found, align 1
  br label %ifcont9

else8:                                            ; preds = %loop.end
  store i1 true, i1* %found, align 1
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %80 = load i32, i32* %i, align 4
  %81 = add i32 %80, 1
  store i32 %81, i32* %i, align 4
  br label %loop.head

loop.end10:                                       ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end10
  %82 = load i32, i32* %_lcompilers_index_str1, align 4
  ret i32 %82
}

declare i8* @_lfortran_str_slice_fortran(i8*, i64, i64)

declare i8* @_lfortran_malloc(i64)

declare i32 @str_compare(i8*, i64, i8*, i64)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value3 = alloca i32, align 4
  %call_arg_value2 = alloca i1, align 1
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i1, align 1
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = call i8* @_lfortran_malloc(i64 16)
  %mystring = bitcast i8* %2 to %string_descriptor*
  store %string_descriptor zeroinitializer, %string_descriptor* %mystring, align 1
  %3 = getelementptr %string_descriptor, %string_descriptor* %mystring, i32 0, i32 1
  store i64 30, i64* %3, align 4
  %4 = getelementptr %string_descriptor, %string_descriptor* %mystring, i32 0, i32 0
  %5 = call i8* @_lfortran_malloc(i64 30)
  store i8* %5, i8** %4, align 8
  %6 = call i8* @_lfortran_malloc(i64 16)
  %teststring = bitcast i8* %6 to %string_descriptor*
  store %string_descriptor zeroinitializer, %string_descriptor* %teststring, align 1
  %7 = getelementptr %string_descriptor, %string_descriptor* %teststring, i32 0, i32 1
  store i64 10, i64* %7, align 4
  %8 = getelementptr %string_descriptor, %string_descriptor* %teststring, i32 0, i32 0
  %9 = call i8* @_lfortran_malloc(i64 10)
  store i8* %9, i8** %8, align 8
  %10 = getelementptr %string_descriptor, %string_descriptor* %mystring, i32 0, i32 0
  %11 = getelementptr %string_descriptor, %string_descriptor* %mystring, i32 0, i32 1
  %12 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  call void @_lfortran_strcpy(i8** %10, i64* %11, i8 0, i8 0, i8* %12, i64 14)
  %13 = getelementptr %string_descriptor, %string_descriptor* %teststring, i32 0, i32 0
  %14 = getelementptr %string_descriptor, %string_descriptor* %teststring, i32 0, i32 1
  %15 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void @_lfortran_strcpy(i8** %13, i64* %14, i8 0, i8 0, i8* %15, i64 4)
  store i1 false, i1* %call_arg_value, align 1
  store i32 4, i32* %call_arg_value1, align 4
  %16 = call i32 @_lcompilers_index_str(%string_descriptor* %mystring, %string_descriptor* %teststring, i1* %call_arg_value, i32* %call_arg_value1)
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %then, label %else

then:                                             ; preds = %.entry
  %18 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %18, i32 17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  %19 = alloca i64, align 8
  store i1 false, i1* %call_arg_value2, align 1
  store i32 4, i32* %call_arg_value3, align 4
  %20 = call i32 @_lcompilers_index_str1(%string_descriptor* %mystring, %string_descriptor* %teststring, i1* %call_arg_value2, i32* %call_arg_value3)
  %21 = alloca i32, align 4
  store i32 %20, i32* %21, align 4
  %22 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @serialization_info, i32 0, i32 0), i64* %19, i32 0, i32 0, %string_descriptor* @string_const.6, i32* %21)
  %23 = load i64, i64* %19, align 4
  %24 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %24 to %string_descriptor*
  %25 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %22, i8** %25, align 8
  %26 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %23, i64* %26, align 4
  %27 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %30 = load i64, i64* %29, align 4
  %31 = trunc i64 %30 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %28, i32 %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_strcpy(i8**, i64*, i8, i8, i8*, i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare void @_lpython_free_argv()
