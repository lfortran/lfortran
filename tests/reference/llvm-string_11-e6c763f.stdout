; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [15 x i8] c"This is a test\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@4 = private unnamed_addr constant [18 x i8] c"test is not found\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [25 x i8] c"test is found at index: \00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @_lcompilers_index_str(i8** %str, i8** %substr, i1* %back, i32* %kind) {
.entry:
  %_lcompilers_index_str = alloca i32, align 4
  %found = alloca i1, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %pos = alloca i32, align 4
  store i32 0, i32* %_lcompilers_index_str, align 4
  store i32 1, i32* %i, align 4
  store i1 true, i1* %found, align 1
  %0 = load i8*, i8** %str, align 8
  %1 = alloca i8*, align 8
  store i8* %0, i8** %1, align 8
  %2 = call i32 @_lfortran_str_len(i8** %1)
  %3 = load i8*, i8** %substr, align 8
  %4 = alloca i8*, align 8
  store i8* %3, i8** %4, align 8
  %5 = call i32 @_lfortran_str_len(i8** %4)
  %6 = icmp slt i32 %2, %5
  br i1 %6, label %then, label %else

then:                                             ; preds = %.entry
  store i1 false, i1* %found, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %loop.head

loop.head:                                        ; preds = %ifcont8, %ifcont
  %7 = load i32, i32* %i, align 4
  %8 = load i8*, i8** %str, align 8
  %9 = alloca i8*, align 8
  store i8* %8, i8** %9, align 8
  %10 = call i32 @_lfortran_str_len(i8** %9)
  %11 = icmp slt i32 %7, %10
  %12 = load i1, i1* %found, align 1
  %13 = zext i1 %12 to i32
  %14 = icmp eq i32 %13, 1
  %15 = icmp eq i1 %11, false
  %16 = select i1 %15, i1 %11, i1 %14
  br i1 %16, label %loop.body, label %loop.end9

loop.body:                                        ; preds = %loop.head
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont5, %loop.body
  %17 = load i32, i32* %j, align 4
  %18 = load i8*, i8** %substr, align 8
  %19 = alloca i8*, align 8
  store i8* %18, i8** %19, align 8
  %20 = call i32 @_lfortran_str_len(i8** %19)
  %21 = icmp sle i32 %17, %20
  %22 = load i1, i1* %found, align 1
  %23 = zext i1 %22 to i32
  %24 = icmp eq i32 %23, 1
  %25 = icmp eq i1 %21, false
  %26 = select i1 %25, i1 %21, i1 %24
  br i1 %26, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %k, align 4
  %29 = add i32 %27, %28
  store i32 %29, i32* %pos, align 4
  %30 = load i8*, i8** %str, align 8
  %31 = load i32, i32* %pos, align 4
  %32 = sub i32 %31, 1
  %33 = load i32, i32* %pos, align 4
  %34 = call i8* @_lfortran_str_slice(i8* %30, i32 %32, i32 %33, i32 1, i1 true, i1 true)
  %35 = load i8*, i8** %substr, align 8
  %36 = load i32, i32* %j, align 4
  %37 = sub i32 %36, 1
  %38 = load i32, i32* %j, align 4
  %39 = call i8* @_lfortran_str_slice(i8* %35, i32 %37, i32 %38, i32 1, i1 true, i1 true)
  %40 = alloca i8*, align 8
  store i8* %34, i8** %40, align 8
  %41 = alloca i8*, align 8
  store i8* %39, i8** %41, align 8
  %42 = call i1 @_lpython_str_compare_noteq(i8** %40, i8** %41)
  br i1 %42, label %then3, label %else4

then3:                                            ; preds = %loop.body2
  store i1 false, i1* %found, align 1
  br label %ifcont5

else4:                                            ; preds = %loop.body2
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  %43 = load i32, i32* %j, align 4
  %44 = add i32 %43, 1
  store i32 %44, i32* %j, align 4
  %45 = load i32, i32* %k, align 4
  %46 = add i32 %45, 1
  store i32 %46, i32* %k, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %47 = load i1, i1* %found, align 1
  %48 = zext i1 %47 to i32
  %49 = icmp eq i32 %48, 1
  br i1 %49, label %then6, label %else7

then6:                                            ; preds = %loop.end
  %50 = load i32, i32* %i, align 4
  store i32 %50, i32* %_lcompilers_index_str, align 4
  %51 = load i1, i1* %back, align 1
  store i1 %51, i1* %found, align 1
  br label %ifcont8

else7:                                            ; preds = %loop.end
  store i1 true, i1* %found, align 1
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %then6
  %52 = load i32, i32* %i, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %i, align 4
  br label %loop.head

loop.end9:                                        ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end9
  %54 = load i32, i32* %_lcompilers_index_str, align 4
  ret i32 %54
}

define i32 @_lcompilers_index_str1(i8** %str, i8** %substr, i1* %back, i32* %kind) {
.entry:
  %_lcompilers_index_str1 = alloca i32, align 4
  %found = alloca i1, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %pos = alloca i32, align 4
  store i32 0, i32* %_lcompilers_index_str1, align 4
  store i32 1, i32* %i, align 4
  store i1 true, i1* %found, align 1
  %0 = load i8*, i8** %str, align 8
  %1 = alloca i8*, align 8
  store i8* %0, i8** %1, align 8
  %2 = call i32 @_lfortran_str_len(i8** %1)
  %3 = load i8*, i8** %substr, align 8
  %4 = alloca i8*, align 8
  store i8* %3, i8** %4, align 8
  %5 = call i32 @_lfortran_str_len(i8** %4)
  %6 = icmp slt i32 %2, %5
  br i1 %6, label %then, label %else

then:                                             ; preds = %.entry
  store i1 false, i1* %found, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %loop.head

loop.head:                                        ; preds = %ifcont8, %ifcont
  %7 = load i32, i32* %i, align 4
  %8 = load i8*, i8** %str, align 8
  %9 = alloca i8*, align 8
  store i8* %8, i8** %9, align 8
  %10 = call i32 @_lfortran_str_len(i8** %9)
  %11 = icmp slt i32 %7, %10
  %12 = load i1, i1* %found, align 1
  %13 = zext i1 %12 to i32
  %14 = icmp eq i32 %13, 1
  %15 = icmp eq i1 %11, false
  %16 = select i1 %15, i1 %11, i1 %14
  br i1 %16, label %loop.body, label %loop.end9

loop.body:                                        ; preds = %loop.head
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont5, %loop.body
  %17 = load i32, i32* %j, align 4
  %18 = load i8*, i8** %substr, align 8
  %19 = alloca i8*, align 8
  store i8* %18, i8** %19, align 8
  %20 = call i32 @_lfortran_str_len(i8** %19)
  %21 = icmp sle i32 %17, %20
  %22 = load i1, i1* %found, align 1
  %23 = zext i1 %22 to i32
  %24 = icmp eq i32 %23, 1
  %25 = icmp eq i1 %21, false
  %26 = select i1 %25, i1 %21, i1 %24
  br i1 %26, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %k, align 4
  %29 = add i32 %27, %28
  store i32 %29, i32* %pos, align 4
  %30 = load i8*, i8** %str, align 8
  %31 = load i32, i32* %pos, align 4
  %32 = sub i32 %31, 1
  %33 = load i32, i32* %pos, align 4
  %34 = call i8* @_lfortran_str_slice(i8* %30, i32 %32, i32 %33, i32 1, i1 true, i1 true)
  %35 = load i8*, i8** %substr, align 8
  %36 = load i32, i32* %j, align 4
  %37 = sub i32 %36, 1
  %38 = load i32, i32* %j, align 4
  %39 = call i8* @_lfortran_str_slice(i8* %35, i32 %37, i32 %38, i32 1, i1 true, i1 true)
  %40 = alloca i8*, align 8
  store i8* %34, i8** %40, align 8
  %41 = alloca i8*, align 8
  store i8* %39, i8** %41, align 8
  %42 = call i1 @_lpython_str_compare_noteq(i8** %40, i8** %41)
  br i1 %42, label %then3, label %else4

then3:                                            ; preds = %loop.body2
  store i1 false, i1* %found, align 1
  br label %ifcont5

else4:                                            ; preds = %loop.body2
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  %43 = load i32, i32* %j, align 4
  %44 = add i32 %43, 1
  store i32 %44, i32* %j, align 4
  %45 = load i32, i32* %k, align 4
  %46 = add i32 %45, 1
  store i32 %46, i32* %k, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %47 = load i1, i1* %found, align 1
  %48 = zext i1 %47 to i32
  %49 = icmp eq i32 %48, 1
  br i1 %49, label %then6, label %else7

then6:                                            ; preds = %loop.end
  %50 = load i32, i32* %i, align 4
  store i32 %50, i32* %_lcompilers_index_str1, align 4
  %51 = load i1, i1* %back, align 1
  store i1 %51, i1* %found, align 1
  br label %ifcont8

else7:                                            ; preds = %loop.end
  store i1 true, i1* %found, align 1
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %then6
  %52 = load i32, i32* %i, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %i, align 4
  br label %loop.head

loop.end9:                                        ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end9
  %54 = load i32, i32* %_lcompilers_index_str1, align 4
  ret i32 %54
}

declare i32 @_lfortran_str_len(i8**)

declare i8* @_lfortran_str_slice(i8*, i32, i32, i32, i1, i1)

declare i1 @_lpython_str_compare_noteq(i8**, i8**)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value3 = alloca i32, align 4
  %call_arg_value2 = alloca i1, align 1
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i1, align 1
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %mystring = alloca i8*, align 8
  %2 = call i8* @_lfortran_malloc(i32 31)
  call void @_lfortran_string_init(i32 31, i8* %2)
  store i8* %2, i8** %mystring, align 8
  %3 = load i8*, i8** %mystring, align 8
  %teststring = alloca i8*, align 8
  %4 = call i8* @_lfortran_malloc(i32 11)
  call void @_lfortran_string_init(i32 11, i8* %4)
  store i8* %4, i8** %teststring, align 8
  %5 = load i8*, i8** %teststring, align 8
  call void @_lfortran_strcpy(i8** %mystring, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i32 0, i32 0), i8 0)
  call void @_lfortran_strcpy(i8** %teststring, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8 0)
  store i1 false, i1* %call_arg_value, align 1
  store i32 4, i32* %call_arg_value1, align 4
  %6 = call i32 @_lcompilers_index_str(i8** %mystring, i8** %teststring, i1* %call_arg_value, i32* %call_arg_value1)
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  br label %ifcont

else:                                             ; preds = %.entry
  store i1 false, i1* %call_arg_value2, align 1
  store i32 4, i32* %call_arg_value3, align 4
  %8 = call i32 @_lcompilers_index_str1(i8** %mystring, i8** %teststring, i1* %call_arg_value2, i32* %call_arg_value3)
  %9 = sext i32 %8 to i64
  %10 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @8, i32 0, i32 0), i32 2, i64 %9)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i32)

declare void @_lfortran_string_init(i32, i8*)

declare void @_lfortran_strcpy(i8**, i8*, i8)

declare void @_lfortran_printf(i8*, ...)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)
