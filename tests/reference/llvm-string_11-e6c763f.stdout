; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [15 x i8] c"This is a test\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [18 x i8] c"test is not found\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@6 = private unnamed_addr constant [25 x i8] c"test is found at index: \00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @_lcompilers_index_str(i8** %str, i8** %substr, i1* %back, i32* %kind) {
.entry:
  %_lcompilers_index_str = alloca i32, align 4
  %found = alloca i1, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %pos = alloca i32, align 4
  store i32 0, i32* %_lcompilers_index_str, align 4
  store i32 1, i32* %i, align 4
  store i1 true, i1* %found, align 1
  %0 = load i8*, i8** %str, align 8
  %1 = alloca i8*, align 8
  store i8* %0, i8** %1, align 8
  %2 = call i32 @_lfortran_str_len(i8** %1)
  %3 = load i8*, i8** %substr, align 8
  %4 = alloca i8*, align 8
  store i8* %3, i8** %4, align 8
  %5 = call i32 @_lfortran_str_len(i8** %4)
  %6 = icmp slt i32 %2, %5
  br i1 %6, label %then, label %else

then:                                             ; preds = %.entry
  store i1 false, i1* %found, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %loop.head

loop.head:                                        ; preds = %ifcont9, %ifcont
  %7 = load i32, i32* %i, align 4
  %8 = load i8*, i8** %str, align 8
  %9 = alloca i8*, align 8
  store i8* %8, i8** %9, align 8
  %10 = call i32 @_lfortran_str_len(i8** %9)
  %11 = add i32 %10, 1
  %12 = icmp slt i32 %7, %11
  %13 = load i1, i1* %found, align 1
  %14 = zext i1 %13 to i32
  %15 = icmp eq i32 %14, 1
  %16 = icmp eq i1 %12, false
  %17 = select i1 %16, i1 %12, i1 %15
  br i1 %17, label %loop.body, label %loop.end10

loop.body:                                        ; preds = %loop.head
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont6, %loop.body
  %18 = load i32, i32* %j, align 4
  %19 = load i8*, i8** %substr, align 8
  %20 = alloca i8*, align 8
  store i8* %19, i8** %20, align 8
  %21 = call i32 @_lfortran_str_len(i8** %20)
  %22 = icmp sle i32 %18, %21
  %23 = load i1, i1* %found, align 1
  %24 = zext i1 %23 to i32
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i1 %22, false
  %27 = select i1 %26, i1 %22, i1 %25
  br i1 %27, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %k, align 4
  %30 = add i32 %28, %29
  store i32 %30, i32* %pos, align 4
  %31 = load i8*, i8** %str, align 8
  %32 = load i32, i32* %pos, align 4
  %33 = sub i32 %32, 1
  %34 = load i32, i32* %pos, align 4
  %35 = call i8* @_lfortran_str_slice(i8* %31, i32 %33, i32 %34, i32 1, i1 true, i1 true)
  %36 = alloca i8*, align 8
  store i8* %35, i8** %36, align 8
  %37 = call i32 @_lfortran_str_len(i8** %36)
  %38 = add i32 1, %37
  %str_slice = alloca i8, i32 %38, align 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %str_slice, i8* %35, i32 %38, i1 false)
  call void @_lfortran_free(i8* %35)
  %39 = load i8*, i8** %substr, align 8
  %40 = load i32, i32* %j, align 4
  %41 = sub i32 %40, 1
  %42 = load i32, i32* %j, align 4
  %43 = call i8* @_lfortran_str_slice(i8* %39, i32 %41, i32 %42, i32 1, i1 true, i1 true)
  %44 = alloca i8*, align 8
  store i8* %43, i8** %44, align 8
  %45 = call i32 @_lfortran_str_len(i8** %44)
  %46 = add i32 1, %45
  %str_slice3 = alloca i8, i32 %46, align 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %str_slice3, i8* %43, i32 %46, i1 false)
  call void @_lfortran_free(i8* %43)
  %47 = alloca i8*, align 8
  store i8* %str_slice, i8** %47, align 8
  %48 = alloca i8*, align 8
  store i8* %str_slice3, i8** %48, align 8
  %49 = call i1 @_lpython_str_compare_noteq(i8** %47, i8** %48)
  br i1 %49, label %then4, label %else5

then4:                                            ; preds = %loop.body2
  store i1 false, i1* %found, align 1
  br label %ifcont6

else5:                                            ; preds = %loop.body2
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %50 = load i32, i32* %j, align 4
  %51 = add i32 %50, 1
  store i32 %51, i32* %j, align 4
  %52 = load i32, i32* %k, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %k, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %54 = load i1, i1* %found, align 1
  %55 = zext i1 %54 to i32
  %56 = icmp eq i32 %55, 1
  br i1 %56, label %then7, label %else8

then7:                                            ; preds = %loop.end
  %57 = load i32, i32* %i, align 4
  store i32 %57, i32* %_lcompilers_index_str, align 4
  %58 = load i1, i1* %back, align 1
  store i1 %58, i1* %found, align 1
  br label %ifcont9

else8:                                            ; preds = %loop.end
  store i1 true, i1* %found, align 1
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %59 = load i32, i32* %i, align 4
  %60 = add i32 %59, 1
  store i32 %60, i32* %i, align 4
  br label %loop.head

loop.end10:                                       ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end10
  %61 = load i32, i32* %_lcompilers_index_str, align 4
  ret i32 %61
}

define i32 @_lcompilers_index_str1(i8** %str, i8** %substr, i1* %back, i32* %kind) {
.entry:
  %_lcompilers_index_str1 = alloca i32, align 4
  %found = alloca i1, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %pos = alloca i32, align 4
  store i32 0, i32* %_lcompilers_index_str1, align 4
  store i32 1, i32* %i, align 4
  store i1 true, i1* %found, align 1
  %0 = load i8*, i8** %str, align 8
  %1 = alloca i8*, align 8
  store i8* %0, i8** %1, align 8
  %2 = call i32 @_lfortran_str_len(i8** %1)
  %3 = load i8*, i8** %substr, align 8
  %4 = alloca i8*, align 8
  store i8* %3, i8** %4, align 8
  %5 = call i32 @_lfortran_str_len(i8** %4)
  %6 = icmp slt i32 %2, %5
  br i1 %6, label %then, label %else

then:                                             ; preds = %.entry
  store i1 false, i1* %found, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %loop.head

loop.head:                                        ; preds = %ifcont9, %ifcont
  %7 = load i32, i32* %i, align 4
  %8 = load i8*, i8** %str, align 8
  %9 = alloca i8*, align 8
  store i8* %8, i8** %9, align 8
  %10 = call i32 @_lfortran_str_len(i8** %9)
  %11 = add i32 %10, 1
  %12 = icmp slt i32 %7, %11
  %13 = load i1, i1* %found, align 1
  %14 = zext i1 %13 to i32
  %15 = icmp eq i32 %14, 1
  %16 = icmp eq i1 %12, false
  %17 = select i1 %16, i1 %12, i1 %15
  br i1 %17, label %loop.body, label %loop.end10

loop.body:                                        ; preds = %loop.head
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont6, %loop.body
  %18 = load i32, i32* %j, align 4
  %19 = load i8*, i8** %substr, align 8
  %20 = alloca i8*, align 8
  store i8* %19, i8** %20, align 8
  %21 = call i32 @_lfortran_str_len(i8** %20)
  %22 = icmp sle i32 %18, %21
  %23 = load i1, i1* %found, align 1
  %24 = zext i1 %23 to i32
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i1 %22, false
  %27 = select i1 %26, i1 %22, i1 %25
  br i1 %27, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %k, align 4
  %30 = add i32 %28, %29
  store i32 %30, i32* %pos, align 4
  %31 = load i8*, i8** %str, align 8
  %32 = load i32, i32* %pos, align 4
  %33 = sub i32 %32, 1
  %34 = load i32, i32* %pos, align 4
  %35 = call i8* @_lfortran_str_slice(i8* %31, i32 %33, i32 %34, i32 1, i1 true, i1 true)
  %36 = alloca i8*, align 8
  store i8* %35, i8** %36, align 8
  %37 = call i32 @_lfortran_str_len(i8** %36)
  %38 = add i32 1, %37
  %str_slice = alloca i8, i32 %38, align 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %str_slice, i8* %35, i32 %38, i1 false)
  call void @_lfortran_free(i8* %35)
  %39 = load i8*, i8** %substr, align 8
  %40 = load i32, i32* %j, align 4
  %41 = sub i32 %40, 1
  %42 = load i32, i32* %j, align 4
  %43 = call i8* @_lfortran_str_slice(i8* %39, i32 %41, i32 %42, i32 1, i1 true, i1 true)
  %44 = alloca i8*, align 8
  store i8* %43, i8** %44, align 8
  %45 = call i32 @_lfortran_str_len(i8** %44)
  %46 = add i32 1, %45
  %str_slice3 = alloca i8, i32 %46, align 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %str_slice3, i8* %43, i32 %46, i1 false)
  call void @_lfortran_free(i8* %43)
  %47 = alloca i8*, align 8
  store i8* %str_slice, i8** %47, align 8
  %48 = alloca i8*, align 8
  store i8* %str_slice3, i8** %48, align 8
  %49 = call i1 @_lpython_str_compare_noteq(i8** %47, i8** %48)
  br i1 %49, label %then4, label %else5

then4:                                            ; preds = %loop.body2
  store i1 false, i1* %found, align 1
  br label %ifcont6

else5:                                            ; preds = %loop.body2
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %50 = load i32, i32* %j, align 4
  %51 = add i32 %50, 1
  store i32 %51, i32* %j, align 4
  %52 = load i32, i32* %k, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %k, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %54 = load i1, i1* %found, align 1
  %55 = zext i1 %54 to i32
  %56 = icmp eq i32 %55, 1
  br i1 %56, label %then7, label %else8

then7:                                            ; preds = %loop.end
  %57 = load i32, i32* %i, align 4
  store i32 %57, i32* %_lcompilers_index_str1, align 4
  %58 = load i1, i1* %back, align 1
  store i1 %58, i1* %found, align 1
  br label %ifcont9

else8:                                            ; preds = %loop.end
  store i1 true, i1* %found, align 1
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %59 = load i32, i32* %i, align 4
  %60 = add i32 %59, 1
  store i32 %60, i32* %i, align 4
  br label %loop.head

loop.end10:                                       ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end10
  %61 = load i32, i32* %_lcompilers_index_str1, align 4
  ret i32 %61
}

declare i32 @_lfortran_str_len(i8**)

declare i8* @_lfortran_str_slice(i8*, i32, i32, i32, i1, i1)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #0

declare void @_lfortran_free(i8*)

declare i1 @_lpython_str_compare_noteq(i8**, i8**)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value3 = alloca i32, align 4
  %call_arg_value2 = alloca i1, align 1
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i1, align 1
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %mystring = alloca i8*, align 8
  %2 = call i8* @_lfortran_malloc(i32 31)
  call void @_lfortran_string_init(i32 31, i8* %2)
  store i8* %2, i8** %mystring, align 8
  %3 = load i8*, i8** %mystring, align 8
  %teststring = alloca i8*, align 8
  %4 = call i8* @_lfortran_malloc(i32 11)
  call void @_lfortran_string_init(i32 11, i8* %4)
  store i8* %4, i8** %teststring, align 8
  %5 = load i8*, i8** %teststring, align 8
  call void @_lfortran_strcpy_pointer_string(i8** %mystring, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i32 0, i32 0))
  call void @_lfortran_strcpy_pointer_string(i8** %teststring, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0))
  store i1 false, i1* %call_arg_value, align 1
  store i32 4, i32* %call_arg_value1, align 4
  %6 = call i32 @_lcompilers_index_str(i8** %mystring, i8** %teststring, i1* %call_arg_value, i32* %call_arg_value1)
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  br label %ifcont

else:                                             ; preds = %.entry
  store i1 false, i1* %call_arg_value2, align 1
  store i32 4, i32* %call_arg_value3, align 4
  %8 = call i32 @_lcompilers_index_str1(i8** %mystring, i8** %teststring, i1* %call_arg_value2, i32* %call_arg_value3)
  %9 = sext i32 %8 to i64
  %10 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @6, i32 0, i32 0), i32 2, i64 %9)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  call void @_lfortran_free(i8* %10)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i32)

declare void @_lfortran_string_init(i32, i8*)

declare void @_lfortran_strcpy_pointer_string(i8**, i8*)

declare void @_lfortran_printf(i8*, ...)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lpython_free_argv()

attributes #0 = { argmemonly nounwind willreturn }
