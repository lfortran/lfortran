; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [9 x i8] c"%13.8e%s\00", align 1

define void @__module_dflt_intent_foo(float* %c, float* %d) {
.entry:
  %e = alloca float
  %g = alloca float
  %0 = call float @__module_dflt_intent_f(float* %c)
  store float %0, float* %e
  %1 = call float @__module_dflt_intent_f(float* %d)
  store float %1, float* %g
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define float @__module_dflt_intent_f(float* %x) {
.entry:
  %f = alloca float
  %0 = load float, float* %x
  %1 = fmul float 2.000000e+00, %0
  store float %1, float* %f
  %2 = load float, float* %f
  %3 = fpext float %2 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i32 0, i32 0), double %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  %4 = load float, float* %f
  ret float %4
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main() {
.entry:
  %call_arg_value1 = alloca float
  %call_arg_value = alloca float
  store float 0.000000e+00, float* %call_arg_value
  store float 2.000000e+00, float* %call_arg_value1
  call void @__module_dflt_intent_foo(float* %call_arg_value, float* %call_arg_value1)
  ret i32 0
}
