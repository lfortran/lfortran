; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data = private constant [2 x i8] c"1\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data, i32 0, i32 0), i64 1 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.1 = private constant [2 x i8] c"2\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.1, i32 0, i32 0), i64 1 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.3 = private constant [2 x i8] c"3\00"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.3, i32 0, i32 0), i64 1 }>
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.5 = private constant [2 x i8] c"4\00"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.5, i32 0, i32 0), i64 1 }>
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.7 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.8 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.7, i32 0, i32 0), i64 10 }>
@string_const_data.9 = private constant [2 x i8] c"\0A\00"
@string_const.10 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.9, i32 0, i32 0), i64 1 }>
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.11 = private constant [2 x i8] c"1\00"
@string_const.12 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.11, i32 0, i32 0), i64 1 }>
@10 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.13 = private constant [6 x i8] c"2,3,4\00"
@string_const.14 = private global %string_descriptor <{ i8* getelementptr inbounds ([6 x i8], [6 x i8]* @string_const_data.13, i32 0, i32 0), i64 5 }>
@12 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.15 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.16 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.15, i32 0, i32 0), i64 10 }>
@string_const_data.17 = private constant [2 x i8] c"\0A\00"
@string_const.18 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.17, i32 0, i32 0), i64 1 }>
@13 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %i = alloca i64, align 8
  %out = alloca i64, align 8
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %i1 = alloca i64, align 8
  %out2 = alloca i64, align 8
  store i64 4, i64* %i1, align 4
  %2 = load i64, i64* %i1, align 4
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  store i64 10, i64* %out2, align 4
  %4 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  br label %ifcont11

else:                                             ; preds = %.entry
  %5 = load i64, i64* %i1, align 4
  %6 = icmp eq i64 %5, 2
  br i1 %6, label %then3, label %else4

then3:                                            ; preds = %else
  store i64 20, i64* %out2, align 4
  %7 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  br label %ifcont10

else4:                                            ; preds = %else
  %8 = load i64, i64* %i1, align 4
  %9 = icmp eq i64 %8, 3
  br i1 %9, label %then5, label %else6

then5:                                            ; preds = %else4
  store i64 30, i64* %out2, align 4
  %10 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  br label %ifcont9

else6:                                            ; preds = %else4
  %11 = load i64, i64* %i1, align 4
  %12 = icmp eq i64 %11, 4
  br i1 %12, label %then7, label %else8

then7:                                            ; preds = %else6
  store i64 40, i64* %out2, align 4
  %13 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.6, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  br label %ifcont

else8:                                            ; preds = %else6
  br label %ifcont

ifcont:                                           ; preds = %else8, %then7
  br label %ifcont9

ifcont9:                                          ; preds = %ifcont, %then5
  br label %ifcont10

ifcont10:                                         ; preds = %ifcont9, %then3
  br label %ifcont11

ifcont11:                                         ; preds = %ifcont10, %then
  %14 = load i64, i64* %out2, align 4
  %15 = icmp ne i64 %14, 40
  br i1 %15, label %then12, label %else13

then12:                                           ; preds = %ifcont11
  %16 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.8, i32 0, i32 0), align 8
  %17 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.10, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* %16, i8* %17)
  call void @exit(i32 1)
  br label %ifcont14

else13:                                           ; preds = %ifcont11
  br label %ifcont14

ifcont14:                                         ; preds = %else13, %then12
  %18 = load i64, i64* %i1, align 4
  %19 = icmp eq i64 %18, 1
  br i1 %19, label %then15, label %else16

then15:                                           ; preds = %ifcont14
  store i64 11, i64* %out2, align 4
  %20 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.12, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0), i8* %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  br label %ifcont20

else16:                                           ; preds = %ifcont14
  %21 = load i64, i64* %i1, align 4
  %22 = icmp eq i64 %21, 2
  %23 = load i64, i64* %i1, align 4
  %24 = icmp eq i64 %23, 3
  %25 = icmp eq i1 %22, false
  %26 = select i1 %25, i1 %24, i1 %22
  %27 = load i64, i64* %i1, align 4
  %28 = icmp eq i64 %27, 4
  %29 = icmp eq i1 %26, false
  %30 = select i1 %29, i1 %28, i1 %26
  br i1 %30, label %then17, label %else18

then17:                                           ; preds = %else16
  store i64 22, i64* %out2, align 4
  %31 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.14, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i32 0, i32 0), i8* %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i32 0, i32 0))
  br label %ifcont19

else18:                                           ; preds = %else16
  br label %ifcont19

ifcont19:                                         ; preds = %else18, %then17
  br label %ifcont20

ifcont20:                                         ; preds = %ifcont19, %then15
  %32 = load i64, i64* %out2, align 4
  %33 = icmp ne i64 %32, 22
  br i1 %33, label %then21, label %else22

then21:                                           ; preds = %ifcont20
  %34 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.16, i32 0, i32 0), align 8
  %35 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.18, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @13, i32 0, i32 0), i8* %34, i8* %35)
  call void @exit(i32 1)
  br label %ifcont23

else22:                                           ; preds = %ifcont20
  br label %ifcont23

ifcont23:                                         ; preds = %else22, %then21
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont23
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
