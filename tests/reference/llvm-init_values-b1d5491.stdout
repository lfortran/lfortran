; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }

@0 = private unnamed_addr constant [2 x i8] c"l\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"eft\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"left\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@6 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@7 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"left\00", align 1
@10 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %a = alloca i32, align 4
  store i32 3, i32* %a, align 4
  %i = alloca i32, align 4
  store i32 1, i32* %i, align 4
  %j = alloca i32, align 4
  store i32 2, i32* %j, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %i1 = alloca i32, align 4
  store i32 1, i32* %i1, align 4
  %j2 = alloca i32, align 4
  store i32 2, i32* %j2, align 4
  %a3 = alloca i32, align 4
  store i32 3, i32* %a3, align 4
  %l = alloca i1, align 1
  store i1 true, i1* %l, align 1
  %b = alloca i1, align 1
  store i1 true, i1* %b, align 1
  %c = alloca %complex_4, align 8
  %2 = alloca %complex_4, align 8
  %3 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 0
  %4 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 1
  store float 3.000000e+00, float* %3, align 4
  store float 4.000000e+00, float* %4, align 4
  %5 = load %complex_4, %complex_4* %2, align 4
  store %complex_4 %5, %complex_4* %c, align 4
  %r = alloca float, align 4
  store float 4.000000e+00, float* %r, align 4
  %r_minus = alloca float, align 4
  store float -4.000000e+00, float* %r_minus, align 4
  %s1 = alloca i8*, align 8
  %6 = call i8* @_lfortran_malloc(i32 2)
  call void @_lfortran_string_init(i32 2, i8* %6)
  store i8* %6, i8** %s1, align 8
  call void @_lfortran_strcpy(i8** %s1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i8 0)
  %7 = load i8*, i8** %s1, align 8
  %s2 = alloca i8*, align 8
  %8 = call i8* @_lfortran_malloc(i32 4)
  call void @_lfortran_string_init(i32 4, i8* %8)
  store i8* %8, i8** %s2, align 8
  call void @_lfortran_strcpy(i8** %s2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i8 0)
  %9 = load i8*, i8** %s2, align 8
  %s = alloca i8*, align 8
  %10 = call i8* @_lfortran_malloc(i32 5)
  call void @_lfortran_string_init(i32 5, i8* %10)
  store i8* %10, i8** %s, align 8
  call void @_lfortran_strcpy(i8** %s, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8 0)
  %11 = load i8*, i8** %s, align 8
  %12 = alloca %complex_4, align 8
  %13 = getelementptr %complex_4, %complex_4* %12, i32 0, i32 0
  %14 = getelementptr %complex_4, %complex_4* %12, i32 0, i32 1
  store float 3.000000e+00, float* %13, align 4
  store float 4.000000e+00, float* %14, align 4
  %15 = load %complex_4, %complex_4* %12, align 4
  %16 = alloca %complex_4, align 8
  store %complex_4 %15, %complex_4* %16, align 4
  %17 = getelementptr %complex_4, %complex_4* %16, i32 0, i32 0
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = alloca %complex_4, align 8
  store %complex_4 %15, %complex_4* %20, align 4
  %21 = getelementptr %complex_4, %complex_4* %20, i32 0, i32 1
  %22 = load float, float* %21, align 4
  %23 = fpext float %22 to double
  %24 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 20, i8* null, i32 2, i64 1, i32 2, i64 2, i32 6, double 4.000000e+00, i32 6, double %19, i32 6, double %23, i32 2, i64 3, i32 8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i32 8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i32 6, double -4.000000e+00, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0))
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0), i8* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i32)

declare void @_lfortran_string_init(i32, i8*)

declare void @_lfortran_strcpy(i8**, i8*, i8)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)
