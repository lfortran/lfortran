; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>
%complex_4 = type <{ float, float }>

@s_data = private global [4 x i8] c"left"
@s = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @s_data, i32 0, i32 0), i64 4 }>
@s1_data = private global [1 x i8] c"l"
@s1 = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @s1_data, i32 0, i32 0), i64 1 }>
@s2_data = private global [3 x i8] c"eft"
@s2 = private global %string_descriptor <{ i8* getelementptr inbounds ([3 x i8], [3 x i8]* @s2_data, i32 0, i32 0), i64 3 }>
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [36 x i8] c"I4,I4,R4,{R4,R4},I4,L,L,R4,S-DESC-4\00", align 1
@string_const_data = private constant [4 x i8] c"left"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data, i32 0, i32 0), i64 4 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %a = alloca i32, align 4
  store i32 3, i32* %a, align 4
  %i = alloca i32, align 4
  store i32 1, i32* %i, align 4
  %j = alloca i32, align 4
  store i32 2, i32* %j, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %i1 = alloca i32, align 4
  store i32 1, i32* %i1, align 4
  %j2 = alloca i32, align 4
  store i32 2, i32* %j2, align 4
  %a3 = alloca i32, align 4
  store i32 3, i32* %a3, align 4
  %l = alloca i1, align 1
  store i1 true, i1* %l, align 1
  %b = alloca i1, align 1
  store i1 true, i1* %b, align 1
  %c = alloca %complex_4, align 8
  %2 = alloca %complex_4, align 8
  %3 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 0
  %4 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 1
  store float 3.000000e+00, float* %3, align 4
  store float 4.000000e+00, float* %4, align 4
  %5 = load %complex_4, %complex_4* %2, align 1
  store %complex_4 %5, %complex_4* %c, align 1
  %r = alloca float, align 4
  store float 4.000000e+00, float* %r, align 4
  %r_minus = alloca float, align 4
  store float -4.000000e+00, float* %r_minus, align 4
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  store i32 1, i32* %7, align 4
  %8 = alloca i32, align 4
  store i32 2, i32* %8, align 4
  %9 = alloca float, align 4
  store float 4.000000e+00, float* %9, align 4
  %10 = alloca %complex_4, align 8
  %11 = getelementptr %complex_4, %complex_4* %10, i32 0, i32 0
  %12 = getelementptr %complex_4, %complex_4* %10, i32 0, i32 1
  store float 3.000000e+00, float* %11, align 4
  store float 4.000000e+00, float* %12, align 4
  %13 = load %complex_4, %complex_4* %10, align 1
  %14 = alloca %complex_4, align 8
  store %complex_4 %13, %complex_4* %14, align 1
  %15 = alloca i32, align 4
  store i32 3, i32* %15, align 4
  %16 = alloca i1, align 1
  store i1 true, i1* %16, align 1
  %17 = alloca i1, align 1
  store i1 true, i1* %17, align 1
  %18 = alloca float, align 4
  store float -4.000000e+00, float* %18, align 4
  %19 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @serialization_info, i32 0, i32 0), i64* %6, i32 0, i32 0, i32* %7, i32* %8, float* %9, %complex_4* %14, i32* %15, i1* %16, i1* %17, float* %18, %string_descriptor* @string_const)
  %20 = load i64, i64* %6, align 4
  %21 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %21 to %string_descriptor*
  %22 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %19, i8** %22, align 8
  %23 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %20, i64* %23, align 4
  %24 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %27 = load i64, i64* %26, align 4
  %28 = trunc i64 %27 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %25, i32 %28, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lpython_free_argv()
