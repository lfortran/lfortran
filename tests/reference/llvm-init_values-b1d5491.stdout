; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }

@0 = private unnamed_addr constant [2 x i8] c"l\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"eft\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"left\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@6 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@7 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"left\00", align 1
@10 = private unnamed_addr constant [50 x i8] c"%d%s%d%s%13.8e%s(%f,%f)%s%d%s%s%s%s%s%13.8e%s%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %i = alloca i32, align 4
  store i32 1, i32* %i, align 4
  %j = alloca i32, align 4
  store i32 2, i32* %j, align 4
  %a = alloca i32, align 4
  store i32 3, i32* %a, align 4
  %l = alloca i1, align 1
  store i1 true, i1* %l, align 1
  %b = alloca i1, align 1
  store i1 true, i1* %b, align 1
  %c = alloca %complex_4, align 8
  %2 = alloca %complex_4, align 8
  %3 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 0
  %4 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 1
  store float 3.000000e+00, float* %3, align 4
  store float 4.000000e+00, float* %4, align 4
  %5 = load %complex_4, %complex_4* %2, align 4
  store %complex_4 %5, %complex_4* %c, align 4
  %r = alloca float, align 4
  store float 4.000000e+00, float* %r, align 4
  %r_minus = alloca float, align 4
  store float -4.000000e+00, float* %r_minus, align 4
  %s1 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i8** %s1, align 8
  %s2 = alloca i8*, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i8** %s2, align 8
  %s = alloca i8*, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8** %s, align 8
  %6 = alloca %complex_4, align 8
  %7 = getelementptr %complex_4, %complex_4* %6, i32 0, i32 0
  %8 = getelementptr %complex_4, %complex_4* %6, i32 0, i32 1
  store float 3.000000e+00, float* %7, align 4
  store float 4.000000e+00, float* %8, align 4
  %9 = load %complex_4, %complex_4* %6, align 4
  %10 = alloca %complex_4, align 8
  store %complex_4 %9, %complex_4* %10, align 4
  %11 = getelementptr %complex_4, %complex_4* %10, i32 0, i32 0
  %12 = load float, float* %11, align 4
  %13 = fpext float %12 to double
  %14 = alloca %complex_4, align 8
  store %complex_4 %9, %complex_4* %14, align 4
  %15 = getelementptr %complex_4, %complex_4* %14, i32 0, i32 1
  %16 = load float, float* %15, align 4
  %17 = fpext float %16 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @10, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), i32 2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), double 4.000000e+00, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), double %13, double %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), i32 3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), double -4.000000e+00, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)
