; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>
%complex_4 = type <{ float, float }>

@string_const_data = private constant [5 x i8] c"left\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([5 x i8], [5 x i8]* @string_const_data, i32 0, i32 0), i64 4 }>
@string_const_data.1 = private constant [2 x i8] c"l\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.1, i32 0, i32 0), i64 1 }>
@string_const_data.3 = private constant [4 x i8] c"eft\00"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.3, i32 0, i32 0), i64 3 }>
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [36 x i8] c"I4,I4,R4,{R4,R4},I4,L,L,R4,S-DESC-4\00", align 1
@string_const_data.5 = private constant [5 x i8] c"left\00"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([5 x i8], [5 x i8]* @string_const_data.5, i32 0, i32 0), i64 4 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %a = alloca i32, align 4
  store i32 3, i32* %a, align 4
  %i = alloca i32, align 4
  store i32 1, i32* %i, align 4
  %j = alloca i32, align 4
  store i32 2, i32* %j, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %i1 = alloca i32, align 4
  store i32 1, i32* %i1, align 4
  %j2 = alloca i32, align 4
  store i32 2, i32* %j2, align 4
  %a3 = alloca i32, align 4
  store i32 3, i32* %a3, align 4
  %l = alloca i1, align 1
  store i1 true, i1* %l, align 1
  %b = alloca i1, align 1
  store i1 true, i1* %b, align 1
  %c = alloca %complex_4, align 8
  %2 = alloca %complex_4, align 8
  %3 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 0
  %4 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 1
  store float 3.000000e+00, float* %3, align 4
  store float 4.000000e+00, float* %4, align 4
  %5 = load %complex_4, %complex_4* %2, align 1
  store %complex_4 %5, %complex_4* %c, align 1
  %r = alloca float, align 4
  store float 4.000000e+00, float* %r, align 4
  %r_minus = alloca float, align 4
  store float -4.000000e+00, float* %r_minus, align 4
  %6 = call i8* @_lfortran_malloc(i64 16)
  %s = bitcast i8* %6 to %string_descriptor*
  store %string_descriptor zeroinitializer, %string_descriptor* %s, align 1
  %7 = getelementptr %string_descriptor, %string_descriptor* %s, i32 0, i32 1
  store i64 4, i64* %7, align 4
  %8 = getelementptr %string_descriptor, %string_descriptor* %s, i32 0, i32 0
  %9 = call i8* @_lfortran_malloc(i64 5)
  call void @_lfortran_string_init(i64 5, i8* %9)
  store i8* %9, i8** %8, align 8
  %10 = getelementptr %string_descriptor, %string_descriptor* %s, i32 0, i32 0
  %11 = getelementptr %string_descriptor, %string_descriptor* %s, i32 0, i32 1
  %12 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  call void @_lfortran_strcpy(i8** %10, i64* %11, i8 0, i8 0, i8* %12, i64 4)
  %13 = load %string_descriptor, %string_descriptor* %s, align 1
  %14 = call i8* @_lfortran_malloc(i64 16)
  %s1 = bitcast i8* %14 to %string_descriptor*
  store %string_descriptor zeroinitializer, %string_descriptor* %s1, align 1
  %15 = getelementptr %string_descriptor, %string_descriptor* %s1, i32 0, i32 1
  store i64 1, i64* %15, align 4
  %16 = getelementptr %string_descriptor, %string_descriptor* %s1, i32 0, i32 0
  %17 = call i8* @_lfortran_malloc(i64 2)
  call void @_lfortran_string_init(i64 2, i8* %17)
  store i8* %17, i8** %16, align 8
  %18 = getelementptr %string_descriptor, %string_descriptor* %s1, i32 0, i32 0
  %19 = getelementptr %string_descriptor, %string_descriptor* %s1, i32 0, i32 1
  %20 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void @_lfortran_strcpy(i8** %18, i64* %19, i8 0, i8 0, i8* %20, i64 1)
  %21 = load %string_descriptor, %string_descriptor* %s1, align 1
  %22 = call i8* @_lfortran_malloc(i64 16)
  %s2 = bitcast i8* %22 to %string_descriptor*
  store %string_descriptor zeroinitializer, %string_descriptor* %s2, align 1
  %23 = getelementptr %string_descriptor, %string_descriptor* %s2, i32 0, i32 1
  store i64 3, i64* %23, align 4
  %24 = getelementptr %string_descriptor, %string_descriptor* %s2, i32 0, i32 0
  %25 = call i8* @_lfortran_malloc(i64 4)
  call void @_lfortran_string_init(i64 4, i8* %25)
  store i8* %25, i8** %24, align 8
  %26 = getelementptr %string_descriptor, %string_descriptor* %s2, i32 0, i32 0
  %27 = getelementptr %string_descriptor, %string_descriptor* %s2, i32 0, i32 1
  %28 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  call void @_lfortran_strcpy(i8** %26, i64* %27, i8 0, i8 0, i8* %28, i64 3)
  %29 = load %string_descriptor, %string_descriptor* %s2, align 1
  %30 = alloca i32, align 4
  store i32 1, i32* %30, align 4
  %31 = alloca i32, align 4
  store i32 2, i32* %31, align 4
  %32 = alloca float, align 4
  store float 4.000000e+00, float* %32, align 4
  %33 = alloca %complex_4, align 8
  %34 = getelementptr %complex_4, %complex_4* %33, i32 0, i32 0
  %35 = getelementptr %complex_4, %complex_4* %33, i32 0, i32 1
  store float 3.000000e+00, float* %34, align 4
  store float 4.000000e+00, float* %35, align 4
  %36 = load %complex_4, %complex_4* %33, align 1
  %37 = alloca %complex_4, align 8
  store %complex_4 %36, %complex_4* %37, align 1
  %38 = alloca i32, align 4
  store i32 3, i32* %38, align 4
  %39 = alloca i1, align 1
  store i1 true, i1* %39, align 1
  %40 = alloca i1, align 1
  store i1 true, i1* %40, align 1
  %41 = alloca float, align 4
  store float -4.000000e+00, float* %41, align 4
  %42 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i32* %30, i32* %31, float* %32, %complex_4* %37, i32* %38, i1* %39, i1* %40, float* %41, %string_descriptor* @string_const.6)
  %43 = call i64 @_lfortran_str_len(i8* %42)
  %44 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %44 to %string_descriptor*
  %45 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %42, i8** %45, align 8
  %46 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %43, i64* %46, align 4
  %47 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %50 = load i64, i64* %49, align 4
  %51 = trunc i64 %50 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %48, i32 %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_string_init(i64, i8*)

declare void @_lfortran_strcpy(i8**, i64*, i8, i8, i8*, i64)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lpython_free_argv()
