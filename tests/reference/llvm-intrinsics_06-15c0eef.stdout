; ModuleID = 'LFortran'
source_filename = "LFortran"

%c_ptr = type { i32 }
%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%f%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@6 = private unnamed_addr constant [5 x i8] c"%f%s\00", align 1
@7 = private unnamed_addr constant [2 x i8] c" \00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%f%s\00", align 1
@10 = private unnamed_addr constant [2 x i8] c" \00", align 1
@11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@12 = private unnamed_addr constant [5 x i8] c"%f%s\00", align 1
@13 = private unnamed_addr constant [2 x i8] c" \00", align 1
@14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@15 = private unnamed_addr constant [5 x i8] c"%f%s\00", align 1
@16 = private unnamed_addr constant [2 x i8] c" \00", align 1
@17 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@18 = private unnamed_addr constant [5 x i8] c"%f%s\00", align 1

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

declare void @__module_lfortran_intrinsic_builtin_move_alloc(i32*, i32*)

declare void @__module_lfortran_intrinsic_iso_c_binding_c_f_pointer(%c_ptr*, i32**, %array*)

define void @__module_lfortran_intrinsic_math_cpu_time(double* %t) {
.entry:
  call void @_lfortran_cpu_time(double* %t)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_cpu_time(double*)

define void @__module_lfortran_intrinsic_math_dp_rand_num(double* %harvest) {
.entry:
  call void @_lfortran_dp_rand_num(double* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_dp_rand_num(double*)

define void @__module_lfortran_intrinsic_math_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max) {
.entry:
  call void @_lfortran_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i32sys_clock(i32*, i32*, i32*)

define void @__module_lfortran_intrinsic_math_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max) {
.entry:
  call void @_lfortran_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i64sys_clock(i64*, i64*, i64*)

define float @__module_lfortran_intrinsic_math_sacos(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sacos(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sacos(float)

define float @__module_lfortran_intrinsic_math_sacosh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sacosh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sacosh(float)

define float @__module_lfortran_intrinsic_math_sasin(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sasin(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sasin(float)

define float @__module_lfortran_intrinsic_math_sasinh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sasinh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sasinh(float)

define float @__module_lfortran_intrinsic_math_satan(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_satan(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_satan(float)

define float @__module_lfortran_intrinsic_math_satanh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_satanh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_satanh(float)

define void @__module_lfortran_intrinsic_math_sp_rand_num(float* %harvest) {
.entry:
  call void @_lfortran_sp_rand_num(float* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_sp_rand_num(float*)

define i32 @main() {
.entry:
  %x = alloca float, align 4
  store float 1.000000e+00, float* %x, align 4
  %0 = load float, float* %x, align 4
  %1 = fpext float %0 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), double %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  store float 1.000000e+00, float* %x, align 4
  %2 = load float, float* %x, align 4
  %3 = fpext float %2 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), double %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  store float 1.000000e+00, float* %x, align 4
  %4 = load float, float* %x, align 4
  %5 = fpext float %4 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), double %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0))
  store float 1.000000e+00, float* %x, align 4
  %6 = load float, float* %x, align 4
  %7 = fpext float %6 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i32 0, i32 0), double %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i32 0, i32 0))
  store float 1.000000e+00, float* %x, align 4
  %8 = load float, float* %x, align 4
  %9 = fpext float %8 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @15, i32 0, i32 0), double %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i32 0, i32 0))
  store float 1.000000e+00, float* %x, align 4
  %10 = load float, float* %x, align 4
  %11 = fpext float %10 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @18, i32 0, i32 0), double %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @17, i32 0, i32 0))
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
