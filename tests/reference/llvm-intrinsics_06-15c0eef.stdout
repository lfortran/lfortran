; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [9 x i8] c"%13.8e%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [9 x i8] c"%13.8e%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [9 x i8] c"%13.8e%s\00", align 1
@9 = private unnamed_addr constant [2 x i8] c" \00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [9 x i8] c"%13.8e%s\00", align 1
@12 = private unnamed_addr constant [2 x i8] c" \00", align 1
@13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@14 = private unnamed_addr constant [9 x i8] c"%13.8e%s\00", align 1
@15 = private unnamed_addr constant [2 x i8] c" \00", align 1
@16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@17 = private unnamed_addr constant [9 x i8] c"%13.8e%s\00", align 1
@18 = private unnamed_addr constant [2 x i8] c" \00", align 1
@19 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@20 = private unnamed_addr constant [9 x i8] c"%13.8e%s\00", align 1

define float @_lcompilers_aint_f32(float* %a) {
.entry:
  %_lcompilers_aint_f32 = alloca float, align 4
  %0 = load float, float* %a, align 4
  %1 = fptosi float %0 to i64
  %2 = sitofp i64 %1 to float
  store float %2, float* %_lcompilers_aint_f32, align 4
  br label %return

return:                                           ; preds = %.entry
  %3 = load float, float* %_lcompilers_aint_f32, align 4
  ret float %3
}

define float @_lcompilers_aint_f321(float* %a) {
.entry:
  %_lcompilers_aint_f321 = alloca float, align 4
  %0 = load float, float* %a, align 4
  %1 = fptosi float %0 to i64
  %2 = sitofp i64 %1 to float
  store float %2, float* %_lcompilers_aint_f321, align 4
  br label %return

return:                                           ; preds = %.entry
  %3 = load float, float* %_lcompilers_aint_f321, align 4
  ret float %3
}

define double @_lcompilers_aint_f64(double* %a) {
.entry:
  %_lcompilers_aint_f64 = alloca double, align 8
  %0 = load double, double* %a, align 8
  %1 = fptosi double %0 to i64
  %2 = sitofp i64 %1 to double
  store double %2, double* %_lcompilers_aint_f64, align 8
  br label %return

return:                                           ; preds = %.entry
  %3 = load double, double* %_lcompilers_aint_f64, align 8
  ret double %3
}

define double @_lcompilers_aint_f641(double* %a) {
.entry:
  %_lcompilers_aint_f641 = alloca double, align 8
  %0 = load double, double* %a, align 8
  %1 = fptosi double %0 to i64
  %2 = sitofp i64 %1 to double
  store double %2, double* %_lcompilers_aint_f641, align 8
  br label %return

return:                                           ; preds = %.entry
  %3 = load double, double* %_lcompilers_aint_f641, align 8
  ret double %3
}

define float @_lcompilers_anint_f32(float* %a) {
.entry:
  %call_arg_value1 = alloca float, align 4
  %call_arg_value = alloca float, align 4
  %_lcompilers_anint_f32 = alloca float, align 4
  %0 = load float, float* %a, align 4
  %1 = fcmp ogt float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %a, align 4
  %3 = fadd float %2, 5.000000e-01
  store float %3, float* %call_arg_value, align 4
  %4 = call float @_lcompilers_aint_f32(float* %call_arg_value)
  store float %4, float* %_lcompilers_anint_f32, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %5 = load float, float* %a, align 4
  %6 = fsub float %5, 5.000000e-01
  store float %6, float* %call_arg_value1, align 4
  %7 = call float @_lcompilers_aint_f321(float* %call_arg_value1)
  store float %7, float* %_lcompilers_anint_f32, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %8 = load float, float* %_lcompilers_anint_f32, align 4
  ret float %8
}

define double @_lcompilers_anint_f64(double* %a) {
.entry:
  %call_arg_value1 = alloca double, align 8
  %call_arg_value = alloca double, align 8
  %_lcompilers_anint_f64 = alloca double, align 8
  %0 = load double, double* %a, align 8
  %1 = fcmp ogt double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %a, align 8
  %3 = fadd double %2, 5.000000e-01
  store double %3, double* %call_arg_value, align 8
  %4 = call double @_lcompilers_aint_f64(double* %call_arg_value)
  store double %4, double* %_lcompilers_anint_f64, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %5 = load double, double* %a, align 8
  %6 = fsub double %5, 5.000000e-01
  store double %6, double* %call_arg_value1, align 8
  %7 = call double @_lcompilers_aint_f641(double* %call_arg_value1)
  store double %7, double* %_lcompilers_anint_f64, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %8 = load double, double* %_lcompilers_anint_f64, align 8
  ret double %8
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %dp = alloca i32, align 4
  store i32 8, i32* %dp, align 4
  %x = alloca float, align 4
  store float 1.000000e+00, float* %x, align 4
  %2 = load float, float* %x, align 4
  %3 = fpext float %2 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i32 0, i32 0), double %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  store float 1.000000e+00, float* %x, align 4
  %4 = load float, float* %x, align 4
  %5 = fpext float %4 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i32 0, i32 0), double %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  store float 1.000000e+00, float* %x, align 4
  %6 = load float, float* %x, align 4
  %7 = fpext float %6 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @8, i32 0, i32 0), double %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  store float 1.000000e+00, float* %x, align 4
  %8 = load float, float* %x, align 4
  %9 = fpext float %8 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @11, i32 0, i32 0), double %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  store float 1.000000e+00, float* %x, align 4
  %10 = load float, float* %x, align 4
  %11 = fpext float %10 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @14, i32 0, i32 0), double %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))
  store float 1.000000e+00, float* %x, align 4
  %12 = load float, float* %x, align 4
  %13 = fpext float %12 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @17, i32 0, i32 0), double %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i32 0, i32 0))
  store float 1.000000e+00, float* %x, align 4
  %14 = load float, float* %x, align 4
  %15 = fpext float %14 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @20, i32 0, i32 0), double %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)
