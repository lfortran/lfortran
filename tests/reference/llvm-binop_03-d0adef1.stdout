; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"I8\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data = private constant [11 x i8] c"ERROR STOP\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data, i32 0, i32 0), i64 10 }>
@string_const_data.1 = private constant [2 x i8] c"\0A\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.1, i32 0, i32 0), i64 1 }>
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.3 = private unnamed_addr constant [3 x i8] c"R8\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.4 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.5 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.4, i32 0, i32 0), i64 10 }>
@string_const_data.6 = private constant [2 x i8] c"\0A\00"
@string_const.7 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.6, i32 0, i32 0), i64 1 }>
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define double @_lcompilers_abs_f64(double* %x) {
.entry:
  %_lcompilers_abs_f64 = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp oge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  store double %2, double* %_lcompilers_abs_f64, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  %4 = fneg double %3
  store double %4, double* %_lcompilers_abs_f64, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load double, double* %_lcompilers_abs_f64, align 8
  ret double %5
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca double, align 8
  %x = alloca i64, align 8
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %x1 = alloca i64, align 8
  %y = alloca double, align 8
  store i64 665663010, i64* %x1, align 4
  %2 = load i64, i64* %x1, align 4
  %simplified_pow_operation = mul i64 %2, %2
  store i64 %simplified_pow_operation, i64* %x1, align 4
  %3 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i64* %x1)
  %4 = call i64 @_lfortran_str_len(i8* %3)
  %5 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %5 to %string_descriptor*
  %6 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %3, i8** %6, align 8
  %7 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %4, i64* %7, align 4
  %8 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %11 = load i64, i64* %10, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %9, i64 %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i64 1)
  %12 = load i64, i64* %x1, align 4
  %13 = icmp ne i64 %12, 443107242882260100
  br i1 %13, label %then, label %else

then:                                             ; preds = %.entry
  %14 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %15 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %14, i8* %15)
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  store double 0x41C3D69B11000000, double* %y, align 8
  %16 = load double, double* %y, align 8
  %simplified_pow_operation2 = fmul double %16, %16
  store double %simplified_pow_operation2, double* %y, align 8
  %17 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.3, i32 0, i32 0), i32 0, i32 0, double* %y)
  %18 = call i64 @_lfortran_str_len(i8* %17)
  %19 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc3 = bitcast i8* %19 to %string_descriptor*
  %20 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 0
  store i8* %17, i8** %20, align 8
  %21 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 1
  store i64 %18, i64* %21, align 4
  %22 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 1
  %25 = load i64, i64* %24, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i8* %23, i64 %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), i64 1)
  %26 = load double, double* %y, align 8
  %27 = fsub double %26, 0x439898EEC2459972
  store double %27, double* %call_arg_value, align 8
  %28 = call double @_lcompilers_abs_f64(double* %call_arg_value)
  %29 = fcmp ogt double %28, 0x3BFD83C940000000
  br i1 %29, label %then4, label %else5

then4:                                            ; preds = %ifcont
  %30 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.5, i32 0, i32 0), align 8
  %31 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.7, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %30, i8* %31)
  call void @exit(i32 1)
  br label %ifcont6

else5:                                            ; preds = %ifcont
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont6
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i64, i8*, i64)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
