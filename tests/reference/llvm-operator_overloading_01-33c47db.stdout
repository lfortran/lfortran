; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"T*T:\00", align 1
@3 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"T*F:\00", align 1
@9 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@10 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@12 = private unnamed_addr constant [2 x i8] c" \00", align 1
@13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@14 = private unnamed_addr constant [5 x i8] c"F*T:\00", align 1
@15 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@16 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@17 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@18 = private unnamed_addr constant [2 x i8] c" \00", align 1
@19 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@20 = private unnamed_addr constant [5 x i8] c"F*F:\00", align 1
@21 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@22 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@23 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@24 = private unnamed_addr constant [2 x i8] c" \00", align 1
@25 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@26 = private unnamed_addr constant [5 x i8] c"T+T:\00", align 1
@27 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@28 = private unnamed_addr constant [2 x i8] c" \00", align 1
@29 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@30 = private unnamed_addr constant [5 x i8] c"T+F:\00", align 1
@31 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@32 = private unnamed_addr constant [2 x i8] c" \00", align 1
@33 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@34 = private unnamed_addr constant [5 x i8] c"F+T:\00", align 1
@35 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@36 = private unnamed_addr constant [2 x i8] c" \00", align 1
@37 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@38 = private unnamed_addr constant [5 x i8] c"F+F:\00", align 1
@39 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @__module_operator_overloading_01_overload_asterisk_m_bin_add(i1* %log1, i1* %log2) {
.entry:
  %bin_add = alloca i32, align 4
  %0 = load i1, i1* %log1, align 1
  %1 = load i1, i1* %log2, align 1
  %2 = icmp eq i1 %0, false
  %3 = select i1 %2, i1 %0, i1 %1
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  store i32 2, i32* %bin_add, align 4
  br label %ifcont3

else:                                             ; preds = %.entry
  %4 = load i1, i1* %log1, align 1
  %5 = xor i1 %4, true
  %6 = load i1, i1* %log2, align 1
  %7 = xor i1 %6, true
  %8 = icmp eq i1 %5, false
  %9 = select i1 %8, i1 %5, i1 %7
  br i1 %9, label %then1, label %else2

then1:                                            ; preds = %else
  store i32 0, i32* %bin_add, align 4
  br label %ifcont

else2:                                            ; preds = %else
  store i32 1, i32* %bin_add, align 4
  br label %ifcont

ifcont:                                           ; preds = %else2, %then1
  br label %ifcont3

ifcont3:                                          ; preds = %ifcont, %then
  br label %return

return:                                           ; preds = %ifcont3
  %10 = load i32, i32* %bin_add, align 4
  ret i32 %10
}

define i1 @__module_operator_overloading_01_overload_asterisk_m_logical_and(i1* %log1, i1* %log2) {
.entry:
  %logical_and = alloca i1, align 1
  %0 = load i1, i1* %log1, align 1
  %1 = load i1, i1* %log2, align 1
  %2 = icmp eq i1 %0, false
  %3 = select i1 %2, i1 %0, i1 %1
  store i1 %3, i1* %logical_and, align 1
  br label %return

return:                                           ; preds = %.entry
  %4 = load i1, i1* %logical_and, align 1
  ret i1 %4
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %f = alloca i1, align 1
  store i1 false, i1* %f, align 1
  %t = alloca i1, align 1
  store i1 true, i1* %t, align 1
  %2 = call i1 @__module_operator_overloading_01_overload_asterisk_m_logical_and(i1* %t, i1* %t)
  %3 = icmp eq i1 %2, false
  %4 = select i1 %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0)
  %5 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 8, i8* %4)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %6 = call i1 @__module_operator_overloading_01_overload_asterisk_m_logical_and(i1* %t, i1* %f)
  %7 = icmp eq i1 %6, false
  %8 = select i1 %7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0)
  %9 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i32 8, i8* %8)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  %10 = call i1 @__module_operator_overloading_01_overload_asterisk_m_logical_and(i1* %f, i1* %t)
  %11 = icmp eq i1 %10, false
  %12 = select i1 %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @16, i32 0, i32 0)
  %13 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @14, i32 0, i32 0), i32 8, i8* %12)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i32 0, i32 0), i8* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))
  %14 = call i1 @__module_operator_overloading_01_overload_asterisk_m_logical_and(i1* %f, i1* %f)
  %15 = icmp eq i1 %14, false
  %16 = select i1 %15, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @21, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @22, i32 0, i32 0)
  %17 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @20, i32 0, i32 0), i32 8, i8* %16)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @23, i32 0, i32 0), i8* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i32 0, i32 0))
  %18 = call i32 @__module_operator_overloading_01_overload_asterisk_m_bin_add(i1* %t, i1* %t)
  %19 = sext i32 %18 to i64
  %20 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @26, i32 0, i32 0), i32 2, i64 %19)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @27, i32 0, i32 0), i8* %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @25, i32 0, i32 0))
  %21 = call i32 @__module_operator_overloading_01_overload_asterisk_m_bin_add(i1* %t, i1* %f)
  %22 = sext i32 %21 to i64
  %23 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @30, i32 0, i32 0), i32 2, i64 %22)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i32 0, i32 0), i8* %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @29, i32 0, i32 0))
  %24 = call i32 @__module_operator_overloading_01_overload_asterisk_m_bin_add(i1* %f, i1* %t)
  %25 = sext i32 %24 to i64
  %26 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @34, i32 0, i32 0), i32 2, i64 %25)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @35, i32 0, i32 0), i8* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @33, i32 0, i32 0))
  %27 = call i32 @__module_operator_overloading_01_overload_asterisk_m_bin_add(i1* %f, i1* %f)
  %28 = sext i32 %27 to i64
  %29 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @38, i32 0, i32 0), i32 2, i64 %28)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @39, i32 0, i32 0), i8* %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @37, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)
