; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data = private constant [13 x i8] c"early return\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([13 x i8], [13 x i8]* @string_const_data, i32 0, i32 0), i64 12 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.1 = private constant [14 x i8] c"normal return\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([14 x i8], [14 x i8]* @string_const_data.1, i32 0, i32 0), i64 13 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.3 = private constant [13 x i8] c"main1 called\00"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([13 x i8], [13 x i8]* @string_const_data.3, i32 0, i32 0), i64 12 }>
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %main_out = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %main_out1 = alloca i32, align 4
  %2 = call i32 @main1()
  store i32 %2, i32* %main_out1, align 4
  %3 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

define i32 @main1() {
.entry:
  %i = alloca i32, align 4
  %main1 = alloca i32, align 4
  store i32 10, i32* %i, align 4
  %0 = load i32, i32* %i, align 4
  %1 = icmp sgt i32 %0, 5
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i32, i32* %i, align 4
  store i32 %2, i32* %main1, align 4
  %3 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  %4 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  %5 = load i32, i32* %i, align 4
  store i32 %5, i32* %main1, align 4
  br label %return

return:                                           ; preds = %ifcont, %then
  %6 = load i32, i32* %main1, align 4
  ret i32 %6
}

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lpython_free_argv()
