; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type <{ float, float }>
%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [8 x i8] c"{R4,R4}\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %x = alloca %complex_4, align 8
  %y = alloca %complex_4, align 8
  %z = alloca %complex_4, align 8
  %2 = alloca %complex_4, align 8
  %3 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 0
  %4 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 1
  store float 3.000000e+00, float* %3, align 4
  store float 4.000000e+00, float* %4, align 4
  %5 = load %complex_4, %complex_4* %2, align 1
  store %complex_4 %5, %complex_4* %x, align 1
  %6 = alloca %complex_4, align 8
  %7 = getelementptr %complex_4, %complex_4* %6, i32 0, i32 0
  %8 = getelementptr %complex_4, %complex_4* %6, i32 0, i32 1
  store float 3.000000e+00, float* %7, align 4
  store float 2.000000e+00, float* %8, align 4
  %9 = load %complex_4, %complex_4* %6, align 1
  store %complex_4 %9, %complex_4* %y, align 1
  %10 = load %complex_4, %complex_4* %x, align 1
  %11 = load %complex_4, %complex_4* %y, align 1
  %12 = alloca %complex_4, align 8
  store %complex_4 %10, %complex_4* %12, align 1
  %13 = alloca %complex_4, align 8
  store %complex_4 %11, %complex_4* %13, align 1
  %14 = alloca %complex_4, align 8
  call void @_lfortran_complex_pow_32(%complex_4* %12, %complex_4* %13, %complex_4* %14)
  %15 = load %complex_4, %complex_4* %14, align 1
  store %complex_4 %15, %complex_4* %z, align 1
  %16 = alloca i64, align 8
  %17 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @serialization_info, i32 0, i32 0), i64* %16, i32 0, i32 0, %complex_4* %z)
  %18 = load i64, i64* %16, align 4
  %19 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %19 to %string_descriptor*
  %20 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %17, i8** %20, align 8
  %21 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %18, i64* %21, align 4
  %22 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %25 = load i64, i64* %24, align 4
  %26 = trunc i64 %25 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %23, i32 %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_complex_pow_32(%complex_4*, %complex_4*, %complex_4*)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lpython_free_argv()
