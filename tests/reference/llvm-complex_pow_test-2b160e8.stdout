; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [10 x i8] c"(%f,%f)%s\00", align 1

define i32 @main() {
.entry:
  %x = alloca %complex_4, align 8
  %y = alloca %complex_4, align 8
  %z = alloca %complex_4, align 8
  %0 = alloca %complex_4, align 8
  %1 = getelementptr %complex_4, %complex_4* %0, i32 0, i32 0
  %2 = getelementptr %complex_4, %complex_4* %0, i32 0, i32 1
  store float 3.000000e+00, float* %1, align 4
  store float 4.000000e+00, float* %2, align 4
  %3 = load %complex_4, %complex_4* %0, align 4
  store %complex_4 %3, %complex_4* %x, align 4
  %4 = alloca %complex_4, align 8
  %5 = getelementptr %complex_4, %complex_4* %4, i32 0, i32 0
  %6 = getelementptr %complex_4, %complex_4* %4, i32 0, i32 1
  store float 3.000000e+00, float* %5, align 4
  store float 2.000000e+00, float* %6, align 4
  %7 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %7, %complex_4* %y, align 4
  %8 = load %complex_4, %complex_4* %x, align 4
  %9 = load %complex_4, %complex_4* %y, align 4
  %10 = alloca %complex_4, align 8
  store %complex_4 %8, %complex_4* %10, align 4
  %11 = alloca %complex_4, align 8
  store %complex_4 %9, %complex_4* %11, align 4
  %12 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_pow_32(%complex_4* %10, %complex_4* %11, %complex_4* %12)
  %13 = load %complex_4, %complex_4* %12, align 4
  store %complex_4 %13, %complex_4* %z, align 4
  %14 = load %complex_4, %complex_4* %z, align 4
  %15 = alloca %complex_4, align 8
  store %complex_4 %14, %complex_4* %15, align 4
  %16 = getelementptr %complex_4, %complex_4* %15, i32 0, i32 0
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = alloca %complex_4, align 8
  store %complex_4 %14, %complex_4* %19, align 4
  %20 = getelementptr %complex_4, %complex_4* %19, i32 0, i32 1
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i32 0, i32 0), double %18, double %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  ret i32 0
}

declare void @_lfortran_complex_pow_32(%complex_4*, %complex_4*, %complex_4*, ...)

declare void @_lfortran_printf(i8*, ...)
