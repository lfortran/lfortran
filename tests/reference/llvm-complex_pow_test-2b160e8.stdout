; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %x = alloca %complex_4, align 8
  %y = alloca %complex_4, align 8
  %z = alloca %complex_4, align 8
  %2 = alloca %complex_4, align 8
  %3 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 0
  %4 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 1
  store float 3.000000e+00, float* %3, align 4
  store float 4.000000e+00, float* %4, align 4
  %5 = load %complex_4, %complex_4* %2, align 4
  store %complex_4 %5, %complex_4* %x, align 4
  %6 = alloca %complex_4, align 8
  %7 = getelementptr %complex_4, %complex_4* %6, i32 0, i32 0
  %8 = getelementptr %complex_4, %complex_4* %6, i32 0, i32 1
  store float 3.000000e+00, float* %7, align 4
  store float 2.000000e+00, float* %8, align 4
  %9 = load %complex_4, %complex_4* %6, align 4
  store %complex_4 %9, %complex_4* %y, align 4
  %10 = load %complex_4, %complex_4* %x, align 4
  %11 = load %complex_4, %complex_4* %y, align 4
  %12 = alloca %complex_4, align 8
  store %complex_4 %10, %complex_4* %12, align 4
  %13 = alloca %complex_4, align 8
  store %complex_4 %11, %complex_4* %13, align 4
  %14 = alloca %complex_4, align 8
  call void @_lfortran_complex_pow_32(%complex_4* %12, %complex_4* %13, %complex_4* %14)
  %15 = load %complex_4, %complex_4* %14, align 4
  store %complex_4 %15, %complex_4* %z, align 4
  %16 = load %complex_4, %complex_4* %z, align 4
  %17 = alloca %complex_4, align 8
  store %complex_4 %16, %complex_4* %17, align 4
  %18 = getelementptr %complex_4, %complex_4* %17, i32 0, i32 0
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = alloca %complex_4, align 8
  store %complex_4 %16, %complex_4* %21, align 4
  %22 = getelementptr %complex_4, %complex_4* %21, i32 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = fpext float %23 to double
  %25 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 6, double %20, i32 6, double %24)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_complex_pow_32(%complex_4*, %complex_4*, %complex_4*)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)
