; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [12 x i8] c"Hello World\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %nwrite = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %nwrite1 = alloca i32, align 4
  store i32 6, i32* %nwrite1, align 4
  store i32 6, i32* %nwrite1, align 4
  %2 = load i32, i32* %nwrite1, align 4
  %3 = alloca i32*, align 8
  store i32* null, i32** %3, align 8
  %4 = load i32*, i32** %3, align 8
  call void (i32, i32*, i8*, ...) @_lfortran_file_write(i32 %2, i32* %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_file_write(i32, i32*, i8*, ...)
