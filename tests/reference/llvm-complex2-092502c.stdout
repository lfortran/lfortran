; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type <{ float, float }>
%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [8 x i8] c"{R4,R4}\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [8 x i8] c"{R4,R4}\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.2 = private unnamed_addr constant [8 x i8] c"{R4,R4}\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %x = alloca %complex_4, align 8
  %2 = alloca %complex_4, align 8
  %3 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 0
  %4 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 1
  store float 3.000000e+00, float* %3, align 4
  store float 4.000000e+00, float* %4, align 4
  %5 = load %complex_4, %complex_4* %2, align 1
  store %complex_4 %5, %complex_4* %x, align 1
  %6 = load %complex_4, %complex_4* %x, align 1
  %7 = alloca %complex_4, align 8
  %8 = getelementptr %complex_4, %complex_4* %7, i32 0, i32 0
  %9 = getelementptr %complex_4, %complex_4* %7, i32 0, i32 1
  store float 4.000000e+00, float* %8, align 4
  store float 0.000000e+00, float* %9, align 4
  %10 = load %complex_4, %complex_4* %7, align 1
  %11 = alloca %complex_4, align 8
  store %complex_4 %6, %complex_4* %11, align 1
  %12 = alloca %complex_4, align 8
  store %complex_4 %10, %complex_4* %12, align 1
  %13 = alloca %complex_4, align 8
  call void @_lfortran_complex_add_32(%complex_4* %11, %complex_4* %12, %complex_4* %13)
  %14 = load %complex_4, %complex_4* %13, align 1
  store %complex_4 %14, %complex_4* %x, align 1
  %15 = alloca i64, align 8
  %16 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @serialization_info, i32 0, i32 0), i64* %15, i32 0, i32 0, %complex_4* %x)
  %17 = load i64, i64* %15, align 4
  %18 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %18 to %string_descriptor*
  %19 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %16, i8** %19, align 8
  %20 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %17, i64* %20, align 4
  %21 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %24 = load i64, i64* %23, align 4
  %25 = trunc i64 %24 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %22, i32 %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  %26 = alloca %complex_4, align 8
  %27 = getelementptr %complex_4, %complex_4* %26, i32 0, i32 0
  %28 = getelementptr %complex_4, %complex_4* %26, i32 0, i32 1
  store float 2.000000e+00, float* %27, align 4
  store float 0.000000e+00, float* %28, align 4
  %29 = load %complex_4, %complex_4* %26, align 1
  %30 = load %complex_4, %complex_4* %x, align 1
  %31 = alloca %complex_4, align 8
  store %complex_4 %29, %complex_4* %31, align 1
  %32 = alloca %complex_4, align 8
  store %complex_4 %30, %complex_4* %32, align 1
  %33 = alloca %complex_4, align 8
  call void @_lfortran_complex_add_32(%complex_4* %31, %complex_4* %32, %complex_4* %33)
  %34 = load %complex_4, %complex_4* %33, align 1
  store %complex_4 %34, %complex_4* %x, align 1
  %35 = alloca i64, align 8
  %36 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @serialization_info.1, i32 0, i32 0), i64* %35, i32 0, i32 0, %complex_4* %x)
  %37 = load i64, i64* %35, align 4
  %38 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc1 = bitcast i8* %38 to %string_descriptor*
  %39 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  store i8* %36, i8** %39, align 8
  %40 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  store i64 %37, i64* %40, align 4
  %41 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  %44 = load i64, i64* %43, align 4
  %45 = trunc i64 %44 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %42, i32 %45, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  %46 = alloca %complex_4, align 8
  %47 = getelementptr %complex_4, %complex_4* %46, i32 0, i32 0
  %48 = getelementptr %complex_4, %complex_4* %46, i32 0, i32 1
  store float 2.000000e+00, float* %47, align 4
  store float 0.000000e+00, float* %48, align 4
  %49 = load %complex_4, %complex_4* %46, align 1
  %50 = load %complex_4, %complex_4* %x, align 1
  %51 = alloca %complex_4, align 8
  store %complex_4 %49, %complex_4* %51, align 1
  %52 = alloca %complex_4, align 8
  store %complex_4 %50, %complex_4* %52, align 1
  %53 = alloca %complex_4, align 8
  call void @_lfortran_complex_add_32(%complex_4* %51, %complex_4* %52, %complex_4* %53)
  %54 = load %complex_4, %complex_4* %53, align 1
  %55 = alloca %complex_4, align 8
  %56 = getelementptr %complex_4, %complex_4* %55, i32 0, i32 0
  %57 = getelementptr %complex_4, %complex_4* %55, i32 0, i32 1
  store float 0.000000e+00, float* %56, align 4
  store float 3.000000e+00, float* %57, align 4
  %58 = load %complex_4, %complex_4* %55, align 1
  %59 = alloca %complex_4, align 8
  store %complex_4 %54, %complex_4* %59, align 1
  %60 = alloca %complex_4, align 8
  store %complex_4 %58, %complex_4* %60, align 1
  %61 = alloca %complex_4, align 8
  call void @_lfortran_complex_add_32(%complex_4* %59, %complex_4* %60, %complex_4* %61)
  %62 = load %complex_4, %complex_4* %61, align 1
  store %complex_4 %62, %complex_4* %x, align 1
  %63 = alloca i64, align 8
  %64 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @serialization_info.2, i32 0, i32 0), i64* %63, i32 0, i32 0, %complex_4* %x)
  %65 = load i64, i64* %63, align 4
  %66 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc2 = bitcast i8* %66 to %string_descriptor*
  %67 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  store i8* %64, i8** %67, align 8
  %68 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  store i64 %65, i64* %68, align 4
  %69 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  %72 = load i64, i64* %71, align 4
  %73 = trunc i64 %72 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %70, i32 %73, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i32 1)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_complex_add_32(%complex_4*, %complex_4*, %complex_4*)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lpython_free_argv()
