; ModuleID = 'LFortran'
source_filename = "LFortran"

%shape = type { i32 (...)** }
%string_descriptor = type <{ i8*, i64 }>
%circle = type { %shape, float }
%rectangle = type { %shape, float, float }

@_Name_shape = private unnamed_addr constant [6 x i8] c"shape\00", align 1
@_Type_Info_shape = linkonce_odr unnamed_addr constant { i8* } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @_Name_shape, i32 0, i32 0) }, align 8
@_VTable_shape = linkonce_odr unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* bitcast ({ i8* }* @_Type_Info_shape to i8*), i8* bitcast (void (i8*, i8*)* @_copy_select_type_13_module_shape to i8*), i8* null] }, align 8
@_Name_circle = private unnamed_addr constant [7 x i8] c"circle\00", align 1
@_Type_Info_circle = linkonce_odr unnamed_addr constant { i8*, i8* } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @_Name_circle, i32 0, i32 0), i8* bitcast ({ i8* }* @_Type_Info_shape to i8*) }, align 8
@_VTable_circle = linkonce_odr unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_Type_Info_circle to i8*), i8* bitcast (void (i8*, i8*)* @_copy_select_type_13_module_circle to i8*), i8* bitcast (float (%circle*)* @__module_select_type_13_module_circle_area to i8*)] }, align 8
@_Name_rectangle = private unnamed_addr constant [10 x i8] c"rectangle\00", align 1
@_Type_Info_rectangle = linkonce_odr unnamed_addr constant { i8*, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @_Name_rectangle, i32 0, i32 0), i8* bitcast ({ i8* }* @_Type_Info_shape to i8*) }, align 8
@_VTable_rectangle = linkonce_odr unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_Type_Info_rectangle to i8*), i8* bitcast (void (i8*, i8*)* @_copy_select_type_13_module_rectangle to i8*), i8* bitcast (float (%rectangle*)* @__module_select_type_13_module_rectangle_area to i8*)] }, align 8
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data = private constant [20 x i8] c"Matched as rectangle"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([20 x i8], [20 x i8]* @string_const_data, i32 0, i32 0), i64 20 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.1 = private constant [17 x i8] c"Matched as circle"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([17 x i8], [17 x i8]* @string_const_data.1, i32 0, i32 0), i64 17 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"R4\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@"ERROR STOP" = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.3 = private constant [16 x i8] c"Matched as shape"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([16 x i8], [16 x i8]* @string_const_data.3, i32 0, i32 0), i64 16 }>
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.5 = private constant [17 x i8] c"Matched as circle"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([17 x i8], [17 x i8]* @string_const_data.5, i32 0, i32 0), i64 17 }>
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.7 = private constant [20 x i8] c"Matched as rectangle"
@string_const.8 = private global %string_descriptor <{ i8* getelementptr inbounds ([20 x i8], [20 x i8]* @string_const_data.7, i32 0, i32 0), i64 20 }>
@13 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.9 = private unnamed_addr constant [6 x i8] c"R4,R4\00", align 1
@15 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@17 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@19 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@20 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.10 = private constant [16 x i8] c"Matched as shape"
@string_const.11 = private global %string_descriptor <{ i8* getelementptr inbounds ([16 x i8], [16 x i8]* @string_const_data.10, i32 0, i32 0), i64 16 }>
@21 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define float @__module_select_type_13_module_circle_area(%circle* %this) {
.entry:
  %circle_area = alloca float, align 4
  %0 = getelementptr %circle, %circle* %this, i32 0, i32 1
  %1 = load float, float* %0, align 4
  %2 = fmul float 0x400921FA00000000, %1
  %3 = getelementptr %circle, %circle* %this, i32 0, i32 1
  %4 = load float, float* %3, align 4
  %5 = fmul float %2, %4
  store float %5, float* %circle_area, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load float, float* %circle_area, align 4
  ret float %6
}

define float @__module_select_type_13_module_rectangle_area(%rectangle* %this) {
.entry:
  %rectangle_area = alloca float, align 4
  %0 = getelementptr %rectangle, %rectangle* %this, i32 0, i32 1
  %1 = load float, float* %0, align 4
  %2 = getelementptr %rectangle, %rectangle* %this, i32 0, i32 2
  %3 = load float, float* %2, align 4
  %4 = fmul float %1, %3
  store float %4, float* %rectangle_area, align 4
  br label %return

return:                                           ; preds = %.entry
  %5 = load float, float* %rectangle_area, align 4
  ret float %5
}

define linkonce_odr void @_copy_select_type_13_module_shape(i8* %0, i8* %1) {
entry:
  %2 = bitcast i8* %0 to %shape*
  %3 = bitcast i8* %1 to %shape*
  %4 = bitcast %shape* %3 to i32 (...)***
  %5 = load i32 (...)**, i32 (...)*** %4, align 8
  %6 = bitcast %shape* %2 to i32 (...)***
  store i32 (...)** %5, i32 (...)*** %6, align 8
  %7 = bitcast %shape* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_shape, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %7, align 8
  ret void
}

define linkonce_odr void @_copy_select_type_13_module_circle(i8* %0, i8* %1) {
entry:
  %2 = bitcast i8* %0 to %circle*
  %3 = bitcast i8* %1 to %circle*
  %4 = bitcast %circle* %3 to i32 (...)***
  %5 = load i32 (...)**, i32 (...)*** %4, align 8
  %6 = bitcast %circle* %2 to i32 (...)***
  store i32 (...)** %5, i32 (...)*** %6, align 8
  %7 = getelementptr %circle, %circle* %2, i32 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = getelementptr %circle, %circle* %3, i32 0, i32 1
  br i1 true, label %then, label %else

then:                                             ; preds = %entry
  store float %8, float* %9, align 4
  br label %ifcont

else:                                             ; preds = %entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %10 = getelementptr %circle, %circle* %2, i32 0, i32 0
  %11 = getelementptr %circle, %circle* %3, i32 0, i32 0
  %12 = bitcast %circle* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_circle, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %12, align 8
  ret void
}

define linkonce_odr void @_copy_select_type_13_module_rectangle(i8* %0, i8* %1) {
entry:
  %2 = bitcast i8* %0 to %rectangle*
  %3 = bitcast i8* %1 to %rectangle*
  %4 = bitcast %rectangle* %3 to i32 (...)***
  %5 = load i32 (...)**, i32 (...)*** %4, align 8
  %6 = bitcast %rectangle* %2 to i32 (...)***
  store i32 (...)** %5, i32 (...)*** %6, align 8
  %7 = getelementptr %rectangle, %rectangle* %2, i32 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = getelementptr %rectangle, %rectangle* %3, i32 0, i32 1
  br i1 true, label %then, label %else

then:                                             ; preds = %entry
  store float %8, float* %9, align 4
  br label %ifcont

else:                                             ; preds = %entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %10 = getelementptr %rectangle, %rectangle* %2, i32 0, i32 2
  %11 = load float, float* %10, align 4
  %12 = getelementptr %rectangle, %rectangle* %3, i32 0, i32 2
  br i1 true, label %then1, label %else2

then1:                                            ; preds = %ifcont
  store float %11, float* %12, align 4
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %13 = getelementptr %rectangle, %rectangle* %2, i32 0, i32 0
  %14 = getelementptr %rectangle, %rectangle* %3, i32 0, i32 0
  %15 = bitcast %rectangle* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_rectangle, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %15, align 8
  ret void
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %s1 = alloca %shape*, align 8
  store %shape* null, %shape** %s1, align 8
  %s2 = alloca %shape*, align 8
  store %shape* null, %shape** %s2, align 8
  %2 = call i8* @_lfortran_malloc(i64 16)
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 16, i1 false)
  %3 = bitcast i8* %2 to %shape*
  store %shape* %3, %shape** %s1, align 8
  %4 = load %shape*, %shape** %s1, align 8
  %5 = bitcast %shape* %4 to %circle*
  %6 = bitcast %shape* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_circle, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr %circle, %circle* %5, i32 0, i32 1
  %8 = getelementptr %circle, %circle* %5, i32 0, i32 0
  %9 = alloca i1, align 1
  %10 = load %shape*, %shape** %s1, align 8
  %11 = ptrtoint %shape* %10 to i64
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %then1, label %else

then:                                             ; preds = %ifcont
  br label %"~select_type_block_.start"

then1:                                            ; preds = %.entry
  %13 = alloca i32 (...)**, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_shape, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = bitcast i32 (...)*** %13 to i8*
  %15 = call i8* @__lfortran_dynamic_cast(i8* %14, i8* bitcast ({ i8*, i8* }* @_Type_Info_rectangle to i8*), i1 false)
  %16 = icmp ne i8* %15, null
  store i1 %16, i1* %9, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  %17 = bitcast %shape* %10 to i8*
  %18 = call i8* @__lfortran_dynamic_cast(i8* %17, i8* bitcast ({ i8*, i8* }* @_Type_Info_rectangle to i8*), i1 false)
  %19 = icmp ne i8* %18, null
  store i1 %19, i1* %9, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then1
  %20 = load i1, i1* %9, align 1
  br i1 %20, label %then, label %else2

"~select_type_block_.start":                      ; preds = %then
  %21 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %21, i32 20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  br label %"~select_type_block_.end"

"~select_type_block_.end":                        ; preds = %"~select_type_block_.start"
  br label %ifcont14

else2:                                            ; preds = %ifcont
  %22 = alloca i1, align 1
  %23 = load %shape*, %shape** %s1, align 8
  %24 = ptrtoint %shape* %23 to i64
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %then4, label %else5

then3:                                            ; preds = %ifcont6
  br label %"~select_type_block_1.start"

then4:                                            ; preds = %else2
  %26 = alloca i32 (...)**, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_shape, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = bitcast i32 (...)*** %26 to i8*
  %28 = call i8* @__lfortran_dynamic_cast(i8* %27, i8* bitcast ({ i8*, i8* }* @_Type_Info_circle to i8*), i1 false)
  %29 = icmp ne i8* %28, null
  store i1 %29, i1* %22, align 1
  br label %ifcont6

else5:                                            ; preds = %else2
  %30 = bitcast %shape* %23 to i8*
  %31 = call i8* @__lfortran_dynamic_cast(i8* %30, i8* bitcast ({ i8*, i8* }* @_Type_Info_circle to i8*), i1 false)
  %32 = icmp ne i8* %31, null
  store i1 %32, i1* %22, align 1
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %33 = load i1, i1* %22, align 1
  br i1 %33, label %then3, label %else13

"~select_type_block_1.start":                     ; preds = %then3
  %34 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %34, i32 17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  %35 = load %shape*, %shape** %s1, align 8
  %36 = icmp eq %shape* %35, null
  br i1 %36, label %then7, label %else8

"~select_type_block_1.end":                       ; preds = %ifcont12
  br label %ifcont14

then7:                                            ; preds = %"~select_type_block_1.start"
  %37 = call i8* @_lfortran_malloc(i64 8)
  call void @llvm.memset.p0i8.i32(i8* %37, i8 0, i32 8, i1 false)
  %38 = bitcast i8* %37 to %shape*
  store %shape* %38, %shape** %s1, align 8
  %39 = load %shape*, %shape** %s1, align 8
  %40 = bitcast %shape* %38 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_shape, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %40, align 8
  br label %ifcont9

else8:                                            ; preds = %"~select_type_block_1.start"
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %41 = load %shape*, %shape** %s1, align 8
  %42 = bitcast %shape* %41 to %circle*
  %43 = getelementptr %circle, %circle* %42, i32 0, i32 1
  store float 1.000000e+01, float* %43, align 4
  %44 = alloca i64, align 8
  %45 = load %shape*, %shape** %s1, align 8
  %46 = bitcast %shape* %45 to %circle*
  %47 = getelementptr %circle, %circle* %46, i32 0, i32 1
  %48 = load float, float* %47, align 4
  %49 = alloca float, align 4
  store float %48, float* %49, align 4
  %50 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i64* %44, i32 0, i32 0, float* %49)
  %51 = load i64, i64* %44, align 4
  %stringFormat_desc = alloca %string_descriptor, align 8
  %52 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %50, i8** %52, align 8
  %53 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %51, i64* %53, align 4
  %54 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %57 = load i64, i64* %56, align 4
  %58 = trunc i64 %57 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %55, i32 %58, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i32 1)
  call void @_lfortran_free(i8* %50)
  %59 = load %shape*, %shape** %s1, align 8
  %60 = bitcast %shape* %59 to %circle*
  %61 = getelementptr %circle, %circle* %60, i32 0, i32 1
  %62 = load float, float* %61, align 4
  %63 = fcmp une float %62, 1.000000e+01
  br i1 %63, label %then10, label %else11

then10:                                           ; preds = %ifcont9
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont12

else11:                                           ; preds = %ifcont9
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  br label %"~select_type_block_1.end"

else13:                                           ; preds = %ifcont6
  %64 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* %64, i32 16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0), i32 1)
  br label %ifcont14

ifcont14:                                         ; preds = %else13, %"~select_type_block_1.end", %"~select_type_block_.end"
  %65 = call i8* @_lfortran_malloc(i64 16)
  call void @llvm.memset.p0i8.i32(i8* %65, i8 0, i32 16, i1 false)
  %66 = bitcast i8* %65 to %shape*
  store %shape* %66, %shape** %s2, align 8
  %67 = load %shape*, %shape** %s2, align 8
  %68 = bitcast %shape* %67 to %rectangle*
  %69 = bitcast %shape* %66 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_rectangle, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %69, align 8
  %70 = getelementptr %rectangle, %rectangle* %68, i32 0, i32 1
  %71 = getelementptr %rectangle, %rectangle* %68, i32 0, i32 2
  %72 = getelementptr %rectangle, %rectangle* %68, i32 0, i32 0
  %73 = alloca i1, align 1
  %74 = load %shape*, %shape** %s2, align 8
  %75 = ptrtoint %shape* %74 to i64
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %then16, label %else17

then15:                                           ; preds = %ifcont18
  br label %"~select_type_block_2.start"

then16:                                           ; preds = %ifcont14
  %77 = alloca i32 (...)**, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_shape, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %77, align 8
  %78 = bitcast i32 (...)*** %77 to i8*
  %79 = call i8* @__lfortran_dynamic_cast(i8* %78, i8* bitcast ({ i8*, i8* }* @_Type_Info_circle to i8*), i1 false)
  %80 = icmp ne i8* %79, null
  store i1 %80, i1* %73, align 1
  br label %ifcont18

else17:                                           ; preds = %ifcont14
  %81 = bitcast %shape* %74 to i8*
  %82 = call i8* @__lfortran_dynamic_cast(i8* %81, i8* bitcast ({ i8*, i8* }* @_Type_Info_circle to i8*), i1 false)
  %83 = icmp ne i8* %82, null
  store i1 %83, i1* %73, align 1
  br label %ifcont18

ifcont18:                                         ; preds = %else17, %then16
  %84 = load i1, i1* %73, align 1
  br i1 %84, label %then15, label %else19

"~select_type_block_2.start":                     ; preds = %then15
  %85 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.6, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* %85, i32 17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0), i32 1)
  br label %"~select_type_block_2.end"

"~select_type_block_2.end":                       ; preds = %"~select_type_block_2.start"
  br label %ifcont38

else19:                                           ; preds = %ifcont18
  %86 = alloca i1, align 1
  %87 = load %shape*, %shape** %s2, align 8
  %88 = ptrtoint %shape* %87 to i64
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %then21, label %else22

then20:                                           ; preds = %ifcont23
  br label %"~select_type_block_3.start"

then21:                                           ; preds = %else19
  %90 = alloca i32 (...)**, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_shape, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %90, align 8
  %91 = bitcast i32 (...)*** %90 to i8*
  %92 = call i8* @__lfortran_dynamic_cast(i8* %91, i8* bitcast ({ i8*, i8* }* @_Type_Info_rectangle to i8*), i1 false)
  %93 = icmp ne i8* %92, null
  store i1 %93, i1* %86, align 1
  br label %ifcont23

else22:                                           ; preds = %else19
  %94 = bitcast %shape* %87 to i8*
  %95 = call i8* @__lfortran_dynamic_cast(i8* %94, i8* bitcast ({ i8*, i8* }* @_Type_Info_rectangle to i8*), i1 false)
  %96 = icmp ne i8* %95, null
  store i1 %96, i1* %86, align 1
  br label %ifcont23

ifcont23:                                         ; preds = %else22, %then21
  %97 = load i1, i1* %86, align 1
  br i1 %97, label %then20, label %else37

"~select_type_block_3.start":                     ; preds = %then20
  %98 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.8, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @13, i32 0, i32 0), i8* %98, i32 20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0), i32 1)
  %99 = load %shape*, %shape** %s2, align 8
  %100 = icmp eq %shape* %99, null
  br i1 %100, label %then24, label %else25

"~select_type_block_3.end":                       ; preds = %ifcont36
  br label %ifcont38

then24:                                           ; preds = %"~select_type_block_3.start"
  %101 = call i8* @_lfortran_malloc(i64 8)
  call void @llvm.memset.p0i8.i32(i8* %101, i8 0, i32 8, i1 false)
  %102 = bitcast i8* %101 to %shape*
  store %shape* %102, %shape** %s2, align 8
  %103 = load %shape*, %shape** %s2, align 8
  %104 = bitcast %shape* %102 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_shape, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %104, align 8
  br label %ifcont26

else25:                                           ; preds = %"~select_type_block_3.start"
  br label %ifcont26

ifcont26:                                         ; preds = %else25, %then24
  %105 = load %shape*, %shape** %s2, align 8
  %106 = bitcast %shape* %105 to %rectangle*
  %107 = getelementptr %rectangle, %rectangle* %106, i32 0, i32 1
  store float 5.000000e+00, float* %107, align 4
  %108 = load %shape*, %shape** %s2, align 8
  %109 = icmp eq %shape* %108, null
  br i1 %109, label %then27, label %else28

then27:                                           ; preds = %ifcont26
  %110 = call i8* @_lfortran_malloc(i64 8)
  call void @llvm.memset.p0i8.i32(i8* %110, i8 0, i32 8, i1 false)
  %111 = bitcast i8* %110 to %shape*
  store %shape* %111, %shape** %s2, align 8
  %112 = load %shape*, %shape** %s2, align 8
  %113 = bitcast %shape* %111 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_VTable_shape, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %113, align 8
  br label %ifcont29

else28:                                           ; preds = %ifcont26
  br label %ifcont29

ifcont29:                                         ; preds = %else28, %then27
  %114 = load %shape*, %shape** %s2, align 8
  %115 = bitcast %shape* %114 to %rectangle*
  %116 = getelementptr %rectangle, %rectangle* %115, i32 0, i32 2
  store float 4.000000e+00, float* %116, align 4
  %117 = alloca i64, align 8
  %118 = load %shape*, %shape** %s2, align 8
  %119 = bitcast %shape* %118 to %rectangle*
  %120 = getelementptr %rectangle, %rectangle* %119, i32 0, i32 1
  %121 = load float, float* %120, align 4
  %122 = alloca float, align 4
  store float %121, float* %122, align 4
  %123 = load %shape*, %shape** %s2, align 8
  %124 = bitcast %shape* %123 to %rectangle*
  %125 = getelementptr %rectangle, %rectangle* %124, i32 0, i32 2
  %126 = load float, float* %125, align 4
  %127 = alloca float, align 4
  store float %126, float* %127, align 4
  %128 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @serialization_info.9, i32 0, i32 0), i64* %117, i32 0, i32 0, float* %122, float* %127)
  %129 = load i64, i64* %117, align 4
  %stringFormat_desc30 = alloca %string_descriptor, align 8
  %130 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc30, i32 0, i32 0
  store i8* %128, i8** %130, align 8
  %131 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc30, i32 0, i32 1
  store i64 %129, i64* %131, align 4
  %132 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc30, i32 0, i32 0
  %133 = load i8*, i8** %132, align 8
  %134 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc30, i32 0, i32 1
  %135 = load i64, i64* %134, align 4
  %136 = trunc i64 %135 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @15, i32 0, i32 0), i8* %133, i32 %136, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i32 0, i32 0), i32 1)
  call void @_lfortran_free(i8* %128)
  %137 = load %shape*, %shape** %s2, align 8
  %138 = bitcast %shape* %137 to %rectangle*
  %139 = getelementptr %rectangle, %rectangle* %138, i32 0, i32 1
  %140 = load float, float* %139, align 4
  %141 = fcmp une float %140, 5.000000e+00
  br i1 %141, label %then31, label %else32

then31:                                           ; preds = %ifcont29
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont33

else32:                                           ; preds = %ifcont29
  br label %ifcont33

ifcont33:                                         ; preds = %else32, %then31
  %142 = load %shape*, %shape** %s2, align 8
  %143 = bitcast %shape* %142 to %rectangle*
  %144 = getelementptr %rectangle, %rectangle* %143, i32 0, i32 2
  %145 = load float, float* %144, align 4
  %146 = fcmp une float %145, 4.000000e+00
  br i1 %146, label %then34, label %else35

then34:                                           ; preds = %ifcont33
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @19, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @18, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont36

else35:                                           ; preds = %ifcont33
  br label %ifcont36

ifcont36:                                         ; preds = %else35, %then34
  br label %"~select_type_block_3.end"

else37:                                           ; preds = %ifcont23
  %147 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.11, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @21, i32 0, i32 0), i8* %147, i32 16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @20, i32 0, i32 0), i32 1)
  br label %ifcont38

ifcont38:                                         ; preds = %else37, %"~select_type_block_3.end", %"~select_type_block_2.end"
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont38
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i64)

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #0

declare i8* @__lfortran_dynamic_cast(i8*, i8*, i1)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare void @_lfortran_free(i8*)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()

attributes #0 = { argmemonly nounwind willreturn writeonly }
