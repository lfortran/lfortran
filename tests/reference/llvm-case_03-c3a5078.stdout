; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data = private constant [6 x i8] c"Pass!\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([6 x i8], [6 x i8]* @string_const_data, i32 0, i32 0), i64 5 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.1 = private constant [8 x i8] c"Failed!\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([8 x i8], [8 x i8]* @string_const_data.1, i32 0, i32 0), i64 7 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.3 = private constant [14 x i8] c"Invalid marks\00"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([14 x i8], [14 x i8]* @string_const_data.3, i32 0, i32 0), i64 13 }>
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [13 x i8] c"S-DESC-15,I4\00", align 1
@string_const_data.5 = private constant [16 x i8] c"Your marks are \00"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([16 x i8], [16 x i8]* @string_const_data.5, i32 0, i32 0), i64 15 }>
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.7 = private constant [6 x i8] c"Pass!\00"
@string_const.8 = private global %string_descriptor <{ i8* getelementptr inbounds ([6 x i8], [6 x i8]* @string_const_data.7, i32 0, i32 0), i64 5 }>
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.9 = private constant [8 x i8] c"Failed!\00"
@string_const.10 = private global %string_descriptor <{ i8* getelementptr inbounds ([8 x i8], [8 x i8]* @string_const_data.9, i32 0, i32 0), i64 7 }>
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.11 = private constant [14 x i8] c"Invalid marks\00"
@string_const.12 = private global %string_descriptor <{ i8* getelementptr inbounds ([14 x i8], [14 x i8]* @string_const_data.11, i32 0, i32 0), i64 13 }>
@13 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.13 = private unnamed_addr constant [13 x i8] c"S-DESC-15,I4\00", align 1
@string_const_data.14 = private constant [16 x i8] c"Your marks are \00"
@string_const.15 = private global %string_descriptor <{ i8* getelementptr inbounds ([16 x i8], [16 x i8]* @string_const_data.14, i32 0, i32 0), i64 15 }>
@15 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %a = alloca i32, align 4
  store i32 1, i32* %a, align 4
  %b = alloca i32, align 4
  store i32 2, i32* %b, align 4
  %marks = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %a1 = alloca i32, align 4
  store i32 1, i32* %a1, align 4
  %b2 = alloca i32, align 4
  store i32 2, i32* %b2, align 4
  %marks3 = alloca i32, align 4
  store i32 94, i32* %marks3, align 4
  %2 = load i32, i32* %marks3, align 4
  %3 = icmp sle i32 42, %2
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  %4 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  br label %ifcont6

else:                                             ; preds = %.entry
  %5 = load i32, i32* %marks3, align 4
  %6 = icmp sle i32 %5, 38
  br i1 %6, label %then4, label %else5

then4:                                            ; preds = %else
  %7 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  br label %ifcont

else5:                                            ; preds = %else
  %8 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  br label %ifcont

ifcont:                                           ; preds = %else5, %then4
  br label %ifcont6

ifcont6:                                          ; preds = %ifcont, %then
  %9 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, %string_descriptor* @string_const.6, i32* %marks3)
  %10 = call i64 @_lfortran_str_len(i8* %9)
  %11 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %11 to %string_descriptor*
  %12 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %9, i8** %12, align 8
  %13 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %10, i64* %13, align 4
  %14 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  store i32 -1, i32* %marks3, align 4
  %16 = load i32, i32* %marks3, align 4
  %17 = icmp sle i32 42, %16
  br i1 %17, label %then7, label %else8

then7:                                            ; preds = %ifcont6
  %18 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.8, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0))
  br label %ifcont12

else8:                                            ; preds = %ifcont6
  %19 = load i32, i32* %marks3, align 4
  %20 = icmp sle i32 0, %19
  %21 = load i32, i32* %marks3, align 4
  %22 = icmp sle i32 %21, 38
  %23 = icmp eq i1 %20, false
  %24 = select i1 %23, i1 %20, i1 %22
  br i1 %24, label %then9, label %else10

then9:                                            ; preds = %else8
  %25 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.10, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  br label %ifcont11

else10:                                           ; preds = %else8
  %26 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.12, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @13, i32 0, i32 0), i8* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0))
  br label %ifcont11

ifcont11:                                         ; preds = %else10, %then9
  br label %ifcont12

ifcont12:                                         ; preds = %ifcont11, %then7
  %27 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @serialization_info.13, i32 0, i32 0), i32 0, i32 0, %string_descriptor* @string_const.15, i32* %marks3)
  %28 = call i64 @_lfortran_str_len(i8* %27)
  %29 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc13 = bitcast i8* %29 to %string_descriptor*
  %30 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc13, i32 0, i32 0
  store i8* %27, i8** %30, align 8
  %31 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc13, i32 0, i32 1
  store i64 %28, i64* %31, align 4
  %32 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc13, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @15, i32 0, i32 0), i8* %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i32 0, i32 0))
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont12
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_printf(i8*, ...)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lpython_free_argv()
