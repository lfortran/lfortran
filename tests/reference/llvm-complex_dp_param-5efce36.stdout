; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type <{ float, float }>
%complex_8 = type <{ double, double }>
%string_descriptor = type <{ i8*, i64 }>

@complex_dp_param.u = internal global %complex_4 zeroinitializer
@complex_dp_param.v = internal global %complex_8 zeroinitializer
@complex_dp_param.zero = internal global %complex_8 zeroinitializer
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [24 x i8] c"{R4,R4},{R8,R8},{R8,R8}\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %prec1 = alloca i32, align 4
  store i32 4, i32* %prec1, align 4
  %prec2 = alloca i32, align 4
  store i32 8, i32* %prec2, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %prec11 = alloca i32, align 4
  store i32 4, i32* %prec11, align 4
  %prec22 = alloca i32, align 4
  store i32 8, i32* %prec22, align 4
  %2 = alloca %complex_4, align 8
  %3 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 0
  %4 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 1
  store float 0x3FF0CCCCC0000000, float* %3, align 4
  store float 0x3FF0CCCCC0000000, float* %4, align 4
  %5 = load %complex_4, %complex_4* %2, align 1
  store %complex_4 %5, %complex_4* @complex_dp_param.u, align 1
  %6 = alloca %complex_8, align 8
  %7 = getelementptr %complex_8, %complex_8* %6, i32 0, i32 0
  %8 = getelementptr %complex_8, %complex_8* %6, i32 0, i32 1
  store double 0x3FF0CCCCC0000000, double* %7, align 8
  store double 1.050000e+00, double* %8, align 8
  %9 = load %complex_8, %complex_8* %6, align 1
  store %complex_8 %9, %complex_8* @complex_dp_param.v, align 1
  %10 = alloca %complex_8, align 8
  %11 = getelementptr %complex_8, %complex_8* %10, i32 0, i32 0
  %12 = getelementptr %complex_8, %complex_8* %10, i32 0, i32 1
  store double 0.000000e+00, double* %11, align 8
  store double 0.000000e+00, double* %12, align 8
  %13 = load %complex_8, %complex_8* %10, align 1
  store %complex_8 %13, %complex_8* @complex_dp_param.zero, align 1
  %14 = alloca i64, align 8
  %15 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @serialization_info, i32 0, i32 0), i64* %14, i32 0, i32 0, %complex_4* @complex_dp_param.u, %complex_8* @complex_dp_param.v, %complex_8* @complex_dp_param.zero)
  %16 = load i64, i64* %14, align 4
  %17 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %17 to %string_descriptor*
  %18 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %15, i8** %18, align 8
  %19 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %16, i64* %19, align 4
  %20 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %23 = load i64, i64* %22, align 4
  %24 = trunc i64 %23 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %21, i32 %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lpython_free_argv()
