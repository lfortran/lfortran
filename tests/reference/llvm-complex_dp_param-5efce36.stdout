; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }
%complex_8 = type { double, double }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [32 x i8] c"(%f,%f)%s(%lf,%lf)%s(%lf,%lf)%s\00", align 1

define i32 @main() {
.entry:
  %prec1 = alloca i32, align 4
  store i32 4, i32* %prec1, align 4
  %prec2 = alloca i32, align 4
  store i32 8, i32* %prec2, align 4
  %u = alloca %complex_4, align 8
  %0 = alloca %complex_4, align 8
  %1 = getelementptr %complex_4, %complex_4* %0, i32 0, i32 0
  %2 = getelementptr %complex_4, %complex_4* %0, i32 0, i32 1
  store float 0x3FF0CCCCC0000000, float* %1, align 4
  store float 0x3FF0CCCCC0000000, float* %2, align 4
  %3 = load %complex_4, %complex_4* %0, align 4
  store %complex_4 %3, %complex_4* %u, align 4
  %v = alloca %complex_8, align 8
  %4 = alloca %complex_8, align 8
  %5 = getelementptr %complex_8, %complex_8* %4, i32 0, i32 0
  %6 = getelementptr %complex_8, %complex_8* %4, i32 0, i32 1
  store double 1.050000e+00, double* %5, align 8
  store double 1.050000e+00, double* %6, align 8
  %7 = load %complex_8, %complex_8* %4, align 8
  store %complex_8 %7, %complex_8* %v, align 8
  %zero = alloca %complex_8, align 8
  %8 = alloca %complex_8, align 8
  %9 = getelementptr %complex_8, %complex_8* %8, i32 0, i32 0
  %10 = getelementptr %complex_8, %complex_8* %8, i32 0, i32 1
  store double 0.000000e+00, double* %9, align 8
  store double 0.000000e+00, double* %10, align 8
  %11 = load %complex_8, %complex_8* %8, align 8
  store %complex_8 %11, %complex_8* %zero, align 8
  %12 = load %complex_4, %complex_4* %u, align 4
  %13 = alloca %complex_4, align 8
  store %complex_4 %12, %complex_4* %13, align 4
  %14 = getelementptr %complex_4, %complex_4* %13, i32 0, i32 0
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  %17 = alloca %complex_4, align 8
  store %complex_4 %12, %complex_4* %17, align 4
  %18 = getelementptr %complex_4, %complex_4* %17, i32 0, i32 1
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = load %complex_8, %complex_8* %v, align 8
  %22 = alloca %complex_8, align 8
  store %complex_8 %21, %complex_8* %22, align 8
  %23 = getelementptr %complex_8, %complex_8* %22, i32 0, i32 0
  %24 = load double, double* %23, align 8
  %25 = alloca %complex_8, align 8
  store %complex_8 %21, %complex_8* %25, align 8
  %26 = getelementptr %complex_8, %complex_8* %25, i32 0, i32 1
  %27 = load double, double* %26, align 8
  %28 = load %complex_8, %complex_8* %zero, align 8
  %29 = alloca %complex_8, align 8
  store %complex_8 %28, %complex_8* %29, align 8
  %30 = getelementptr %complex_8, %complex_8* %29, i32 0, i32 0
  %31 = load double, double* %30, align 8
  %32 = alloca %complex_8, align 8
  store %complex_8 %28, %complex_8* %32, align 8
  %33 = getelementptr %complex_8, %complex_8* %32, i32 0, i32 1
  %34 = load double, double* %33, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @2, i32 0, i32 0), double %16, double %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), double %24, double %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), double %31, double %34, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
