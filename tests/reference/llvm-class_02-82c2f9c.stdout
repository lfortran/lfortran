; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>
%circle = type <{ i32 (...)**, float }>

@_Name_circle = private unnamed_addr constant [7 x i8] c"circle\00", align 1
@_Type_Info_circle = linkonce_odr unnamed_addr constant { i8* } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @_Name_circle, i32 0, i32 0) }, align 8
@_VTable_circle = linkonce_odr unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8* }* @_Type_Info_circle to i8*), i8* bitcast (void (i8*, i8*)* @_copy_class_circle2_circle to i8*), i8* bitcast (float (%circle*)* @__module_class_circle2_circle_area to i8*), i8* bitcast (void (%circle*)* @__module_class_circle2_circle_print to i8*)] }, align 8
@__module_class_circle2_pi = global float 0x400921FB60000000
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [25 x i8] c"S-DESC-12,R4,S-DESC-8,R4\00", align 1
@string_const_data = private constant [12 x i8] c"Circle: r = "
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([12 x i8], [12 x i8]* @string_const_data, i32 0, i32 0), i64 12 }>
@string_const_data.1 = private constant [8 x i8] c" area = "
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([8 x i8], [8 x i8]* @string_const_data.1, i32 0, i32 0), i64 8 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define float @__module_class_circle2_circle_area(%circle* %this) {
.entry:
  %circle_area = alloca float, align 4
  %0 = load float, float* @__module_class_circle2_pi, align 4
  %1 = getelementptr %circle, %circle* %this, i32 0, i32 1
  %2 = load float, float* %1, align 4
  %simplified_pow_operation = fmul float %2, %2
  %3 = fmul float %0, %simplified_pow_operation
  store float %3, float* %circle_area, align 4
  br label %return

return:                                           ; preds = %.entry
  %4 = load float, float* %circle_area, align 4
  ret float %4
}

define void @__module_class_circle2_circle_print(%circle* %this) {
.entry:
  %area = alloca float, align 4
  %0 = bitcast %circle* %this to float (%circle*)***
  %1 = load float (%circle*)**, float (%circle*)*** %0, align 8
  %2 = getelementptr inbounds float (%circle*)*, float (%circle*)** %1, i32 1
  %3 = load float (%circle*)*, float (%circle*)** %2, align 8
  %4 = call float %3(%circle* %this)
  store float %4, float* %area, align 4
  %5 = alloca i64, align 8
  %6 = getelementptr %circle, %circle* %this, i32 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = alloca float, align 4
  store float %7, float* %8, align 4
  %9 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @serialization_info, i32 0, i32 0), i64* %5, i32 0, i32 0, %string_descriptor* @string_const, float* %8, %string_descriptor* @string_const.2, float* %area)
  %10 = load i64, i64* %5, align 4
  %stringFormat_desc = alloca %string_descriptor, align 8
  %11 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %9, i8** %11, align 8
  %12 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %10, i64* %12, align 4
  %13 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %16 = load i64, i64* %15, align 4
  %17 = trunc i64 %16 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %14, i32 %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  call void @_lfortran_free(i8* %9)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @__module_class_circle2__xx_lcompilers_changed_main_xx() {
.entry:
  %c = alloca %circle, align 8
  %0 = bitcast %circle* %c to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_VTable_circle, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %0, align 8
  %1 = getelementptr %circle, %circle* %c, i32 0, i32 1
  %2 = getelementptr %circle, %circle* %c, i32 0, i32 1
  store float 1.000000e+00, float* %2, align 4
  %3 = getelementptr %circle, %circle* %c, i32 0, i32 1
  store float 1.500000e+00, float* %3, align 4
  call void @__module_class_circle2_circle_print(%circle* %c)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define linkonce_odr void @_copy_class_circle2_circle(i8* %0, i8* %1) {
entry:
  %2 = bitcast i8* %0 to %circle*
  %3 = bitcast i8* %1 to %circle*
  %4 = bitcast %circle* %3 to i32 (...)***
  %5 = load i32 (...)**, i32 (...)*** %4, align 8
  %6 = bitcast %circle* %2 to i32 (...)***
  store i32 (...)** %5, i32 (...)*** %6, align 8
  %7 = getelementptr %circle, %circle* %2, i32 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = getelementptr %circle, %circle* %3, i32 0, i32 1
  br i1 true, label %then, label %else

then:                                             ; preds = %entry
  store float %8, float* %9, align 4
  br label %ifcont

else:                                             ; preds = %entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %10 = bitcast %circle* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_VTable_circle, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %10, align 8
  ret void
}

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lfortran_free(i8*)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  call void @__module_class_circle2__xx_lcompilers_changed_main_xx()
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lpython_free_argv()
