; ModuleID = 'LFortran'
source_filename = "LFortran"

%circle = type { float }

@pi = global float 0x400921FB60000000
@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [13 x i8] c"Circle: r = \00", align 1
@3 = private unnamed_addr constant [9 x i8] c" area = \00", align 1
@4 = private unnamed_addr constant [25 x i8] c"%s%s%13.8e%s%s%s%13.8e%s\00", align 1

define float @__module_class_circle2_circle_area(%circle* %this) {
.entry:
  %circle_area = alloca float, align 4
  %0 = load float, float* @pi, align 4
  %1 = getelementptr %circle, %circle* %this, i32 0, i32 0
  %2 = load float, float* %1, align 4
  %3 = call float @llvm.pow.f32(float %2, float 2.000000e+00)
  %4 = fmul float %0, %3
  store float %4, float* %circle_area, align 4
  br label %return

return:                                           ; preds = %.entry
  %5 = load float, float* %circle_area, align 4
  ret float %5
}

define void @__module_class_circle2_circle_print(%circle* %this) {
.entry:
  %area = alloca float, align 4
  %0 = call float @__module_class_circle2_circle_area(%circle* %this)
  store float %0, float* %area, align 4
  %1 = getelementptr %circle, %circle* %this, i32 0, i32 0
  %2 = load float, float* %1, align 4
  %3 = fpext float %2 to double
  %4 = load float, float* %area, align 4
  %5 = fpext float %4 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @4, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), double %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), double %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @__module_class_circle2__xx_lcompilers_changed_main_xx() {
.entry:
  %c = alloca %circle, align 8
  %0 = getelementptr %circle, %circle* %c, i32 0, i32 0
  %1 = getelementptr %circle, %circle* %c, i32 0, i32 0
  store float 1.000000e+00, float* %1, align 4
  %2 = getelementptr %circle, %circle* %c, i32 0, i32 0
  store float 1.500000e+00, float* %2, align 4
  call void @__module_class_circle2_circle_print(%circle* %c)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.pow.f32(float, float) #0

declare void @_lfortran_printf(i8*, ...)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  call void @__module_class_circle2__xx_lcompilers_changed_main_xx()
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

attributes #0 = { nounwind readnone speculatable willreturn }
