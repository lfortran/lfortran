; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }

@0 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@9 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@12 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@15 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@17 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@18 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@19 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@20 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@21 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@22 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@23 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@24 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@25 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@26 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@27 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@28 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@29 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@30 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@31 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@32 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@33 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@34 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@35 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@36 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@37 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@38 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@39 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@40 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@41 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@42 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@43 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@44 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@45 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@46 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@47 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %a = alloca [3 x %complex_4], align 8
  %b = alloca [4 x %complex_4], align 8
  %c = alloca [4 x %complex_4], align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 1, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %2 = load i32, i32* %i, align 4
  %3 = icmp sle i32 %2, 3
  br i1 %3, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %4 = load i32, i32* %i, align 4
  %5 = sub i32 %4, 1
  %6 = mul i32 1, %5
  %7 = add i32 0, %6
  %8 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 %7
  %9 = load i32, i32* %i, align 4
  %10 = add i32 %9, 10
  %11 = sitofp i32 %10 to float
  %12 = alloca %complex_4, align 8
  %13 = getelementptr %complex_4, %complex_4* %12, i32 0, i32 0
  %14 = getelementptr %complex_4, %complex_4* %12, i32 0, i32 1
  store float %11, float* %13, align 4
  store float 0.000000e+00, float* %14, align 4
  %15 = load %complex_4, %complex_4* %12, align 4
  store %complex_4 %15, %complex_4* %8, align 4
  %16 = load i32, i32* %i, align 4
  %17 = add i32 %16, 1
  store i32 %17, i32* %i, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %18 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 0
  %19 = load %complex_4, %complex_4* %18, align 4
  %20 = alloca %complex_4, align 8
  %21 = getelementptr %complex_4, %complex_4* %20, i32 0, i32 0
  %22 = getelementptr %complex_4, %complex_4* %20, i32 0, i32 1
  store float 1.100000e+01, float* %21, align 4
  store float 0.000000e+00, float* %22, align 4
  %23 = load %complex_4, %complex_4* %20, align 4
  %24 = alloca %complex_4, align 8
  store %complex_4 %19, %complex_4* %24, align 4
  %25 = getelementptr %complex_4, %complex_4* %24, i32 0, i32 0
  %26 = load float, float* %25, align 4
  %27 = alloca %complex_4, align 8
  store %complex_4 %23, %complex_4* %27, align 4
  %28 = getelementptr %complex_4, %complex_4* %27, i32 0, i32 0
  %29 = load float, float* %28, align 4
  %30 = alloca %complex_4, align 8
  store %complex_4 %19, %complex_4* %30, align 4
  %31 = getelementptr %complex_4, %complex_4* %30, i32 0, i32 1
  %32 = load float, float* %31, align 4
  %33 = alloca %complex_4, align 8
  store %complex_4 %23, %complex_4* %33, align 4
  %34 = getelementptr %complex_4, %complex_4* %33, i32 0, i32 1
  %35 = load float, float* %34, align 4
  %36 = fcmp one float %26, %29
  %37 = fcmp one float %32, %35
  %38 = or i1 %36, %37
  br i1 %38, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %39 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 1
  %40 = load %complex_4, %complex_4* %39, align 4
  %41 = alloca %complex_4, align 8
  %42 = getelementptr %complex_4, %complex_4* %41, i32 0, i32 0
  %43 = getelementptr %complex_4, %complex_4* %41, i32 0, i32 1
  store float 1.200000e+01, float* %42, align 4
  store float 0.000000e+00, float* %43, align 4
  %44 = load %complex_4, %complex_4* %41, align 4
  %45 = alloca %complex_4, align 8
  store %complex_4 %40, %complex_4* %45, align 4
  %46 = getelementptr %complex_4, %complex_4* %45, i32 0, i32 0
  %47 = load float, float* %46, align 4
  %48 = alloca %complex_4, align 8
  store %complex_4 %44, %complex_4* %48, align 4
  %49 = getelementptr %complex_4, %complex_4* %48, i32 0, i32 0
  %50 = load float, float* %49, align 4
  %51 = alloca %complex_4, align 8
  store %complex_4 %40, %complex_4* %51, align 4
  %52 = getelementptr %complex_4, %complex_4* %51, i32 0, i32 1
  %53 = load float, float* %52, align 4
  %54 = alloca %complex_4, align 8
  store %complex_4 %44, %complex_4* %54, align 4
  %55 = getelementptr %complex_4, %complex_4* %54, i32 0, i32 1
  %56 = load float, float* %55, align 4
  %57 = fcmp one float %47, %50
  %58 = fcmp one float %53, %56
  %59 = or i1 %57, %58
  br i1 %59, label %then1, label %else2

then1:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %60 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 2
  %61 = load %complex_4, %complex_4* %60, align 4
  %62 = alloca %complex_4, align 8
  %63 = getelementptr %complex_4, %complex_4* %62, i32 0, i32 0
  %64 = getelementptr %complex_4, %complex_4* %62, i32 0, i32 1
  store float 1.300000e+01, float* %63, align 4
  store float 0.000000e+00, float* %64, align 4
  %65 = load %complex_4, %complex_4* %62, align 4
  %66 = alloca %complex_4, align 8
  store %complex_4 %61, %complex_4* %66, align 4
  %67 = getelementptr %complex_4, %complex_4* %66, i32 0, i32 0
  %68 = load float, float* %67, align 4
  %69 = alloca %complex_4, align 8
  store %complex_4 %65, %complex_4* %69, align 4
  %70 = getelementptr %complex_4, %complex_4* %69, i32 0, i32 0
  %71 = load float, float* %70, align 4
  %72 = alloca %complex_4, align 8
  store %complex_4 %61, %complex_4* %72, align 4
  %73 = getelementptr %complex_4, %complex_4* %72, i32 0, i32 1
  %74 = load float, float* %73, align 4
  %75 = alloca %complex_4, align 8
  store %complex_4 %65, %complex_4* %75, align 4
  %76 = getelementptr %complex_4, %complex_4* %75, i32 0, i32 1
  %77 = load float, float* %76, align 4
  %78 = fcmp one float %68, %71
  %79 = fcmp one float %74, %77
  %80 = or i1 %78, %79
  br i1 %80, label %then4, label %else5

then4:                                            ; preds = %ifcont3
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont6

else5:                                            ; preds = %ifcont3
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  store i32 11, i32* %i, align 4
  br label %loop.head7

loop.head7:                                       ; preds = %loop.body8, %ifcont6
  %81 = load i32, i32* %i, align 4
  %82 = icmp sle i32 %81, 14
  br i1 %82, label %loop.body8, label %loop.end9

loop.body8:                                       ; preds = %loop.head7
  %83 = load i32, i32* %i, align 4
  %84 = sub i32 %83, 10
  %85 = sub i32 %84, 1
  %86 = mul i32 1, %85
  %87 = add i32 0, %86
  %88 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 %87
  %89 = load i32, i32* %i, align 4
  %90 = sitofp i32 %89 to float
  %91 = alloca %complex_4, align 8
  %92 = getelementptr %complex_4, %complex_4* %91, i32 0, i32 0
  %93 = getelementptr %complex_4, %complex_4* %91, i32 0, i32 1
  store float %90, float* %92, align 4
  store float 0.000000e+00, float* %93, align 4
  %94 = load %complex_4, %complex_4* %91, align 4
  store %complex_4 %94, %complex_4* %88, align 4
  %95 = load i32, i32* %i, align 4
  %96 = add i32 %95, 1
  store i32 %96, i32* %i, align 4
  br label %loop.head7

loop.end9:                                        ; preds = %loop.head7
  %97 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 0
  %98 = load %complex_4, %complex_4* %97, align 4
  %99 = alloca %complex_4, align 8
  %100 = getelementptr %complex_4, %complex_4* %99, i32 0, i32 0
  %101 = getelementptr %complex_4, %complex_4* %99, i32 0, i32 1
  store float 1.100000e+01, float* %100, align 4
  store float 0.000000e+00, float* %101, align 4
  %102 = load %complex_4, %complex_4* %99, align 4
  %103 = alloca %complex_4, align 8
  store %complex_4 %98, %complex_4* %103, align 4
  %104 = getelementptr %complex_4, %complex_4* %103, i32 0, i32 0
  %105 = load float, float* %104, align 4
  %106 = alloca %complex_4, align 8
  store %complex_4 %102, %complex_4* %106, align 4
  %107 = getelementptr %complex_4, %complex_4* %106, i32 0, i32 0
  %108 = load float, float* %107, align 4
  %109 = alloca %complex_4, align 8
  store %complex_4 %98, %complex_4* %109, align 4
  %110 = getelementptr %complex_4, %complex_4* %109, i32 0, i32 1
  %111 = load float, float* %110, align 4
  %112 = alloca %complex_4, align 8
  store %complex_4 %102, %complex_4* %112, align 4
  %113 = getelementptr %complex_4, %complex_4* %112, i32 0, i32 1
  %114 = load float, float* %113, align 4
  %115 = fcmp one float %105, %108
  %116 = fcmp one float %111, %114
  %117 = or i1 %115, %116
  br i1 %117, label %then10, label %else11

then10:                                           ; preds = %loop.end9
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont12

else11:                                           ; preds = %loop.end9
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  %118 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 1
  %119 = load %complex_4, %complex_4* %118, align 4
  %120 = alloca %complex_4, align 8
  %121 = getelementptr %complex_4, %complex_4* %120, i32 0, i32 0
  %122 = getelementptr %complex_4, %complex_4* %120, i32 0, i32 1
  store float 1.200000e+01, float* %121, align 4
  store float 0.000000e+00, float* %122, align 4
  %123 = load %complex_4, %complex_4* %120, align 4
  %124 = alloca %complex_4, align 8
  store %complex_4 %119, %complex_4* %124, align 4
  %125 = getelementptr %complex_4, %complex_4* %124, i32 0, i32 0
  %126 = load float, float* %125, align 4
  %127 = alloca %complex_4, align 8
  store %complex_4 %123, %complex_4* %127, align 4
  %128 = getelementptr %complex_4, %complex_4* %127, i32 0, i32 0
  %129 = load float, float* %128, align 4
  %130 = alloca %complex_4, align 8
  store %complex_4 %119, %complex_4* %130, align 4
  %131 = getelementptr %complex_4, %complex_4* %130, i32 0, i32 1
  %132 = load float, float* %131, align 4
  %133 = alloca %complex_4, align 8
  store %complex_4 %123, %complex_4* %133, align 4
  %134 = getelementptr %complex_4, %complex_4* %133, i32 0, i32 1
  %135 = load float, float* %134, align 4
  %136 = fcmp one float %126, %129
  %137 = fcmp one float %132, %135
  %138 = or i1 %136, %137
  br i1 %138, label %then13, label %else14

then13:                                           ; preds = %ifcont12
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @14, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont15

else14:                                           ; preds = %ifcont12
  br label %ifcont15

ifcont15:                                         ; preds = %else14, %then13
  %139 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 2
  %140 = load %complex_4, %complex_4* %139, align 4
  %141 = alloca %complex_4, align 8
  %142 = getelementptr %complex_4, %complex_4* %141, i32 0, i32 0
  %143 = getelementptr %complex_4, %complex_4* %141, i32 0, i32 1
  store float 1.300000e+01, float* %142, align 4
  store float 0.000000e+00, float* %143, align 4
  %144 = load %complex_4, %complex_4* %141, align 4
  %145 = alloca %complex_4, align 8
  store %complex_4 %140, %complex_4* %145, align 4
  %146 = getelementptr %complex_4, %complex_4* %145, i32 0, i32 0
  %147 = load float, float* %146, align 4
  %148 = alloca %complex_4, align 8
  store %complex_4 %144, %complex_4* %148, align 4
  %149 = getelementptr %complex_4, %complex_4* %148, i32 0, i32 0
  %150 = load float, float* %149, align 4
  %151 = alloca %complex_4, align 8
  store %complex_4 %140, %complex_4* %151, align 4
  %152 = getelementptr %complex_4, %complex_4* %151, i32 0, i32 1
  %153 = load float, float* %152, align 4
  %154 = alloca %complex_4, align 8
  store %complex_4 %144, %complex_4* %154, align 4
  %155 = getelementptr %complex_4, %complex_4* %154, i32 0, i32 1
  %156 = load float, float* %155, align 4
  %157 = fcmp one float %147, %150
  %158 = fcmp one float %153, %156
  %159 = or i1 %157, %158
  br i1 %159, label %then16, label %else17

then16:                                           ; preds = %ifcont15
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont18

else17:                                           ; preds = %ifcont15
  br label %ifcont18

ifcont18:                                         ; preds = %else17, %then16
  %160 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 3
  %161 = load %complex_4, %complex_4* %160, align 4
  %162 = alloca %complex_4, align 8
  %163 = getelementptr %complex_4, %complex_4* %162, i32 0, i32 0
  %164 = getelementptr %complex_4, %complex_4* %162, i32 0, i32 1
  store float 1.400000e+01, float* %163, align 4
  store float 0.000000e+00, float* %164, align 4
  %165 = load %complex_4, %complex_4* %162, align 4
  %166 = alloca %complex_4, align 8
  store %complex_4 %161, %complex_4* %166, align 4
  %167 = getelementptr %complex_4, %complex_4* %166, i32 0, i32 0
  %168 = load float, float* %167, align 4
  %169 = alloca %complex_4, align 8
  store %complex_4 %165, %complex_4* %169, align 4
  %170 = getelementptr %complex_4, %complex_4* %169, i32 0, i32 0
  %171 = load float, float* %170, align 4
  %172 = alloca %complex_4, align 8
  store %complex_4 %161, %complex_4* %172, align 4
  %173 = getelementptr %complex_4, %complex_4* %172, i32 0, i32 1
  %174 = load float, float* %173, align 4
  %175 = alloca %complex_4, align 8
  store %complex_4 %165, %complex_4* %175, align 4
  %176 = getelementptr %complex_4, %complex_4* %175, i32 0, i32 1
  %177 = load float, float* %176, align 4
  %178 = fcmp one float %168, %171
  %179 = fcmp one float %174, %177
  %180 = or i1 %178, %179
  br i1 %180, label %then19, label %else20

then19:                                           ; preds = %ifcont18
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @20, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @18, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont21

else20:                                           ; preds = %ifcont18
  br label %ifcont21

ifcont21:                                         ; preds = %else20, %then19
  store i32 1, i32* %i, align 4
  br label %loop.head22

loop.head22:                                      ; preds = %loop.body23, %ifcont21
  %181 = load i32, i32* %i, align 4
  %182 = icmp sle i32 %181, 3
  br i1 %182, label %loop.body23, label %loop.end24

loop.body23:                                      ; preds = %loop.head22
  %183 = load i32, i32* %i, align 4
  %184 = sub i32 %183, 1
  %185 = mul i32 1, %184
  %186 = add i32 0, %185
  %187 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 %186
  %188 = load i32, i32* %i, align 4
  %189 = sub i32 %188, 1
  %190 = mul i32 1, %189
  %191 = add i32 0, %190
  %192 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 %191
  %193 = load %complex_4, %complex_4* %192, align 4
  %194 = alloca %complex_4, align 8
  %195 = getelementptr %complex_4, %complex_4* %194, i32 0, i32 0
  %196 = getelementptr %complex_4, %complex_4* %194, i32 0, i32 1
  store float 1.000000e+01, float* %195, align 4
  store float 0.000000e+00, float* %196, align 4
  %197 = load %complex_4, %complex_4* %194, align 4
  %198 = alloca %complex_4, align 8
  store %complex_4 %193, %complex_4* %198, align 4
  %199 = alloca %complex_4, align 8
  store %complex_4 %197, %complex_4* %199, align 4
  %200 = alloca %complex_4, align 8
  call void @_lfortran_complex_sub_32(%complex_4* %198, %complex_4* %199, %complex_4* %200)
  %201 = load %complex_4, %complex_4* %200, align 4
  store %complex_4 %201, %complex_4* %187, align 4
  %202 = load i32, i32* %i, align 4
  %203 = add i32 %202, 1
  store i32 %203, i32* %i, align 4
  br label %loop.head22

loop.end24:                                       ; preds = %loop.head22
  %204 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 0
  %205 = load %complex_4, %complex_4* %204, align 4
  %206 = alloca %complex_4, align 8
  %207 = getelementptr %complex_4, %complex_4* %206, i32 0, i32 0
  %208 = getelementptr %complex_4, %complex_4* %206, i32 0, i32 1
  store float 1.000000e+00, float* %207, align 4
  store float 0.000000e+00, float* %208, align 4
  %209 = load %complex_4, %complex_4* %206, align 4
  %210 = alloca %complex_4, align 8
  store %complex_4 %205, %complex_4* %210, align 4
  %211 = getelementptr %complex_4, %complex_4* %210, i32 0, i32 0
  %212 = load float, float* %211, align 4
  %213 = alloca %complex_4, align 8
  store %complex_4 %209, %complex_4* %213, align 4
  %214 = getelementptr %complex_4, %complex_4* %213, i32 0, i32 0
  %215 = load float, float* %214, align 4
  %216 = alloca %complex_4, align 8
  store %complex_4 %205, %complex_4* %216, align 4
  %217 = getelementptr %complex_4, %complex_4* %216, i32 0, i32 1
  %218 = load float, float* %217, align 4
  %219 = alloca %complex_4, align 8
  store %complex_4 %209, %complex_4* %219, align 4
  %220 = getelementptr %complex_4, %complex_4* %219, i32 0, i32 1
  %221 = load float, float* %220, align 4
  %222 = fcmp one float %212, %215
  %223 = fcmp one float %218, %221
  %224 = or i1 %222, %223
  br i1 %224, label %then25, label %else26

then25:                                           ; preds = %loop.end24
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @23, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @21, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @22, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont27

else26:                                           ; preds = %loop.end24
  br label %ifcont27

ifcont27:                                         ; preds = %else26, %then25
  %225 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 1
  %226 = load %complex_4, %complex_4* %225, align 4
  %227 = alloca %complex_4, align 8
  %228 = getelementptr %complex_4, %complex_4* %227, i32 0, i32 0
  %229 = getelementptr %complex_4, %complex_4* %227, i32 0, i32 1
  store float 2.000000e+00, float* %228, align 4
  store float 0.000000e+00, float* %229, align 4
  %230 = load %complex_4, %complex_4* %227, align 4
  %231 = alloca %complex_4, align 8
  store %complex_4 %226, %complex_4* %231, align 4
  %232 = getelementptr %complex_4, %complex_4* %231, i32 0, i32 0
  %233 = load float, float* %232, align 4
  %234 = alloca %complex_4, align 8
  store %complex_4 %230, %complex_4* %234, align 4
  %235 = getelementptr %complex_4, %complex_4* %234, i32 0, i32 0
  %236 = load float, float* %235, align 4
  %237 = alloca %complex_4, align 8
  store %complex_4 %226, %complex_4* %237, align 4
  %238 = getelementptr %complex_4, %complex_4* %237, i32 0, i32 1
  %239 = load float, float* %238, align 4
  %240 = alloca %complex_4, align 8
  store %complex_4 %230, %complex_4* %240, align 4
  %241 = getelementptr %complex_4, %complex_4* %240, i32 0, i32 1
  %242 = load float, float* %241, align 4
  %243 = fcmp one float %233, %236
  %244 = fcmp one float %239, %242
  %245 = or i1 %243, %244
  br i1 %245, label %then28, label %else29

then28:                                           ; preds = %ifcont27
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @26, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @24, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @25, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont30

else29:                                           ; preds = %ifcont27
  br label %ifcont30

ifcont30:                                         ; preds = %else29, %then28
  %246 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 2
  %247 = load %complex_4, %complex_4* %246, align 4
  %248 = alloca %complex_4, align 8
  %249 = getelementptr %complex_4, %complex_4* %248, i32 0, i32 0
  %250 = getelementptr %complex_4, %complex_4* %248, i32 0, i32 1
  store float 3.000000e+00, float* %249, align 4
  store float 0.000000e+00, float* %250, align 4
  %251 = load %complex_4, %complex_4* %248, align 4
  %252 = alloca %complex_4, align 8
  store %complex_4 %247, %complex_4* %252, align 4
  %253 = getelementptr %complex_4, %complex_4* %252, i32 0, i32 0
  %254 = load float, float* %253, align 4
  %255 = alloca %complex_4, align 8
  store %complex_4 %251, %complex_4* %255, align 4
  %256 = getelementptr %complex_4, %complex_4* %255, i32 0, i32 0
  %257 = load float, float* %256, align 4
  %258 = alloca %complex_4, align 8
  store %complex_4 %247, %complex_4* %258, align 4
  %259 = getelementptr %complex_4, %complex_4* %258, i32 0, i32 1
  %260 = load float, float* %259, align 4
  %261 = alloca %complex_4, align 8
  store %complex_4 %251, %complex_4* %261, align 4
  %262 = getelementptr %complex_4, %complex_4* %261, i32 0, i32 1
  %263 = load float, float* %262, align 4
  %264 = fcmp one float %254, %257
  %265 = fcmp one float %260, %263
  %266 = or i1 %264, %265
  br i1 %266, label %then31, label %else32

then31:                                           ; preds = %ifcont30
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @29, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @27, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @28, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont33

else32:                                           ; preds = %ifcont30
  br label %ifcont33

ifcont33:                                         ; preds = %else32, %then31
  %267 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 3
  %268 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 0
  %269 = load %complex_4, %complex_4* %268, align 4
  %270 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 1
  %271 = load %complex_4, %complex_4* %270, align 4
  %272 = alloca %complex_4, align 8
  store %complex_4 %269, %complex_4* %272, align 4
  %273 = alloca %complex_4, align 8
  store %complex_4 %271, %complex_4* %273, align 4
  %274 = alloca %complex_4, align 8
  call void @_lfortran_complex_add_32(%complex_4* %272, %complex_4* %273, %complex_4* %274)
  %275 = load %complex_4, %complex_4* %274, align 4
  %276 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 2
  %277 = load %complex_4, %complex_4* %276, align 4
  %278 = alloca %complex_4, align 8
  store %complex_4 %275, %complex_4* %278, align 4
  %279 = alloca %complex_4, align 8
  store %complex_4 %277, %complex_4* %279, align 4
  %280 = alloca %complex_4, align 8
  call void @_lfortran_complex_add_32(%complex_4* %278, %complex_4* %279, %complex_4* %280)
  %281 = load %complex_4, %complex_4* %280, align 4
  %282 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 0
  %283 = load %complex_4, %complex_4* %282, align 4
  %284 = alloca %complex_4, align 8
  store %complex_4 %281, %complex_4* %284, align 4
  %285 = alloca %complex_4, align 8
  store %complex_4 %283, %complex_4* %285, align 4
  %286 = alloca %complex_4, align 8
  call void @_lfortran_complex_add_32(%complex_4* %284, %complex_4* %285, %complex_4* %286)
  %287 = load %complex_4, %complex_4* %286, align 4
  store %complex_4 %287, %complex_4* %267, align 4
  %288 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 3
  %289 = load %complex_4, %complex_4* %288, align 4
  %290 = alloca %complex_4, align 8
  %291 = getelementptr %complex_4, %complex_4* %290, i32 0, i32 0
  %292 = getelementptr %complex_4, %complex_4* %290, i32 0, i32 1
  store float 1.700000e+01, float* %291, align 4
  store float 0.000000e+00, float* %292, align 4
  %293 = load %complex_4, %complex_4* %290, align 4
  %294 = alloca %complex_4, align 8
  store %complex_4 %289, %complex_4* %294, align 4
  %295 = getelementptr %complex_4, %complex_4* %294, i32 0, i32 0
  %296 = load float, float* %295, align 4
  %297 = alloca %complex_4, align 8
  store %complex_4 %293, %complex_4* %297, align 4
  %298 = getelementptr %complex_4, %complex_4* %297, i32 0, i32 0
  %299 = load float, float* %298, align 4
  %300 = alloca %complex_4, align 8
  store %complex_4 %289, %complex_4* %300, align 4
  %301 = getelementptr %complex_4, %complex_4* %300, i32 0, i32 1
  %302 = load float, float* %301, align 4
  %303 = alloca %complex_4, align 8
  store %complex_4 %293, %complex_4* %303, align 4
  %304 = getelementptr %complex_4, %complex_4* %303, i32 0, i32 1
  %305 = load float, float* %304, align 4
  %306 = fcmp one float %296, %299
  %307 = fcmp one float %302, %305
  %308 = or i1 %306, %307
  br i1 %308, label %then34, label %else35

then34:                                           ; preds = %ifcont33
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @32, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @30, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @31, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont36

else35:                                           ; preds = %ifcont33
  br label %ifcont36

ifcont36:                                         ; preds = %else35, %then34
  %309 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 3
  %310 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 0
  %311 = load %complex_4, %complex_4* %310, align 4
  store %complex_4 %311, %complex_4* %309, align 4
  %312 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 3
  %313 = load %complex_4, %complex_4* %312, align 4
  %314 = alloca %complex_4, align 8
  %315 = getelementptr %complex_4, %complex_4* %314, i32 0, i32 0
  %316 = getelementptr %complex_4, %complex_4* %314, i32 0, i32 1
  store float 1.100000e+01, float* %315, align 4
  store float 0.000000e+00, float* %316, align 4
  %317 = load %complex_4, %complex_4* %314, align 4
  %318 = alloca %complex_4, align 8
  store %complex_4 %313, %complex_4* %318, align 4
  %319 = getelementptr %complex_4, %complex_4* %318, i32 0, i32 0
  %320 = load float, float* %319, align 4
  %321 = alloca %complex_4, align 8
  store %complex_4 %317, %complex_4* %321, align 4
  %322 = getelementptr %complex_4, %complex_4* %321, i32 0, i32 0
  %323 = load float, float* %322, align 4
  %324 = alloca %complex_4, align 8
  store %complex_4 %313, %complex_4* %324, align 4
  %325 = getelementptr %complex_4, %complex_4* %324, i32 0, i32 1
  %326 = load float, float* %325, align 4
  %327 = alloca %complex_4, align 8
  store %complex_4 %317, %complex_4* %327, align 4
  %328 = getelementptr %complex_4, %complex_4* %327, i32 0, i32 1
  %329 = load float, float* %328, align 4
  %330 = fcmp one float %320, %323
  %331 = fcmp one float %326, %329
  %332 = or i1 %330, %331
  br i1 %332, label %then37, label %else38

then37:                                           ; preds = %ifcont36
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @35, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @34, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont39

else38:                                           ; preds = %ifcont36
  br label %ifcont39

ifcont39:                                         ; preds = %else38, %then37
  store i32 1, i32* %i, align 4
  br label %loop.head40

loop.head40:                                      ; preds = %loop.end44, %ifcont39
  %333 = load i32, i32* %i, align 4
  %334 = icmp sle i32 %333, 2
  br i1 %334, label %loop.body41, label %loop.end45

loop.body41:                                      ; preds = %loop.head40
  store i32 1, i32* %j, align 4
  br label %loop.head42

loop.head42:                                      ; preds = %loop.body43, %loop.body41
  %335 = load i32, i32* %j, align 4
  %336 = icmp sle i32 %335, 2
  br i1 %336, label %loop.body43, label %loop.end44

loop.body43:                                      ; preds = %loop.head42
  %337 = load i32, i32* %i, align 4
  %338 = load i32, i32* %j, align 4
  %339 = sub i32 %337, 1
  %340 = mul i32 1, %339
  %341 = add i32 0, %340
  %342 = sub i32 %338, 1
  %343 = mul i32 2, %342
  %344 = add i32 %341, %343
  %345 = getelementptr [4 x %complex_4], [4 x %complex_4]* %c, i32 0, i32 %344
  %346 = load i32, i32* %i, align 4
  %347 = load i32, i32* %j, align 4
  %348 = add i32 %346, %347
  %349 = add i32 %348, 10
  %350 = sitofp i32 %349 to float
  %351 = alloca %complex_4, align 8
  %352 = getelementptr %complex_4, %complex_4* %351, i32 0, i32 0
  %353 = getelementptr %complex_4, %complex_4* %351, i32 0, i32 1
  store float %350, float* %352, align 4
  store float 0.000000e+00, float* %353, align 4
  %354 = load %complex_4, %complex_4* %351, align 4
  store %complex_4 %354, %complex_4* %345, align 4
  %355 = load i32, i32* %j, align 4
  %356 = add i32 %355, 1
  store i32 %356, i32* %j, align 4
  br label %loop.head42

loop.end44:                                       ; preds = %loop.head42
  %357 = load i32, i32* %i, align 4
  %358 = add i32 %357, 1
  store i32 %358, i32* %i, align 4
  br label %loop.head40

loop.end45:                                       ; preds = %loop.head40
  %359 = getelementptr [4 x %complex_4], [4 x %complex_4]* %c, i32 0, i32 0
  %360 = load %complex_4, %complex_4* %359, align 4
  %361 = alloca %complex_4, align 8
  %362 = getelementptr %complex_4, %complex_4* %361, i32 0, i32 0
  %363 = getelementptr %complex_4, %complex_4* %361, i32 0, i32 1
  store float 1.200000e+01, float* %362, align 4
  store float 0.000000e+00, float* %363, align 4
  %364 = load %complex_4, %complex_4* %361, align 4
  %365 = alloca %complex_4, align 8
  store %complex_4 %360, %complex_4* %365, align 4
  %366 = getelementptr %complex_4, %complex_4* %365, i32 0, i32 0
  %367 = load float, float* %366, align 4
  %368 = alloca %complex_4, align 8
  store %complex_4 %364, %complex_4* %368, align 4
  %369 = getelementptr %complex_4, %complex_4* %368, i32 0, i32 0
  %370 = load float, float* %369, align 4
  %371 = alloca %complex_4, align 8
  store %complex_4 %360, %complex_4* %371, align 4
  %372 = getelementptr %complex_4, %complex_4* %371, i32 0, i32 1
  %373 = load float, float* %372, align 4
  %374 = alloca %complex_4, align 8
  store %complex_4 %364, %complex_4* %374, align 4
  %375 = getelementptr %complex_4, %complex_4* %374, i32 0, i32 1
  %376 = load float, float* %375, align 4
  %377 = fcmp one float %367, %370
  %378 = fcmp one float %373, %376
  %379 = or i1 %377, %378
  br i1 %379, label %then46, label %else47

then46:                                           ; preds = %loop.end45
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @38, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @36, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @37, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont48

else47:                                           ; preds = %loop.end45
  br label %ifcont48

ifcont48:                                         ; preds = %else47, %then46
  %380 = getelementptr [4 x %complex_4], [4 x %complex_4]* %c, i32 0, i32 2
  %381 = load %complex_4, %complex_4* %380, align 4
  %382 = alloca %complex_4, align 8
  %383 = getelementptr %complex_4, %complex_4* %382, i32 0, i32 0
  %384 = getelementptr %complex_4, %complex_4* %382, i32 0, i32 1
  store float 1.300000e+01, float* %383, align 4
  store float 0.000000e+00, float* %384, align 4
  %385 = load %complex_4, %complex_4* %382, align 4
  %386 = alloca %complex_4, align 8
  store %complex_4 %381, %complex_4* %386, align 4
  %387 = getelementptr %complex_4, %complex_4* %386, i32 0, i32 0
  %388 = load float, float* %387, align 4
  %389 = alloca %complex_4, align 8
  store %complex_4 %385, %complex_4* %389, align 4
  %390 = getelementptr %complex_4, %complex_4* %389, i32 0, i32 0
  %391 = load float, float* %390, align 4
  %392 = alloca %complex_4, align 8
  store %complex_4 %381, %complex_4* %392, align 4
  %393 = getelementptr %complex_4, %complex_4* %392, i32 0, i32 1
  %394 = load float, float* %393, align 4
  %395 = alloca %complex_4, align 8
  store %complex_4 %385, %complex_4* %395, align 4
  %396 = getelementptr %complex_4, %complex_4* %395, i32 0, i32 1
  %397 = load float, float* %396, align 4
  %398 = fcmp one float %388, %391
  %399 = fcmp one float %394, %397
  %400 = or i1 %398, %399
  br i1 %400, label %then49, label %else50

then49:                                           ; preds = %ifcont48
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @41, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @39, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @40, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont51

else50:                                           ; preds = %ifcont48
  br label %ifcont51

ifcont51:                                         ; preds = %else50, %then49
  %401 = getelementptr [4 x %complex_4], [4 x %complex_4]* %c, i32 0, i32 1
  %402 = load %complex_4, %complex_4* %401, align 4
  %403 = alloca %complex_4, align 8
  %404 = getelementptr %complex_4, %complex_4* %403, i32 0, i32 0
  %405 = getelementptr %complex_4, %complex_4* %403, i32 0, i32 1
  store float 1.300000e+01, float* %404, align 4
  store float 0.000000e+00, float* %405, align 4
  %406 = load %complex_4, %complex_4* %403, align 4
  %407 = alloca %complex_4, align 8
  store %complex_4 %402, %complex_4* %407, align 4
  %408 = getelementptr %complex_4, %complex_4* %407, i32 0, i32 0
  %409 = load float, float* %408, align 4
  %410 = alloca %complex_4, align 8
  store %complex_4 %406, %complex_4* %410, align 4
  %411 = getelementptr %complex_4, %complex_4* %410, i32 0, i32 0
  %412 = load float, float* %411, align 4
  %413 = alloca %complex_4, align 8
  store %complex_4 %402, %complex_4* %413, align 4
  %414 = getelementptr %complex_4, %complex_4* %413, i32 0, i32 1
  %415 = load float, float* %414, align 4
  %416 = alloca %complex_4, align 8
  store %complex_4 %406, %complex_4* %416, align 4
  %417 = getelementptr %complex_4, %complex_4* %416, i32 0, i32 1
  %418 = load float, float* %417, align 4
  %419 = fcmp one float %409, %412
  %420 = fcmp one float %415, %418
  %421 = or i1 %419, %420
  br i1 %421, label %then52, label %else53

then52:                                           ; preds = %ifcont51
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @44, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @42, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @43, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont54

else53:                                           ; preds = %ifcont51
  br label %ifcont54

ifcont54:                                         ; preds = %else53, %then52
  %422 = getelementptr [4 x %complex_4], [4 x %complex_4]* %c, i32 0, i32 3
  %423 = load %complex_4, %complex_4* %422, align 4
  %424 = alloca %complex_4, align 8
  %425 = getelementptr %complex_4, %complex_4* %424, i32 0, i32 0
  %426 = getelementptr %complex_4, %complex_4* %424, i32 0, i32 1
  store float 1.400000e+01, float* %425, align 4
  store float 0.000000e+00, float* %426, align 4
  %427 = load %complex_4, %complex_4* %424, align 4
  %428 = alloca %complex_4, align 8
  store %complex_4 %423, %complex_4* %428, align 4
  %429 = getelementptr %complex_4, %complex_4* %428, i32 0, i32 0
  %430 = load float, float* %429, align 4
  %431 = alloca %complex_4, align 8
  store %complex_4 %427, %complex_4* %431, align 4
  %432 = getelementptr %complex_4, %complex_4* %431, i32 0, i32 0
  %433 = load float, float* %432, align 4
  %434 = alloca %complex_4, align 8
  store %complex_4 %423, %complex_4* %434, align 4
  %435 = getelementptr %complex_4, %complex_4* %434, i32 0, i32 1
  %436 = load float, float* %435, align 4
  %437 = alloca %complex_4, align 8
  store %complex_4 %427, %complex_4* %437, align 4
  %438 = getelementptr %complex_4, %complex_4* %437, i32 0, i32 1
  %439 = load float, float* %438, align 4
  %440 = fcmp one float %430, %433
  %441 = fcmp one float %436, %439
  %442 = or i1 %440, %441
  br i1 %442, label %then55, label %else56

then55:                                           ; preds = %ifcont54
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @47, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @45, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @46, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont57

else56:                                           ; preds = %ifcont54
  br label %ifcont57

ifcont57:                                         ; preds = %else56, %then55
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lfortran_complex_sub_32(%complex_4*, %complex_4*, %complex_4*)

declare void @_lfortran_complex_add_32(%complex_4*, %complex_4*, %complex_4*)
