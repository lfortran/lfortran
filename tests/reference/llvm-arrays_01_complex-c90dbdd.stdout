; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }

@0 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@9 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@12 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@15 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@17 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@18 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@19 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@20 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@21 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@22 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@23 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@24 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@25 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@26 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@27 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@28 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@29 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@30 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@31 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@32 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@33 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@34 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@35 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@36 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@37 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@38 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@39 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@40 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@41 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@42 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@43 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@44 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@45 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@46 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@47 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %a = alloca [3 x %complex_4], align 8
  %b = alloca [4 x %complex_4], align 8
  %c = alloca [4 x %complex_4], align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %2 = load i32, i32* %i, align 4
  %3 = add i32 %2, 1
  %4 = icmp sle i32 %3, 3
  br i1 %4, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %5 = load i32, i32* %i, align 4
  %6 = add i32 %5, 1
  store i32 %6, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %8 = sub i32 %7, 1
  %9 = mul i32 1, %8
  %10 = add i32 0, %9
  %11 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 %10
  %12 = load i32, i32* %i, align 4
  %13 = add i32 %12, 10
  %14 = sitofp i32 %13 to float
  %15 = alloca %complex_4, align 8
  %16 = getelementptr %complex_4, %complex_4* %15, i32 0, i32 0
  %17 = getelementptr %complex_4, %complex_4* %15, i32 0, i32 1
  store float %14, float* %16, align 4
  store float 0.000000e+00, float* %17, align 4
  %18 = load %complex_4, %complex_4* %15, align 4
  store %complex_4 %18, %complex_4* %11, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %19 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 0
  %20 = load %complex_4, %complex_4* %19, align 4
  %21 = alloca %complex_4, align 8
  %22 = getelementptr %complex_4, %complex_4* %21, i32 0, i32 0
  %23 = getelementptr %complex_4, %complex_4* %21, i32 0, i32 1
  store float 1.100000e+01, float* %22, align 4
  store float 0.000000e+00, float* %23, align 4
  %24 = load %complex_4, %complex_4* %21, align 4
  %25 = alloca %complex_4, align 8
  store %complex_4 %20, %complex_4* %25, align 4
  %26 = getelementptr %complex_4, %complex_4* %25, i32 0, i32 0
  %27 = load float, float* %26, align 4
  %28 = alloca %complex_4, align 8
  store %complex_4 %24, %complex_4* %28, align 4
  %29 = getelementptr %complex_4, %complex_4* %28, i32 0, i32 0
  %30 = load float, float* %29, align 4
  %31 = alloca %complex_4, align 8
  store %complex_4 %20, %complex_4* %31, align 4
  %32 = getelementptr %complex_4, %complex_4* %31, i32 0, i32 1
  %33 = load float, float* %32, align 4
  %34 = alloca %complex_4, align 8
  store %complex_4 %24, %complex_4* %34, align 4
  %35 = getelementptr %complex_4, %complex_4* %34, i32 0, i32 1
  %36 = load float, float* %35, align 4
  %37 = fcmp one float %27, %30
  %38 = fcmp one float %33, %36
  %39 = or i1 %37, %38
  br i1 %39, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %40 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 1
  %41 = load %complex_4, %complex_4* %40, align 4
  %42 = alloca %complex_4, align 8
  %43 = getelementptr %complex_4, %complex_4* %42, i32 0, i32 0
  %44 = getelementptr %complex_4, %complex_4* %42, i32 0, i32 1
  store float 1.200000e+01, float* %43, align 4
  store float 0.000000e+00, float* %44, align 4
  %45 = load %complex_4, %complex_4* %42, align 4
  %46 = alloca %complex_4, align 8
  store %complex_4 %41, %complex_4* %46, align 4
  %47 = getelementptr %complex_4, %complex_4* %46, i32 0, i32 0
  %48 = load float, float* %47, align 4
  %49 = alloca %complex_4, align 8
  store %complex_4 %45, %complex_4* %49, align 4
  %50 = getelementptr %complex_4, %complex_4* %49, i32 0, i32 0
  %51 = load float, float* %50, align 4
  %52 = alloca %complex_4, align 8
  store %complex_4 %41, %complex_4* %52, align 4
  %53 = getelementptr %complex_4, %complex_4* %52, i32 0, i32 1
  %54 = load float, float* %53, align 4
  %55 = alloca %complex_4, align 8
  store %complex_4 %45, %complex_4* %55, align 4
  %56 = getelementptr %complex_4, %complex_4* %55, i32 0, i32 1
  %57 = load float, float* %56, align 4
  %58 = fcmp one float %48, %51
  %59 = fcmp one float %54, %57
  %60 = or i1 %58, %59
  br i1 %60, label %then1, label %else2

then1:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %61 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 2
  %62 = load %complex_4, %complex_4* %61, align 4
  %63 = alloca %complex_4, align 8
  %64 = getelementptr %complex_4, %complex_4* %63, i32 0, i32 0
  %65 = getelementptr %complex_4, %complex_4* %63, i32 0, i32 1
  store float 1.300000e+01, float* %64, align 4
  store float 0.000000e+00, float* %65, align 4
  %66 = load %complex_4, %complex_4* %63, align 4
  %67 = alloca %complex_4, align 8
  store %complex_4 %62, %complex_4* %67, align 4
  %68 = getelementptr %complex_4, %complex_4* %67, i32 0, i32 0
  %69 = load float, float* %68, align 4
  %70 = alloca %complex_4, align 8
  store %complex_4 %66, %complex_4* %70, align 4
  %71 = getelementptr %complex_4, %complex_4* %70, i32 0, i32 0
  %72 = load float, float* %71, align 4
  %73 = alloca %complex_4, align 8
  store %complex_4 %62, %complex_4* %73, align 4
  %74 = getelementptr %complex_4, %complex_4* %73, i32 0, i32 1
  %75 = load float, float* %74, align 4
  %76 = alloca %complex_4, align 8
  store %complex_4 %66, %complex_4* %76, align 4
  %77 = getelementptr %complex_4, %complex_4* %76, i32 0, i32 1
  %78 = load float, float* %77, align 4
  %79 = fcmp one float %69, %72
  %80 = fcmp one float %75, %78
  %81 = or i1 %79, %80
  br i1 %81, label %then4, label %else5

then4:                                            ; preds = %ifcont3
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont6

else5:                                            ; preds = %ifcont3
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  store i32 10, i32* %i, align 4
  br label %loop.head7

loop.head7:                                       ; preds = %loop.body8, %ifcont6
  %82 = load i32, i32* %i, align 4
  %83 = add i32 %82, 1
  %84 = icmp sle i32 %83, 14
  br i1 %84, label %loop.body8, label %loop.end9

loop.body8:                                       ; preds = %loop.head7
  %85 = load i32, i32* %i, align 4
  %86 = add i32 %85, 1
  store i32 %86, i32* %i, align 4
  %87 = load i32, i32* %i, align 4
  %88 = sub i32 %87, 10
  %89 = sub i32 %88, 1
  %90 = mul i32 1, %89
  %91 = add i32 0, %90
  %92 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 %91
  %93 = load i32, i32* %i, align 4
  %94 = sitofp i32 %93 to float
  %95 = alloca %complex_4, align 8
  %96 = getelementptr %complex_4, %complex_4* %95, i32 0, i32 0
  %97 = getelementptr %complex_4, %complex_4* %95, i32 0, i32 1
  store float %94, float* %96, align 4
  store float 0.000000e+00, float* %97, align 4
  %98 = load %complex_4, %complex_4* %95, align 4
  store %complex_4 %98, %complex_4* %92, align 4
  br label %loop.head7

loop.end9:                                        ; preds = %loop.head7
  %99 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 0
  %100 = load %complex_4, %complex_4* %99, align 4
  %101 = alloca %complex_4, align 8
  %102 = getelementptr %complex_4, %complex_4* %101, i32 0, i32 0
  %103 = getelementptr %complex_4, %complex_4* %101, i32 0, i32 1
  store float 1.100000e+01, float* %102, align 4
  store float 0.000000e+00, float* %103, align 4
  %104 = load %complex_4, %complex_4* %101, align 4
  %105 = alloca %complex_4, align 8
  store %complex_4 %100, %complex_4* %105, align 4
  %106 = getelementptr %complex_4, %complex_4* %105, i32 0, i32 0
  %107 = load float, float* %106, align 4
  %108 = alloca %complex_4, align 8
  store %complex_4 %104, %complex_4* %108, align 4
  %109 = getelementptr %complex_4, %complex_4* %108, i32 0, i32 0
  %110 = load float, float* %109, align 4
  %111 = alloca %complex_4, align 8
  store %complex_4 %100, %complex_4* %111, align 4
  %112 = getelementptr %complex_4, %complex_4* %111, i32 0, i32 1
  %113 = load float, float* %112, align 4
  %114 = alloca %complex_4, align 8
  store %complex_4 %104, %complex_4* %114, align 4
  %115 = getelementptr %complex_4, %complex_4* %114, i32 0, i32 1
  %116 = load float, float* %115, align 4
  %117 = fcmp one float %107, %110
  %118 = fcmp one float %113, %116
  %119 = or i1 %117, %118
  br i1 %119, label %then10, label %else11

then10:                                           ; preds = %loop.end9
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont12

else11:                                           ; preds = %loop.end9
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  %120 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 1
  %121 = load %complex_4, %complex_4* %120, align 4
  %122 = alloca %complex_4, align 8
  %123 = getelementptr %complex_4, %complex_4* %122, i32 0, i32 0
  %124 = getelementptr %complex_4, %complex_4* %122, i32 0, i32 1
  store float 1.200000e+01, float* %123, align 4
  store float 0.000000e+00, float* %124, align 4
  %125 = load %complex_4, %complex_4* %122, align 4
  %126 = alloca %complex_4, align 8
  store %complex_4 %121, %complex_4* %126, align 4
  %127 = getelementptr %complex_4, %complex_4* %126, i32 0, i32 0
  %128 = load float, float* %127, align 4
  %129 = alloca %complex_4, align 8
  store %complex_4 %125, %complex_4* %129, align 4
  %130 = getelementptr %complex_4, %complex_4* %129, i32 0, i32 0
  %131 = load float, float* %130, align 4
  %132 = alloca %complex_4, align 8
  store %complex_4 %121, %complex_4* %132, align 4
  %133 = getelementptr %complex_4, %complex_4* %132, i32 0, i32 1
  %134 = load float, float* %133, align 4
  %135 = alloca %complex_4, align 8
  store %complex_4 %125, %complex_4* %135, align 4
  %136 = getelementptr %complex_4, %complex_4* %135, i32 0, i32 1
  %137 = load float, float* %136, align 4
  %138 = fcmp one float %128, %131
  %139 = fcmp one float %134, %137
  %140 = or i1 %138, %139
  br i1 %140, label %then13, label %else14

then13:                                           ; preds = %ifcont12
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @14, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont15

else14:                                           ; preds = %ifcont12
  br label %ifcont15

ifcont15:                                         ; preds = %else14, %then13
  %141 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 2
  %142 = load %complex_4, %complex_4* %141, align 4
  %143 = alloca %complex_4, align 8
  %144 = getelementptr %complex_4, %complex_4* %143, i32 0, i32 0
  %145 = getelementptr %complex_4, %complex_4* %143, i32 0, i32 1
  store float 1.300000e+01, float* %144, align 4
  store float 0.000000e+00, float* %145, align 4
  %146 = load %complex_4, %complex_4* %143, align 4
  %147 = alloca %complex_4, align 8
  store %complex_4 %142, %complex_4* %147, align 4
  %148 = getelementptr %complex_4, %complex_4* %147, i32 0, i32 0
  %149 = load float, float* %148, align 4
  %150 = alloca %complex_4, align 8
  store %complex_4 %146, %complex_4* %150, align 4
  %151 = getelementptr %complex_4, %complex_4* %150, i32 0, i32 0
  %152 = load float, float* %151, align 4
  %153 = alloca %complex_4, align 8
  store %complex_4 %142, %complex_4* %153, align 4
  %154 = getelementptr %complex_4, %complex_4* %153, i32 0, i32 1
  %155 = load float, float* %154, align 4
  %156 = alloca %complex_4, align 8
  store %complex_4 %146, %complex_4* %156, align 4
  %157 = getelementptr %complex_4, %complex_4* %156, i32 0, i32 1
  %158 = load float, float* %157, align 4
  %159 = fcmp one float %149, %152
  %160 = fcmp one float %155, %158
  %161 = or i1 %159, %160
  br i1 %161, label %then16, label %else17

then16:                                           ; preds = %ifcont15
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont18

else17:                                           ; preds = %ifcont15
  br label %ifcont18

ifcont18:                                         ; preds = %else17, %then16
  %162 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 3
  %163 = load %complex_4, %complex_4* %162, align 4
  %164 = alloca %complex_4, align 8
  %165 = getelementptr %complex_4, %complex_4* %164, i32 0, i32 0
  %166 = getelementptr %complex_4, %complex_4* %164, i32 0, i32 1
  store float 1.400000e+01, float* %165, align 4
  store float 0.000000e+00, float* %166, align 4
  %167 = load %complex_4, %complex_4* %164, align 4
  %168 = alloca %complex_4, align 8
  store %complex_4 %163, %complex_4* %168, align 4
  %169 = getelementptr %complex_4, %complex_4* %168, i32 0, i32 0
  %170 = load float, float* %169, align 4
  %171 = alloca %complex_4, align 8
  store %complex_4 %167, %complex_4* %171, align 4
  %172 = getelementptr %complex_4, %complex_4* %171, i32 0, i32 0
  %173 = load float, float* %172, align 4
  %174 = alloca %complex_4, align 8
  store %complex_4 %163, %complex_4* %174, align 4
  %175 = getelementptr %complex_4, %complex_4* %174, i32 0, i32 1
  %176 = load float, float* %175, align 4
  %177 = alloca %complex_4, align 8
  store %complex_4 %167, %complex_4* %177, align 4
  %178 = getelementptr %complex_4, %complex_4* %177, i32 0, i32 1
  %179 = load float, float* %178, align 4
  %180 = fcmp one float %170, %173
  %181 = fcmp one float %176, %179
  %182 = or i1 %180, %181
  br i1 %182, label %then19, label %else20

then19:                                           ; preds = %ifcont18
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @20, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @18, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont21

else20:                                           ; preds = %ifcont18
  br label %ifcont21

ifcont21:                                         ; preds = %else20, %then19
  store i32 0, i32* %i, align 4
  br label %loop.head22

loop.head22:                                      ; preds = %loop.body23, %ifcont21
  %183 = load i32, i32* %i, align 4
  %184 = add i32 %183, 1
  %185 = icmp sle i32 %184, 3
  br i1 %185, label %loop.body23, label %loop.end24

loop.body23:                                      ; preds = %loop.head22
  %186 = load i32, i32* %i, align 4
  %187 = add i32 %186, 1
  store i32 %187, i32* %i, align 4
  %188 = load i32, i32* %i, align 4
  %189 = sub i32 %188, 1
  %190 = mul i32 1, %189
  %191 = add i32 0, %190
  %192 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 %191
  %193 = load i32, i32* %i, align 4
  %194 = sub i32 %193, 1
  %195 = mul i32 1, %194
  %196 = add i32 0, %195
  %197 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 %196
  %198 = load %complex_4, %complex_4* %197, align 4
  %199 = alloca %complex_4, align 8
  %200 = getelementptr %complex_4, %complex_4* %199, i32 0, i32 0
  %201 = getelementptr %complex_4, %complex_4* %199, i32 0, i32 1
  store float 1.000000e+01, float* %200, align 4
  store float 0.000000e+00, float* %201, align 4
  %202 = load %complex_4, %complex_4* %199, align 4
  %203 = alloca %complex_4, align 8
  store %complex_4 %198, %complex_4* %203, align 4
  %204 = alloca %complex_4, align 8
  store %complex_4 %202, %complex_4* %204, align 4
  %205 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_sub_32(%complex_4* %203, %complex_4* %204, %complex_4* %205)
  %206 = load %complex_4, %complex_4* %205, align 4
  store %complex_4 %206, %complex_4* %192, align 4
  br label %loop.head22

loop.end24:                                       ; preds = %loop.head22
  %207 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 0
  %208 = load %complex_4, %complex_4* %207, align 4
  %209 = alloca %complex_4, align 8
  %210 = getelementptr %complex_4, %complex_4* %209, i32 0, i32 0
  %211 = getelementptr %complex_4, %complex_4* %209, i32 0, i32 1
  store float 1.000000e+00, float* %210, align 4
  store float 0.000000e+00, float* %211, align 4
  %212 = load %complex_4, %complex_4* %209, align 4
  %213 = alloca %complex_4, align 8
  store %complex_4 %208, %complex_4* %213, align 4
  %214 = getelementptr %complex_4, %complex_4* %213, i32 0, i32 0
  %215 = load float, float* %214, align 4
  %216 = alloca %complex_4, align 8
  store %complex_4 %212, %complex_4* %216, align 4
  %217 = getelementptr %complex_4, %complex_4* %216, i32 0, i32 0
  %218 = load float, float* %217, align 4
  %219 = alloca %complex_4, align 8
  store %complex_4 %208, %complex_4* %219, align 4
  %220 = getelementptr %complex_4, %complex_4* %219, i32 0, i32 1
  %221 = load float, float* %220, align 4
  %222 = alloca %complex_4, align 8
  store %complex_4 %212, %complex_4* %222, align 4
  %223 = getelementptr %complex_4, %complex_4* %222, i32 0, i32 1
  %224 = load float, float* %223, align 4
  %225 = fcmp one float %215, %218
  %226 = fcmp one float %221, %224
  %227 = or i1 %225, %226
  br i1 %227, label %then25, label %else26

then25:                                           ; preds = %loop.end24
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @23, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @21, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @22, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont27

else26:                                           ; preds = %loop.end24
  br label %ifcont27

ifcont27:                                         ; preds = %else26, %then25
  %228 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 1
  %229 = load %complex_4, %complex_4* %228, align 4
  %230 = alloca %complex_4, align 8
  %231 = getelementptr %complex_4, %complex_4* %230, i32 0, i32 0
  %232 = getelementptr %complex_4, %complex_4* %230, i32 0, i32 1
  store float 2.000000e+00, float* %231, align 4
  store float 0.000000e+00, float* %232, align 4
  %233 = load %complex_4, %complex_4* %230, align 4
  %234 = alloca %complex_4, align 8
  store %complex_4 %229, %complex_4* %234, align 4
  %235 = getelementptr %complex_4, %complex_4* %234, i32 0, i32 0
  %236 = load float, float* %235, align 4
  %237 = alloca %complex_4, align 8
  store %complex_4 %233, %complex_4* %237, align 4
  %238 = getelementptr %complex_4, %complex_4* %237, i32 0, i32 0
  %239 = load float, float* %238, align 4
  %240 = alloca %complex_4, align 8
  store %complex_4 %229, %complex_4* %240, align 4
  %241 = getelementptr %complex_4, %complex_4* %240, i32 0, i32 1
  %242 = load float, float* %241, align 4
  %243 = alloca %complex_4, align 8
  store %complex_4 %233, %complex_4* %243, align 4
  %244 = getelementptr %complex_4, %complex_4* %243, i32 0, i32 1
  %245 = load float, float* %244, align 4
  %246 = fcmp one float %236, %239
  %247 = fcmp one float %242, %245
  %248 = or i1 %246, %247
  br i1 %248, label %then28, label %else29

then28:                                           ; preds = %ifcont27
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @26, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @24, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @25, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont30

else29:                                           ; preds = %ifcont27
  br label %ifcont30

ifcont30:                                         ; preds = %else29, %then28
  %249 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 2
  %250 = load %complex_4, %complex_4* %249, align 4
  %251 = alloca %complex_4, align 8
  %252 = getelementptr %complex_4, %complex_4* %251, i32 0, i32 0
  %253 = getelementptr %complex_4, %complex_4* %251, i32 0, i32 1
  store float 3.000000e+00, float* %252, align 4
  store float 0.000000e+00, float* %253, align 4
  %254 = load %complex_4, %complex_4* %251, align 4
  %255 = alloca %complex_4, align 8
  store %complex_4 %250, %complex_4* %255, align 4
  %256 = getelementptr %complex_4, %complex_4* %255, i32 0, i32 0
  %257 = load float, float* %256, align 4
  %258 = alloca %complex_4, align 8
  store %complex_4 %254, %complex_4* %258, align 4
  %259 = getelementptr %complex_4, %complex_4* %258, i32 0, i32 0
  %260 = load float, float* %259, align 4
  %261 = alloca %complex_4, align 8
  store %complex_4 %250, %complex_4* %261, align 4
  %262 = getelementptr %complex_4, %complex_4* %261, i32 0, i32 1
  %263 = load float, float* %262, align 4
  %264 = alloca %complex_4, align 8
  store %complex_4 %254, %complex_4* %264, align 4
  %265 = getelementptr %complex_4, %complex_4* %264, i32 0, i32 1
  %266 = load float, float* %265, align 4
  %267 = fcmp one float %257, %260
  %268 = fcmp one float %263, %266
  %269 = or i1 %267, %268
  br i1 %269, label %then31, label %else32

then31:                                           ; preds = %ifcont30
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @29, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @27, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @28, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont33

else32:                                           ; preds = %ifcont30
  br label %ifcont33

ifcont33:                                         ; preds = %else32, %then31
  %270 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 3
  %271 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 0
  %272 = load %complex_4, %complex_4* %271, align 4
  %273 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 1
  %274 = load %complex_4, %complex_4* %273, align 4
  %275 = alloca %complex_4, align 8
  store %complex_4 %272, %complex_4* %275, align 4
  %276 = alloca %complex_4, align 8
  store %complex_4 %274, %complex_4* %276, align 4
  %277 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_add_32(%complex_4* %275, %complex_4* %276, %complex_4* %277)
  %278 = load %complex_4, %complex_4* %277, align 4
  %279 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 2
  %280 = load %complex_4, %complex_4* %279, align 4
  %281 = alloca %complex_4, align 8
  store %complex_4 %278, %complex_4* %281, align 4
  %282 = alloca %complex_4, align 8
  store %complex_4 %280, %complex_4* %282, align 4
  %283 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_add_32(%complex_4* %281, %complex_4* %282, %complex_4* %283)
  %284 = load %complex_4, %complex_4* %283, align 4
  %285 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 0
  %286 = load %complex_4, %complex_4* %285, align 4
  %287 = alloca %complex_4, align 8
  store %complex_4 %284, %complex_4* %287, align 4
  %288 = alloca %complex_4, align 8
  store %complex_4 %286, %complex_4* %288, align 4
  %289 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_add_32(%complex_4* %287, %complex_4* %288, %complex_4* %289)
  %290 = load %complex_4, %complex_4* %289, align 4
  store %complex_4 %290, %complex_4* %270, align 4
  %291 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 3
  %292 = load %complex_4, %complex_4* %291, align 4
  %293 = alloca %complex_4, align 8
  %294 = getelementptr %complex_4, %complex_4* %293, i32 0, i32 0
  %295 = getelementptr %complex_4, %complex_4* %293, i32 0, i32 1
  store float 1.700000e+01, float* %294, align 4
  store float 0.000000e+00, float* %295, align 4
  %296 = load %complex_4, %complex_4* %293, align 4
  %297 = alloca %complex_4, align 8
  store %complex_4 %292, %complex_4* %297, align 4
  %298 = getelementptr %complex_4, %complex_4* %297, i32 0, i32 0
  %299 = load float, float* %298, align 4
  %300 = alloca %complex_4, align 8
  store %complex_4 %296, %complex_4* %300, align 4
  %301 = getelementptr %complex_4, %complex_4* %300, i32 0, i32 0
  %302 = load float, float* %301, align 4
  %303 = alloca %complex_4, align 8
  store %complex_4 %292, %complex_4* %303, align 4
  %304 = getelementptr %complex_4, %complex_4* %303, i32 0, i32 1
  %305 = load float, float* %304, align 4
  %306 = alloca %complex_4, align 8
  store %complex_4 %296, %complex_4* %306, align 4
  %307 = getelementptr %complex_4, %complex_4* %306, i32 0, i32 1
  %308 = load float, float* %307, align 4
  %309 = fcmp one float %299, %302
  %310 = fcmp one float %305, %308
  %311 = or i1 %309, %310
  br i1 %311, label %then34, label %else35

then34:                                           ; preds = %ifcont33
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @32, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @30, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @31, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont36

else35:                                           ; preds = %ifcont33
  br label %ifcont36

ifcont36:                                         ; preds = %else35, %then34
  %312 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 3
  %313 = getelementptr [3 x %complex_4], [3 x %complex_4]* %a, i32 0, i32 0
  %314 = load %complex_4, %complex_4* %313, align 4
  store %complex_4 %314, %complex_4* %312, align 4
  %315 = getelementptr [4 x %complex_4], [4 x %complex_4]* %b, i32 0, i32 3
  %316 = load %complex_4, %complex_4* %315, align 4
  %317 = alloca %complex_4, align 8
  %318 = getelementptr %complex_4, %complex_4* %317, i32 0, i32 0
  %319 = getelementptr %complex_4, %complex_4* %317, i32 0, i32 1
  store float 1.100000e+01, float* %318, align 4
  store float 0.000000e+00, float* %319, align 4
  %320 = load %complex_4, %complex_4* %317, align 4
  %321 = alloca %complex_4, align 8
  store %complex_4 %316, %complex_4* %321, align 4
  %322 = getelementptr %complex_4, %complex_4* %321, i32 0, i32 0
  %323 = load float, float* %322, align 4
  %324 = alloca %complex_4, align 8
  store %complex_4 %320, %complex_4* %324, align 4
  %325 = getelementptr %complex_4, %complex_4* %324, i32 0, i32 0
  %326 = load float, float* %325, align 4
  %327 = alloca %complex_4, align 8
  store %complex_4 %316, %complex_4* %327, align 4
  %328 = getelementptr %complex_4, %complex_4* %327, i32 0, i32 1
  %329 = load float, float* %328, align 4
  %330 = alloca %complex_4, align 8
  store %complex_4 %320, %complex_4* %330, align 4
  %331 = getelementptr %complex_4, %complex_4* %330, i32 0, i32 1
  %332 = load float, float* %331, align 4
  %333 = fcmp one float %323, %326
  %334 = fcmp one float %329, %332
  %335 = or i1 %333, %334
  br i1 %335, label %then37, label %else38

then37:                                           ; preds = %ifcont36
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @35, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @34, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont39

else38:                                           ; preds = %ifcont36
  br label %ifcont39

ifcont39:                                         ; preds = %else38, %then37
  store i32 0, i32* %i, align 4
  br label %loop.head40

loop.head40:                                      ; preds = %loop.end44, %ifcont39
  %336 = load i32, i32* %i, align 4
  %337 = add i32 %336, 1
  %338 = icmp sle i32 %337, 2
  br i1 %338, label %loop.body41, label %loop.end45

loop.body41:                                      ; preds = %loop.head40
  %339 = load i32, i32* %i, align 4
  %340 = add i32 %339, 1
  store i32 %340, i32* %i, align 4
  store i32 0, i32* %j, align 4
  br label %loop.head42

loop.head42:                                      ; preds = %loop.body43, %loop.body41
  %341 = load i32, i32* %j, align 4
  %342 = add i32 %341, 1
  %343 = icmp sle i32 %342, 2
  br i1 %343, label %loop.body43, label %loop.end44

loop.body43:                                      ; preds = %loop.head42
  %344 = load i32, i32* %j, align 4
  %345 = add i32 %344, 1
  store i32 %345, i32* %j, align 4
  %346 = load i32, i32* %i, align 4
  %347 = load i32, i32* %j, align 4
  %348 = sub i32 %346, 1
  %349 = mul i32 1, %348
  %350 = add i32 0, %349
  %351 = sub i32 %347, 1
  %352 = mul i32 2, %351
  %353 = add i32 %350, %352
  %354 = getelementptr [4 x %complex_4], [4 x %complex_4]* %c, i32 0, i32 %353
  %355 = load i32, i32* %i, align 4
  %356 = load i32, i32* %j, align 4
  %357 = add i32 %355, %356
  %358 = add i32 %357, 10
  %359 = sitofp i32 %358 to float
  %360 = alloca %complex_4, align 8
  %361 = getelementptr %complex_4, %complex_4* %360, i32 0, i32 0
  %362 = getelementptr %complex_4, %complex_4* %360, i32 0, i32 1
  store float %359, float* %361, align 4
  store float 0.000000e+00, float* %362, align 4
  %363 = load %complex_4, %complex_4* %360, align 4
  store %complex_4 %363, %complex_4* %354, align 4
  br label %loop.head42

loop.end44:                                       ; preds = %loop.head42
  br label %loop.head40

loop.end45:                                       ; preds = %loop.head40
  %364 = getelementptr [4 x %complex_4], [4 x %complex_4]* %c, i32 0, i32 0
  %365 = load %complex_4, %complex_4* %364, align 4
  %366 = alloca %complex_4, align 8
  %367 = getelementptr %complex_4, %complex_4* %366, i32 0, i32 0
  %368 = getelementptr %complex_4, %complex_4* %366, i32 0, i32 1
  store float 1.200000e+01, float* %367, align 4
  store float 0.000000e+00, float* %368, align 4
  %369 = load %complex_4, %complex_4* %366, align 4
  %370 = alloca %complex_4, align 8
  store %complex_4 %365, %complex_4* %370, align 4
  %371 = getelementptr %complex_4, %complex_4* %370, i32 0, i32 0
  %372 = load float, float* %371, align 4
  %373 = alloca %complex_4, align 8
  store %complex_4 %369, %complex_4* %373, align 4
  %374 = getelementptr %complex_4, %complex_4* %373, i32 0, i32 0
  %375 = load float, float* %374, align 4
  %376 = alloca %complex_4, align 8
  store %complex_4 %365, %complex_4* %376, align 4
  %377 = getelementptr %complex_4, %complex_4* %376, i32 0, i32 1
  %378 = load float, float* %377, align 4
  %379 = alloca %complex_4, align 8
  store %complex_4 %369, %complex_4* %379, align 4
  %380 = getelementptr %complex_4, %complex_4* %379, i32 0, i32 1
  %381 = load float, float* %380, align 4
  %382 = fcmp one float %372, %375
  %383 = fcmp one float %378, %381
  %384 = or i1 %382, %383
  br i1 %384, label %then46, label %else47

then46:                                           ; preds = %loop.end45
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @38, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @36, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @37, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont48

else47:                                           ; preds = %loop.end45
  br label %ifcont48

ifcont48:                                         ; preds = %else47, %then46
  %385 = getelementptr [4 x %complex_4], [4 x %complex_4]* %c, i32 0, i32 2
  %386 = load %complex_4, %complex_4* %385, align 4
  %387 = alloca %complex_4, align 8
  %388 = getelementptr %complex_4, %complex_4* %387, i32 0, i32 0
  %389 = getelementptr %complex_4, %complex_4* %387, i32 0, i32 1
  store float 1.300000e+01, float* %388, align 4
  store float 0.000000e+00, float* %389, align 4
  %390 = load %complex_4, %complex_4* %387, align 4
  %391 = alloca %complex_4, align 8
  store %complex_4 %386, %complex_4* %391, align 4
  %392 = getelementptr %complex_4, %complex_4* %391, i32 0, i32 0
  %393 = load float, float* %392, align 4
  %394 = alloca %complex_4, align 8
  store %complex_4 %390, %complex_4* %394, align 4
  %395 = getelementptr %complex_4, %complex_4* %394, i32 0, i32 0
  %396 = load float, float* %395, align 4
  %397 = alloca %complex_4, align 8
  store %complex_4 %386, %complex_4* %397, align 4
  %398 = getelementptr %complex_4, %complex_4* %397, i32 0, i32 1
  %399 = load float, float* %398, align 4
  %400 = alloca %complex_4, align 8
  store %complex_4 %390, %complex_4* %400, align 4
  %401 = getelementptr %complex_4, %complex_4* %400, i32 0, i32 1
  %402 = load float, float* %401, align 4
  %403 = fcmp one float %393, %396
  %404 = fcmp one float %399, %402
  %405 = or i1 %403, %404
  br i1 %405, label %then49, label %else50

then49:                                           ; preds = %ifcont48
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @41, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @39, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @40, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont51

else50:                                           ; preds = %ifcont48
  br label %ifcont51

ifcont51:                                         ; preds = %else50, %then49
  %406 = getelementptr [4 x %complex_4], [4 x %complex_4]* %c, i32 0, i32 1
  %407 = load %complex_4, %complex_4* %406, align 4
  %408 = alloca %complex_4, align 8
  %409 = getelementptr %complex_4, %complex_4* %408, i32 0, i32 0
  %410 = getelementptr %complex_4, %complex_4* %408, i32 0, i32 1
  store float 1.300000e+01, float* %409, align 4
  store float 0.000000e+00, float* %410, align 4
  %411 = load %complex_4, %complex_4* %408, align 4
  %412 = alloca %complex_4, align 8
  store %complex_4 %407, %complex_4* %412, align 4
  %413 = getelementptr %complex_4, %complex_4* %412, i32 0, i32 0
  %414 = load float, float* %413, align 4
  %415 = alloca %complex_4, align 8
  store %complex_4 %411, %complex_4* %415, align 4
  %416 = getelementptr %complex_4, %complex_4* %415, i32 0, i32 0
  %417 = load float, float* %416, align 4
  %418 = alloca %complex_4, align 8
  store %complex_4 %407, %complex_4* %418, align 4
  %419 = getelementptr %complex_4, %complex_4* %418, i32 0, i32 1
  %420 = load float, float* %419, align 4
  %421 = alloca %complex_4, align 8
  store %complex_4 %411, %complex_4* %421, align 4
  %422 = getelementptr %complex_4, %complex_4* %421, i32 0, i32 1
  %423 = load float, float* %422, align 4
  %424 = fcmp one float %414, %417
  %425 = fcmp one float %420, %423
  %426 = or i1 %424, %425
  br i1 %426, label %then52, label %else53

then52:                                           ; preds = %ifcont51
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @44, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @42, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @43, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont54

else53:                                           ; preds = %ifcont51
  br label %ifcont54

ifcont54:                                         ; preds = %else53, %then52
  %427 = getelementptr [4 x %complex_4], [4 x %complex_4]* %c, i32 0, i32 3
  %428 = load %complex_4, %complex_4* %427, align 4
  %429 = alloca %complex_4, align 8
  %430 = getelementptr %complex_4, %complex_4* %429, i32 0, i32 0
  %431 = getelementptr %complex_4, %complex_4* %429, i32 0, i32 1
  store float 1.400000e+01, float* %430, align 4
  store float 0.000000e+00, float* %431, align 4
  %432 = load %complex_4, %complex_4* %429, align 4
  %433 = alloca %complex_4, align 8
  store %complex_4 %428, %complex_4* %433, align 4
  %434 = getelementptr %complex_4, %complex_4* %433, i32 0, i32 0
  %435 = load float, float* %434, align 4
  %436 = alloca %complex_4, align 8
  store %complex_4 %432, %complex_4* %436, align 4
  %437 = getelementptr %complex_4, %complex_4* %436, i32 0, i32 0
  %438 = load float, float* %437, align 4
  %439 = alloca %complex_4, align 8
  store %complex_4 %428, %complex_4* %439, align 4
  %440 = getelementptr %complex_4, %complex_4* %439, i32 0, i32 1
  %441 = load float, float* %440, align 4
  %442 = alloca %complex_4, align 8
  store %complex_4 %432, %complex_4* %442, align 4
  %443 = getelementptr %complex_4, %complex_4* %442, i32 0, i32 1
  %444 = load float, float* %443, align 4
  %445 = fcmp one float %435, %438
  %446 = fcmp one float %441, %444
  %447 = or i1 %445, %446
  br i1 %447, label %then55, label %else56

then55:                                           ; preds = %ifcont54
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @47, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @45, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @46, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont57

else56:                                           ; preds = %ifcont54
  br label %ifcont57

ifcont57:                                         ; preds = %else56, %then55
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lfortran_complex_sub_32(%complex_4*, %complex_4*, %complex_4*, ...)

declare void @_lfortran_complex_add_32(%complex_4*, %complex_4*, %complex_4*, ...)
