; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [6 x i8] c"I4,I4\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data = private constant [11 x i8] c"ERROR STOP\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data, i32 0, i32 0), i64 10 }>
@string_const_data.1 = private constant [2 x i8] c"\0A\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.1, i32 0, i32 0), i64 1 }>
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.3 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.3, i32 0, i32 0), i64 10 }>
@string_const_data.5 = private constant [2 x i8] c"\0A\00"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.5, i32 0, i32 0), i64 1 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.7 = private unnamed_addr constant [6 x i8] c"I4,I4\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.8 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.9 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.8, i32 0, i32 0), i64 10 }>
@string_const_data.10 = private constant [2 x i8] c"\0A\00"
@string_const.11 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.10, i32 0, i32 0), i64 1 }>
@6 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.12 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.13 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.12, i32 0, i32 0), i64 10 }>
@string_const_data.14 = private constant [2 x i8] c"\0A\00"
@string_const.15 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.14, i32 0, i32 0), i64 1 }>
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.16 = private unnamed_addr constant [6 x i8] c"I4,I4\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.17 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.18 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.17, i32 0, i32 0), i64 10 }>
@string_const_data.19 = private constant [2 x i8] c"\0A\00"
@string_const.20 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.19, i32 0, i32 0), i64 1 }>
@10 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.21 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.22 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.21, i32 0, i32 0), i64 10 }>
@string_const_data.23 = private constant [2 x i8] c"\0A\00"
@string_const.24 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.23, i32 0, i32 0), i64 1 }>
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %i1 = alloca i32, align 4
  %j2 = alloca i32, align 4
  store i32 1, i32* %i1, align 4
  store i32 1, i32* %j2, align 4
  call void @f(i32* %i1, i32* %j2)
  %2 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i32* %i1, i32* %j2)
  %3 = call i64 @_lfortran_str_len(i8* %2)
  %4 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %4 to %string_descriptor*
  %5 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %2, i8** %5, align 8
  %6 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %3, i64* %6, align 4
  %7 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %10 = load i64, i64* %9, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %8, i64 %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i64 1)
  %11 = load i32, i32* %i1, align 4
  %12 = icmp ne i32 %11, 1
  br i1 %12, label %then, label %else

then:                                             ; preds = %.entry
  %13 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %14 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %13, i8* %14)
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %15 = load i32, i32* %j2, align 4
  %16 = icmp ne i32 %15, 2
  br i1 %16, label %then3, label %else4

then3:                                            ; preds = %ifcont
  %17 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  %18 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.6, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %17, i8* %18)
  call void @exit(i32 1)
  br label %ifcont5

else4:                                            ; preds = %ifcont
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  call void @g(i32* %i1, i32* %j2)
  %19 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @serialization_info.7, i32 0, i32 0), i32 0, i32 0, i32* %i1, i32* %j2)
  %20 = call i64 @_lfortran_str_len(i8* %19)
  %21 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc6 = bitcast i8* %21 to %string_descriptor*
  %22 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 0
  store i8* %19, i8** %22, align 8
  %23 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 1
  store i64 %20, i64* %23, align 4
  %24 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 1
  %27 = load i64, i64* %26, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %25, i64 %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i64 1)
  %28 = load i32, i32* %i1, align 4
  %29 = icmp ne i32 %28, 1
  br i1 %29, label %then7, label %else8

then7:                                            ; preds = %ifcont5
  %30 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.9, i32 0, i32 0), align 8
  %31 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.11, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i8* %30, i8* %31)
  call void @exit(i32 1)
  br label %ifcont9

else8:                                            ; preds = %ifcont5
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %32 = load i32, i32* %j2, align 4
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %then10, label %else11

then10:                                           ; preds = %ifcont9
  %34 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.13, i32 0, i32 0), align 8
  %35 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.15, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %34, i8* %35)
  call void @exit(i32 1)
  br label %ifcont12

else11:                                           ; preds = %ifcont9
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  call void @h(i32* %i1, i32* %j2)
  %36 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @serialization_info.16, i32 0, i32 0), i32 0, i32 0, i32* %i1, i32* %j2)
  %37 = call i64 @_lfortran_str_len(i8* %36)
  %38 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc13 = bitcast i8* %38 to %string_descriptor*
  %39 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc13, i32 0, i32 0
  store i8* %36, i8** %39, align 8
  %40 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc13, i32 0, i32 1
  store i64 %37, i64* %40, align 4
  %41 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc13, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc13, i32 0, i32 1
  %44 = load i64, i64* %43, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* %42, i64 %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0), i64 1)
  %45 = load i32, i32* %i1, align 4
  %46 = icmp ne i32 %45, 1
  br i1 %46, label %then14, label %else15

then14:                                           ; preds = %ifcont12
  %47 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.18, i32 0, i32 0), align 8
  %48 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.20, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0), i8* %47, i8* %48)
  call void @exit(i32 1)
  br label %ifcont16

else15:                                           ; preds = %ifcont12
  br label %ifcont16

ifcont16:                                         ; preds = %else15, %then14
  %49 = load i32, i32* %j2, align 4
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %then17, label %else18

then17:                                           ; preds = %ifcont16
  %51 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.22, i32 0, i32 0), align 8
  %52 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.24, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* %51, i8* %52)
  call void @exit(i32 1)
  br label %ifcont19

else18:                                           ; preds = %ifcont16
  br label %ifcont19

ifcont19:                                         ; preds = %else18, %then17
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont19
  ret i32 0
}

define void @f(i32* %a, i32* %b) {
.entry:
  %0 = load i32, i32* %a, align 4
  %1 = add i32 %0, 1
  store i32 %1, i32* %b, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @g(i32* %a, i32* %b) {
.entry:
  %0 = load i32, i32* %a, align 4
  %1 = sub i32 %0, 1
  store i32 %1, i32* %b, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @h(i32* %a, i32* %b) {
.entry:
  call void @g(i32* %a, i32* %b)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i64, i8*, i64)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
