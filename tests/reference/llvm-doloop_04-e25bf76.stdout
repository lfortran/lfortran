; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@"ERROR STOP" = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@13 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %i1 = alloca i32, align 4
  %j2 = alloca i32, align 4
  %k3 = alloca i32, align 4
  store i32 0, i32* %j2, align 4
  store i32 2, i32* %k3, align 4
  %2 = load i32, i32* %k3, align 4
  %3 = sub i32 1, %2
  store i32 %3, i32* %i1, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %4 = load i32, i32* %k3, align 4
  %5 = icmp sgt i32 %4, 0
  %6 = load i32, i32* %i1, align 4
  %7 = load i32, i32* %k3, align 4
  %8 = add i32 %6, %7
  %9 = icmp sle i32 %8, 10
  %10 = icmp eq i1 %5, false
  %11 = select i1 %10, i1 %5, i1 %9
  %12 = load i32, i32* %k3, align 4
  %13 = icmp sle i32 %12, 0
  %14 = load i32, i32* %i1, align 4
  %15 = load i32, i32* %k3, align 4
  %16 = add i32 %14, %15
  %17 = icmp sge i32 %16, 10
  %18 = icmp eq i1 %13, false
  %19 = select i1 %18, i1 %13, i1 %17
  %20 = icmp eq i1 %11, false
  %21 = select i1 %20, i1 %19, i1 %11
  br i1 %21, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %22 = load i32, i32* %i1, align 4
  %23 = load i32, i32* %k3, align 4
  %24 = add i32 %22, %23
  store i32 %24, i32* %i1, align 4
  %25 = load i32, i32* %j2, align 4
  %26 = load i32, i32* %i1, align 4
  %27 = add i32 %25, %26
  store i32 %27, i32* %j2, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %28 = load i32, i32* %j2, align 4
  %29 = icmp ne i32 %28, 25
  br i1 %29, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %30 = alloca i64, align 8
  %31 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i64* %30, i32 0, i32 0, i32* %j2)
  %32 = load i64, i64* %30, align 4
  %33 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %33 to %string_descriptor*
  %34 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %31, i8** %34, align 8
  %35 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %32, i64* %35, align 4
  %36 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %39 = load i64, i64* %38, align 4
  %40 = trunc i64 %39 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %37, i32 %40, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  store i32 0, i32* %j2, align 4
  store i32 -2, i32* %k3, align 4
  %41 = load i32, i32* %k3, align 4
  %42 = sub i32 10, %41
  store i32 %42, i32* %i1, align 4
  br label %loop.head4

loop.head4:                                       ; preds = %loop.body5, %ifcont
  %43 = load i32, i32* %k3, align 4
  %44 = icmp sgt i32 %43, 0
  %45 = load i32, i32* %i1, align 4
  %46 = load i32, i32* %k3, align 4
  %47 = add i32 %45, %46
  %48 = icmp sle i32 %47, 1
  %49 = icmp eq i1 %44, false
  %50 = select i1 %49, i1 %44, i1 %48
  %51 = load i32, i32* %k3, align 4
  %52 = icmp sle i32 %51, 0
  %53 = load i32, i32* %i1, align 4
  %54 = load i32, i32* %k3, align 4
  %55 = add i32 %53, %54
  %56 = icmp sge i32 %55, 1
  %57 = icmp eq i1 %52, false
  %58 = select i1 %57, i1 %52, i1 %56
  %59 = icmp eq i1 %50, false
  %60 = select i1 %59, i1 %58, i1 %50
  br i1 %60, label %loop.body5, label %loop.end6

loop.body5:                                       ; preds = %loop.head4
  %61 = load i32, i32* %i1, align 4
  %62 = load i32, i32* %k3, align 4
  %63 = add i32 %61, %62
  store i32 %63, i32* %i1, align 4
  %64 = load i32, i32* %j2, align 4
  %65 = load i32, i32* %i1, align 4
  %66 = add i32 %64, %65
  store i32 %66, i32* %j2, align 4
  br label %loop.head4

loop.end6:                                        ; preds = %loop.head4
  %67 = load i32, i32* %j2, align 4
  %68 = icmp ne i32 %67, 30
  br i1 %68, label %then7, label %else8

then7:                                            ; preds = %loop.end6
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont9

else8:                                            ; preds = %loop.end6
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %69 = alloca i64, align 8
  %70 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.1, i32 0, i32 0), i64* %69, i32 0, i32 0, i32* %j2)
  %71 = load i64, i64* %69, align 4
  %72 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc10 = bitcast i8* %72 to %string_descriptor*
  %73 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc10, i32 0, i32 0
  store i8* %70, i8** %73, align 8
  %74 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc10, i32 0, i32 1
  store i64 %71, i64* %74, align 4
  %75 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc10, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc10, i32 0, i32 1
  %78 = load i64, i64* %77, align 4
  %79 = trunc i64 %78 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %76, i32 %79, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0), i32 1)
  store i32 0, i32* %j2, align 4
  store i32 0, i32* %i1, align 4
  br label %a.head

a.head:                                           ; preds = %ifcont13, %ifcont9
  %80 = load i32, i32* %i1, align 4
  %81 = add i32 %80, 1
  %82 = icmp sle i32 %81, 10
  br i1 %82, label %a.body, label %a.end

a.body:                                           ; preds = %a.head
  %83 = load i32, i32* %i1, align 4
  %84 = add i32 %83, 1
  store i32 %84, i32* %i1, align 4
  %85 = load i32, i32* %j2, align 4
  %86 = load i32, i32* %i1, align 4
  %87 = add i32 %85, %86
  store i32 %87, i32* %j2, align 4
  %88 = load i32, i32* %i1, align 4
  %89 = icmp eq i32 %88, 2
  br i1 %89, label %then11, label %else12

then11:                                           ; preds = %a.body
  br label %a.end

unreachable_after_exit:                           ; No predecessors!
  br label %ifcont13

else12:                                           ; preds = %a.body
  br label %ifcont13

ifcont13:                                         ; preds = %else12, %unreachable_after_exit
  br label %a.head

a.end:                                            ; preds = %then11, %a.head
  %90 = load i32, i32* %j2, align 4
  %91 = icmp ne i32 %90, 3
  br i1 %91, label %then14, label %else15

then14:                                           ; preds = %a.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont16

else15:                                           ; preds = %a.end
  br label %ifcont16

ifcont16:                                         ; preds = %else15, %then14
  store i32 0, i32* %j2, align 4
  store i32 -1, i32* %i1, align 4
  br label %b.head

b.head:                                           ; preds = %ifcont20, %ifcont16
  %92 = load i32, i32* %i1, align 4
  %93 = add i32 %92, 2
  %94 = icmp sle i32 %93, 10
  br i1 %94, label %b.body, label %b.end

b.body:                                           ; preds = %b.head
  %95 = load i32, i32* %i1, align 4
  %96 = add i32 %95, 2
  store i32 %96, i32* %i1, align 4
  %97 = load i32, i32* %j2, align 4
  %98 = load i32, i32* %i1, align 4
  %99 = add i32 %97, %98
  store i32 %99, i32* %j2, align 4
  %100 = load i32, i32* %i1, align 4
  %101 = icmp eq i32 %100, 3
  br i1 %101, label %then17, label %else19

then17:                                           ; preds = %b.body
  br label %b.end

unreachable_after_exit18:                         ; No predecessors!
  br label %ifcont20

else19:                                           ; preds = %b.body
  br label %ifcont20

ifcont20:                                         ; preds = %else19, %unreachable_after_exit18
  br label %b.head

b.end:                                            ; preds = %then17, %b.head
  %102 = load i32, i32* %j2, align 4
  %103 = icmp ne i32 %102, 4
  br i1 %103, label %then21, label %else22

then21:                                           ; preds = %b.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont23

else22:                                           ; preds = %b.end
  br label %ifcont23

ifcont23:                                         ; preds = %else22, %then21
  store i32 0, i32* %j2, align 4
  store i32 1, i32* %i1, align 4
  br label %c.head

c.head:                                           ; preds = %ifcont27, %ifcont23
  br i1 true, label %c.body, label %c.end

c.body:                                           ; preds = %c.head
  %104 = load i32, i32* %j2, align 4
  %105 = load i32, i32* %i1, align 4
  %106 = add i32 %104, %105
  store i32 %106, i32* %j2, align 4
  %107 = load i32, i32* %i1, align 4
  %108 = icmp eq i32 %107, 2
  br i1 %108, label %then24, label %else26

then24:                                           ; preds = %c.body
  br label %c.end

unreachable_after_exit25:                         ; No predecessors!
  br label %ifcont27

else26:                                           ; preds = %c.body
  br label %ifcont27

ifcont27:                                         ; preds = %else26, %unreachable_after_exit25
  %109 = load i32, i32* %i1, align 4
  %110 = add i32 %109, 1
  store i32 %110, i32* %i1, align 4
  br label %c.head

c.end:                                            ; preds = %then24, %c.head
  %111 = load i32, i32* %j2, align 4
  %112 = icmp ne i32 %111, 3
  br i1 %112, label %then28, label %else29

then28:                                           ; preds = %c.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @13, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont30

else29:                                           ; preds = %c.end
  br label %ifcont30

ifcont30:                                         ; preds = %else29, %then28
  store i32 2, i32* %k3, align 4
  %113 = load i32, i32* %k3, align 4
  %114 = sub i32 1, %113
  store i32 %114, i32* %i1, align 4
  br label %loop.head31

loop.head31:                                      ; preds = %goto_target, %ifcont30
  %115 = load i32, i32* %k3, align 4
  %116 = icmp sgt i32 %115, 0
  %117 = load i32, i32* %i1, align 4
  %118 = load i32, i32* %k3, align 4
  %119 = add i32 %117, %118
  %120 = icmp sle i32 %119, 10
  %121 = icmp eq i1 %116, false
  %122 = select i1 %121, i1 %116, i1 %120
  %123 = load i32, i32* %k3, align 4
  %124 = icmp sle i32 %123, 0
  %125 = load i32, i32* %i1, align 4
  %126 = load i32, i32* %k3, align 4
  %127 = add i32 %125, %126
  %128 = icmp sge i32 %127, 10
  %129 = icmp eq i1 %124, false
  %130 = select i1 %129, i1 %124, i1 %128
  %131 = icmp eq i1 %122, false
  %132 = select i1 %131, i1 %130, i1 %122
  br i1 %132, label %loop.body32, label %loop.end33

loop.body32:                                      ; preds = %loop.head31
  %133 = load i32, i32* %i1, align 4
  %134 = load i32, i32* %k3, align 4
  %135 = add i32 %133, %134
  store i32 %135, i32* %i1, align 4
  br label %goto_target

goto_target:                                      ; preds = %loop.body32
  br label %loop.head31

loop.end33:                                       ; preds = %loop.head31
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %loop.end33
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lpython_free_argv()
