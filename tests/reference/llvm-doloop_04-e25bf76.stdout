; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [2 x i8] c" \00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@8 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@9 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@10 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 0, i32* %j, align 4
  store i32 2, i32* %k, align 4
  %2 = load i32, i32* %k, align 4
  %3 = sub i32 1, %2
  store i32 %3, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %4 = load i32, i32* %k, align 4
  %5 = icmp sgt i32 %4, 0
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %k, align 4
  %8 = add i32 %6, %7
  %9 = icmp sle i32 %8, 10
  %10 = icmp eq i1 %5, false
  %11 = alloca i1, align 1
  br i1 %10, label %then, label %else

then:                                             ; preds = %loop.head
  store i1 %5, i1* %11, align 1
  br label %ifcont

else:                                             ; preds = %loop.head
  store i1 %9, i1* %11, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %12 = load i1, i1* %11, align 1
  %13 = load i32, i32* %k, align 4
  %14 = icmp sle i32 %13, 0
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %k, align 4
  %17 = add i32 %15, %16
  %18 = icmp sge i32 %17, 10
  %19 = icmp eq i1 %14, false
  %20 = alloca i1, align 1
  br i1 %19, label %then1, label %else2

then1:                                            ; preds = %ifcont
  store i1 %14, i1* %20, align 1
  br label %ifcont3

else2:                                            ; preds = %ifcont
  store i1 %18, i1* %20, align 1
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %21 = load i1, i1* %20, align 1
  %22 = icmp eq i1 %12, false
  %23 = alloca i1, align 1
  br i1 %22, label %then4, label %else5

then4:                                            ; preds = %ifcont3
  store i1 %21, i1* %23, align 1
  br label %ifcont6

else5:                                            ; preds = %ifcont3
  store i1 %12, i1* %23, align 1
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %24 = load i1, i1* %23, align 1
  br i1 %24, label %loop.body, label %loop.end

loop.body:                                        ; preds = %ifcont6
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %k, align 4
  %27 = add i32 %25, %26
  store i32 %27, i32* %i, align 4
  %28 = load i32, i32* %j, align 4
  %29 = load i32, i32* %i, align 4
  %30 = add i32 %28, %29
  store i32 %30, i32* %j, align 4
  br label %loop.head

loop.end:                                         ; preds = %ifcont6
  %31 = load i32, i32* %j, align 4
  %32 = icmp ne i32 %31, 25
  br i1 %32, label %then7, label %else8

then7:                                            ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont9

else8:                                            ; preds = %loop.end
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %33 = load i32, i32* %j, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i32 %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  store i32 0, i32* %j, align 4
  store i32 -2, i32* %k, align 4
  %34 = load i32, i32* %k, align 4
  %35 = sub i32 10, %34
  store i32 %35, i32* %i, align 4
  br label %loop.head10

loop.head10:                                      ; preds = %loop.body20, %ifcont9
  %36 = load i32, i32* %k, align 4
  %37 = icmp sgt i32 %36, 0
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %k, align 4
  %40 = add i32 %38, %39
  %41 = icmp sle i32 %40, 1
  %42 = icmp eq i1 %37, false
  %43 = alloca i1, align 1
  br i1 %42, label %then11, label %else12

then11:                                           ; preds = %loop.head10
  store i1 %37, i1* %43, align 1
  br label %ifcont13

else12:                                           ; preds = %loop.head10
  store i1 %41, i1* %43, align 1
  br label %ifcont13

ifcont13:                                         ; preds = %else12, %then11
  %44 = load i1, i1* %43, align 1
  %45 = load i32, i32* %k, align 4
  %46 = icmp sle i32 %45, 0
  %47 = load i32, i32* %i, align 4
  %48 = load i32, i32* %k, align 4
  %49 = add i32 %47, %48
  %50 = icmp sge i32 %49, 1
  %51 = icmp eq i1 %46, false
  %52 = alloca i1, align 1
  br i1 %51, label %then14, label %else15

then14:                                           ; preds = %ifcont13
  store i1 %46, i1* %52, align 1
  br label %ifcont16

else15:                                           ; preds = %ifcont13
  store i1 %50, i1* %52, align 1
  br label %ifcont16

ifcont16:                                         ; preds = %else15, %then14
  %53 = load i1, i1* %52, align 1
  %54 = icmp eq i1 %44, false
  %55 = alloca i1, align 1
  br i1 %54, label %then17, label %else18

then17:                                           ; preds = %ifcont16
  store i1 %53, i1* %55, align 1
  br label %ifcont19

else18:                                           ; preds = %ifcont16
  store i1 %44, i1* %55, align 1
  br label %ifcont19

ifcont19:                                         ; preds = %else18, %then17
  %56 = load i1, i1* %55, align 1
  br i1 %56, label %loop.body20, label %loop.end21

loop.body20:                                      ; preds = %ifcont19
  %57 = load i32, i32* %i, align 4
  %58 = load i32, i32* %k, align 4
  %59 = add i32 %57, %58
  store i32 %59, i32* %i, align 4
  %60 = load i32, i32* %j, align 4
  %61 = load i32, i32* %i, align 4
  %62 = add i32 %60, %61
  store i32 %62, i32* %j, align 4
  br label %loop.head10

loop.end21:                                       ; preds = %ifcont19
  %63 = load i32, i32* %j, align 4
  %64 = icmp ne i32 %63, 30
  br i1 %64, label %then22, label %else23

then22:                                           ; preds = %loop.end21
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont24

else23:                                           ; preds = %loop.end21
  br label %ifcont24

ifcont24:                                         ; preds = %else23, %then22
  %65 = load i32, i32* %j, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i32 %65, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %a.head

a.head:                                           ; preds = %ifcont27, %ifcont24
  %66 = load i32, i32* %i, align 4
  %67 = add i32 %66, 1
  %68 = icmp sle i32 %67, 10
  br i1 %68, label %a.body, label %a.end

a.body:                                           ; preds = %a.head
  %69 = load i32, i32* %i, align 4
  %70 = add i32 %69, 1
  store i32 %70, i32* %i, align 4
  %71 = load i32, i32* %j, align 4
  %72 = load i32, i32* %i, align 4
  %73 = add i32 %71, %72
  store i32 %73, i32* %j, align 4
  %74 = load i32, i32* %i, align 4
  %75 = icmp eq i32 %74, 2
  br i1 %75, label %then25, label %else26

then25:                                           ; preds = %a.body
  br label %a.end

unreachable_after_exit:                           ; No predecessors!
  br label %ifcont27

else26:                                           ; preds = %a.body
  br label %ifcont27

ifcont27:                                         ; preds = %else26, %unreachable_after_exit
  br label %a.head

a.end:                                            ; preds = %then25, %a.head
  %76 = load i32, i32* %j, align 4
  %77 = icmp ne i32 %76, 3
  br i1 %77, label %then28, label %else29

then28:                                           ; preds = %a.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @8, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont30

else29:                                           ; preds = %a.end
  br label %ifcont30

ifcont30:                                         ; preds = %else29, %then28
  store i32 0, i32* %j, align 4
  store i32 -1, i32* %i, align 4
  br label %b.head

b.head:                                           ; preds = %ifcont34, %ifcont30
  %78 = load i32, i32* %i, align 4
  %79 = add i32 %78, 2
  %80 = icmp sle i32 %79, 10
  br i1 %80, label %b.body, label %b.end

b.body:                                           ; preds = %b.head
  %81 = load i32, i32* %i, align 4
  %82 = add i32 %81, 2
  store i32 %82, i32* %i, align 4
  %83 = load i32, i32* %j, align 4
  %84 = load i32, i32* %i, align 4
  %85 = add i32 %83, %84
  store i32 %85, i32* %j, align 4
  %86 = load i32, i32* %i, align 4
  %87 = icmp eq i32 %86, 3
  br i1 %87, label %then31, label %else33

then31:                                           ; preds = %b.body
  br label %b.end

unreachable_after_exit32:                         ; No predecessors!
  br label %ifcont34

else33:                                           ; preds = %b.body
  br label %ifcont34

ifcont34:                                         ; preds = %else33, %unreachable_after_exit32
  br label %b.head

b.end:                                            ; preds = %then31, %b.head
  %88 = load i32, i32* %j, align 4
  %89 = icmp ne i32 %88, 4
  br i1 %89, label %then35, label %else36

then35:                                           ; preds = %b.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont37

else36:                                           ; preds = %b.end
  br label %ifcont37

ifcont37:                                         ; preds = %else36, %then35
  store i32 0, i32* %j, align 4
  store i32 1, i32* %i, align 4
  br label %c.head

c.head:                                           ; preds = %ifcont41, %ifcont37
  br i1 true, label %c.body, label %c.end

c.body:                                           ; preds = %c.head
  %90 = load i32, i32* %j, align 4
  %91 = load i32, i32* %i, align 4
  %92 = add i32 %90, %91
  store i32 %92, i32* %j, align 4
  %93 = load i32, i32* %i, align 4
  %94 = icmp eq i32 %93, 2
  br i1 %94, label %then38, label %else40

then38:                                           ; preds = %c.body
  br label %c.end

unreachable_after_exit39:                         ; No predecessors!
  br label %ifcont41

else40:                                           ; preds = %c.body
  br label %ifcont41

ifcont41:                                         ; preds = %else40, %unreachable_after_exit39
  %95 = load i32, i32* %i, align 4
  %96 = add i32 %95, 1
  store i32 %96, i32* %i, align 4
  br label %c.head

c.end:                                            ; preds = %then38, %c.head
  %97 = load i32, i32* %j, align 4
  %98 = icmp ne i32 %97, 3
  br i1 %98, label %then42, label %else43

then42:                                           ; preds = %c.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont44

else43:                                           ; preds = %c.end
  br label %ifcont44

ifcont44:                                         ; preds = %else43, %then42
  store i32 2, i32* %k, align 4
  %99 = load i32, i32* %k, align 4
  %100 = sub i32 1, %99
  store i32 %100, i32* %i, align 4
  br label %loop.head45

loop.head45:                                      ; preds = %goto_target, %ifcont44
  %101 = load i32, i32* %k, align 4
  %102 = icmp sgt i32 %101, 0
  %103 = load i32, i32* %i, align 4
  %104 = load i32, i32* %k, align 4
  %105 = add i32 %103, %104
  %106 = icmp sle i32 %105, 10
  %107 = icmp eq i1 %102, false
  %108 = alloca i1, align 1
  br i1 %107, label %then46, label %else47

then46:                                           ; preds = %loop.head45
  store i1 %102, i1* %108, align 1
  br label %ifcont48

else47:                                           ; preds = %loop.head45
  store i1 %106, i1* %108, align 1
  br label %ifcont48

ifcont48:                                         ; preds = %else47, %then46
  %109 = load i1, i1* %108, align 1
  %110 = load i32, i32* %k, align 4
  %111 = icmp sle i32 %110, 0
  %112 = load i32, i32* %i, align 4
  %113 = load i32, i32* %k, align 4
  %114 = add i32 %112, %113
  %115 = icmp sge i32 %114, 10
  %116 = icmp eq i1 %111, false
  %117 = alloca i1, align 1
  br i1 %116, label %then49, label %else50

then49:                                           ; preds = %ifcont48
  store i1 %111, i1* %117, align 1
  br label %ifcont51

else50:                                           ; preds = %ifcont48
  store i1 %115, i1* %117, align 1
  br label %ifcont51

ifcont51:                                         ; preds = %else50, %then49
  %118 = load i1, i1* %117, align 1
  %119 = icmp eq i1 %109, false
  %120 = alloca i1, align 1
  br i1 %119, label %then52, label %else53

then52:                                           ; preds = %ifcont51
  store i1 %118, i1* %120, align 1
  br label %ifcont54

else53:                                           ; preds = %ifcont51
  store i1 %109, i1* %120, align 1
  br label %ifcont54

ifcont54:                                         ; preds = %else53, %then52
  %121 = load i1, i1* %120, align 1
  br i1 %121, label %loop.body55, label %loop.end56

loop.body55:                                      ; preds = %ifcont54
  %122 = load i32, i32* %i, align 4
  %123 = load i32, i32* %k, align 4
  %124 = add i32 %122, %123
  store i32 %124, i32* %i, align 4
  br label %goto_target

goto_target:                                      ; preds = %loop.body55
  br label %loop.head45

loop.end56:                                       ; preds = %ifcont54
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lfortran_printf(i8*, ...)
