; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [2 x i8] c" \00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@8 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@9 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@10 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 0, i32* %j, align 4
  store i32 2, i32* %k, align 4
  %2 = load i32, i32* %k, align 4
  %3 = sub i32 1, %2
  store i32 %3, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %4 = load i32, i32* %k, align 4
  %5 = icmp sgt i32 %4, 0
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %k, align 4
  %8 = add i32 %6, %7
  %9 = icmp sle i32 %8, 10
  %10 = icmp eq i1 %5, false
  %11 = select i1 %10, i1 %5, i1 %9
  %12 = load i32, i32* %k, align 4
  %13 = icmp sle i32 %12, 0
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %k, align 4
  %16 = add i32 %14, %15
  %17 = icmp sge i32 %16, 10
  %18 = icmp eq i1 %13, false
  %19 = select i1 %18, i1 %13, i1 %17
  %20 = icmp eq i1 %11, false
  %21 = select i1 %20, i1 %19, i1 %11
  br i1 %21, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %k, align 4
  %24 = add i32 %22, %23
  store i32 %24, i32* %i, align 4
  %25 = load i32, i32* %j, align 4
  %26 = load i32, i32* %i, align 4
  %27 = add i32 %25, %26
  store i32 %27, i32* %j, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %28 = load i32, i32* %j, align 4
  %29 = icmp ne i32 %28, 25
  br i1 %29, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %30 = load i32, i32* %j, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i32 %30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  store i32 0, i32* %j, align 4
  store i32 -2, i32* %k, align 4
  %31 = load i32, i32* %k, align 4
  %32 = sub i32 10, %31
  store i32 %32, i32* %i, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %loop.body2, %ifcont
  %33 = load i32, i32* %k, align 4
  %34 = icmp sgt i32 %33, 0
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %k, align 4
  %37 = add i32 %35, %36
  %38 = icmp sle i32 %37, 1
  %39 = icmp eq i1 %34, false
  %40 = select i1 %39, i1 %34, i1 %38
  %41 = load i32, i32* %k, align 4
  %42 = icmp sle i32 %41, 0
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %k, align 4
  %45 = add i32 %43, %44
  %46 = icmp sge i32 %45, 1
  %47 = icmp eq i1 %42, false
  %48 = select i1 %47, i1 %42, i1 %46
  %49 = icmp eq i1 %40, false
  %50 = select i1 %49, i1 %48, i1 %40
  br i1 %50, label %loop.body2, label %loop.end3

loop.body2:                                       ; preds = %loop.head1
  %51 = load i32, i32* %i, align 4
  %52 = load i32, i32* %k, align 4
  %53 = add i32 %51, %52
  store i32 %53, i32* %i, align 4
  %54 = load i32, i32* %j, align 4
  %55 = load i32, i32* %i, align 4
  %56 = add i32 %54, %55
  store i32 %56, i32* %j, align 4
  br label %loop.head1

loop.end3:                                        ; preds = %loop.head1
  %57 = load i32, i32* %j, align 4
  %58 = icmp ne i32 %57, 30
  br i1 %58, label %then4, label %else5

then4:                                            ; preds = %loop.end3
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont6

else5:                                            ; preds = %loop.end3
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %59 = load i32, i32* %j, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i32 %59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %a.head

a.head:                                           ; preds = %ifcont9, %ifcont6
  %60 = load i32, i32* %i, align 4
  %61 = add i32 %60, 1
  %62 = icmp sle i32 %61, 10
  br i1 %62, label %a.body, label %a.end

a.body:                                           ; preds = %a.head
  %63 = load i32, i32* %i, align 4
  %64 = add i32 %63, 1
  store i32 %64, i32* %i, align 4
  %65 = load i32, i32* %j, align 4
  %66 = load i32, i32* %i, align 4
  %67 = add i32 %65, %66
  store i32 %67, i32* %j, align 4
  %68 = load i32, i32* %i, align 4
  %69 = icmp eq i32 %68, 2
  br i1 %69, label %then7, label %else8

then7:                                            ; preds = %a.body
  br label %a.end

unreachable_after_exit:                           ; No predecessors!
  br label %ifcont9

else8:                                            ; preds = %a.body
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %unreachable_after_exit
  br label %a.head

a.end:                                            ; preds = %then7, %a.head
  %70 = load i32, i32* %j, align 4
  %71 = icmp ne i32 %70, 3
  br i1 %71, label %then10, label %else11

then10:                                           ; preds = %a.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @8, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont12

else11:                                           ; preds = %a.end
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  store i32 0, i32* %j, align 4
  store i32 -1, i32* %i, align 4
  br label %b.head

b.head:                                           ; preds = %ifcont16, %ifcont12
  %72 = load i32, i32* %i, align 4
  %73 = add i32 %72, 2
  %74 = icmp sle i32 %73, 10
  br i1 %74, label %b.body, label %b.end

b.body:                                           ; preds = %b.head
  %75 = load i32, i32* %i, align 4
  %76 = add i32 %75, 2
  store i32 %76, i32* %i, align 4
  %77 = load i32, i32* %j, align 4
  %78 = load i32, i32* %i, align 4
  %79 = add i32 %77, %78
  store i32 %79, i32* %j, align 4
  %80 = load i32, i32* %i, align 4
  %81 = icmp eq i32 %80, 3
  br i1 %81, label %then13, label %else15

then13:                                           ; preds = %b.body
  br label %b.end

unreachable_after_exit14:                         ; No predecessors!
  br label %ifcont16

else15:                                           ; preds = %b.body
  br label %ifcont16

ifcont16:                                         ; preds = %else15, %unreachable_after_exit14
  br label %b.head

b.end:                                            ; preds = %then13, %b.head
  %82 = load i32, i32* %j, align 4
  %83 = icmp ne i32 %82, 4
  br i1 %83, label %then17, label %else18

then17:                                           ; preds = %b.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont19

else18:                                           ; preds = %b.end
  br label %ifcont19

ifcont19:                                         ; preds = %else18, %then17
  store i32 0, i32* %j, align 4
  store i32 1, i32* %i, align 4
  br label %c.head

c.head:                                           ; preds = %ifcont23, %ifcont19
  br i1 true, label %c.body, label %c.end

c.body:                                           ; preds = %c.head
  %84 = load i32, i32* %j, align 4
  %85 = load i32, i32* %i, align 4
  %86 = add i32 %84, %85
  store i32 %86, i32* %j, align 4
  %87 = load i32, i32* %i, align 4
  %88 = icmp eq i32 %87, 2
  br i1 %88, label %then20, label %else22

then20:                                           ; preds = %c.body
  br label %c.end

unreachable_after_exit21:                         ; No predecessors!
  br label %ifcont23

else22:                                           ; preds = %c.body
  br label %ifcont23

ifcont23:                                         ; preds = %else22, %unreachable_after_exit21
  %89 = load i32, i32* %i, align 4
  %90 = add i32 %89, 1
  store i32 %90, i32* %i, align 4
  br label %c.head

c.end:                                            ; preds = %then20, %c.head
  %91 = load i32, i32* %j, align 4
  %92 = icmp ne i32 %91, 3
  br i1 %92, label %then24, label %else25

then24:                                           ; preds = %c.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont26

else25:                                           ; preds = %c.end
  br label %ifcont26

ifcont26:                                         ; preds = %else25, %then24
  store i32 2, i32* %k, align 4
  %93 = load i32, i32* %k, align 4
  %94 = sub i32 1, %93
  store i32 %94, i32* %i, align 4
  br label %loop.head27

loop.head27:                                      ; preds = %goto_target, %ifcont26
  %95 = load i32, i32* %k, align 4
  %96 = icmp sgt i32 %95, 0
  %97 = load i32, i32* %i, align 4
  %98 = load i32, i32* %k, align 4
  %99 = add i32 %97, %98
  %100 = icmp sle i32 %99, 10
  %101 = icmp eq i1 %96, false
  %102 = select i1 %101, i1 %96, i1 %100
  %103 = load i32, i32* %k, align 4
  %104 = icmp sle i32 %103, 0
  %105 = load i32, i32* %i, align 4
  %106 = load i32, i32* %k, align 4
  %107 = add i32 %105, %106
  %108 = icmp sge i32 %107, 10
  %109 = icmp eq i1 %104, false
  %110 = select i1 %109, i1 %104, i1 %108
  %111 = icmp eq i1 %102, false
  %112 = select i1 %111, i1 %110, i1 %102
  br i1 %112, label %loop.body28, label %loop.end29

loop.body28:                                      ; preds = %loop.head27
  %113 = load i32, i32* %i, align 4
  %114 = load i32, i32* %k, align 4
  %115 = add i32 %113, %114
  store i32 %115, i32* %i, align 4
  br label %goto_target

goto_target:                                      ; preds = %loop.body28
  br label %loop.head27

loop.end29:                                       ; preds = %loop.head27
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lfortran_printf(i8*, ...)
