; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@__module___lcompilers_created__nested_context__sub1____lcompilers_created__nested_context__sub1_x = global i32 0
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [12 x i8] c"S-DESC-7,I4\00", align 1
@string_const_data = private constant [8 x i8] c"before:\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([8 x i8], [8 x i8]* @string_const_data, i32 0, i32 0), i64 7 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [12 x i8] c"S-DESC-6,I4\00", align 1
@string_const_data.2 = private constant [7 x i8] c"after:\00"
@string_const.3 = private global %string_descriptor <{ i8* getelementptr inbounds ([7 x i8], [7 x i8]* @string_const_data.2, i32 0, i32 0), i64 6 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.4 = private unnamed_addr constant [12 x i8] c"S-DESC-9,I4\00", align 1
@string_const_data.5 = private constant [10 x i8] c"x in getx\00"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([10 x i8], [10 x i8]* @string_const_data.5, i32 0, i32 0), i64 9 }>
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.7 = private constant [8 x i8] c"in sub1\00"
@string_const.8 = private global %string_descriptor <{ i8* getelementptr inbounds ([8 x i8], [8 x i8]* @string_const_data.7, i32 0, i32 0), i64 7 }>
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.9 = private unnamed_addr constant [12 x i8] c"S-DESC-3,I4\00", align 1
@string_const_data.10 = private constant [4 x i8] c"r =\00"
@string_const.11 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.10, i32 0, i32 0), i64 3 }>
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @__module_recursion_02_solver(i32 ()* %f, i32* %iter) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %f_val = alloca i32, align 4
  %solver = alloca i32, align 4
  %0 = call i32 %f()
  store i32 %0, i32* %f_val, align 4
  %1 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, %string_descriptor* @string_const, i32* %f_val)
  %2 = call i64 @_lfortran_str_len(i8* %1)
  %3 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %3 to %string_descriptor*
  %4 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %1, i8** %4, align 8
  %5 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %2, i64* %5, align 4
  %6 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  store i32 2, i32* %call_arg_value, align 4
  %8 = load i32, i32* %iter, align 4
  %9 = sub i32 %8, 1
  store i32 %9, i32* %call_arg_value1, align 4
  %10 = call i32 @__module_recursion_02_sub1(i32* %call_arg_value, i32* %call_arg_value1)
  store i32 %10, i32* %solver, align 4
  %11 = call i32 %f()
  store i32 %11, i32* %f_val, align 4
  %12 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @serialization_info.1, i32 0, i32 0), i32 0, i32 0, %string_descriptor* @string_const.3, i32* %f_val)
  %13 = call i64 @_lfortran_str_len(i8* %12)
  %14 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc2 = bitcast i8* %14 to %string_descriptor*
  %15 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  store i8* %12, i8** %15, align 8
  %16 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  store i64 %13, i64* %16, align 4
  %17 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  %19 = load i32, i32* %solver, align 4
  ret i32 %19
}

declare i32 @f()

define i32 @__module_recursion_02_sub1(i32* %y, i32* %iter) {
.entry:
  %sub1 = alloca i32, align 4
  %tmp = alloca i32, align 4
  %x = alloca i32, align 4
  %0 = load i32, i32* %y, align 4
  store i32 %0, i32* %x, align 4
  %1 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.8, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  %2 = load i32, i32* %iter, align 4
  %3 = icmp eq i32 %2, 1
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  store i32 1, i32* %sub1, align 4
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  %4 = load i32, i32* %x, align 4
  store i32 %4, i32* @__module___lcompilers_created__nested_context__sub1____lcompilers_created__nested_context__sub1_x, align 4
  %5 = call i32 @sub1.__module_recursion_02_getx()
  store i32 %5, i32* %tmp, align 4
  %6 = load i32, i32* @__module___lcompilers_created__nested_context__sub1____lcompilers_created__nested_context__sub1_x, align 4
  store i32 %6, i32* %x, align 4
  %7 = load i32, i32* %x, align 4
  store i32 %7, i32* @__module___lcompilers_created__nested_context__sub1____lcompilers_created__nested_context__sub1_x, align 4
  %8 = call i32 @__module_recursion_02_solver(i32 ()* @sub1.__module_recursion_02_getx, i32* %iter)
  store i32 %8, i32* %sub1, align 4
  %9 = load i32, i32* @__module___lcompilers_created__nested_context__sub1____lcompilers_created__nested_context__sub1_x, align 4
  store i32 %9, i32* %x, align 4
  br label %return

return:                                           ; preds = %ifcont, %then
  %10 = load i32, i32* %sub1, align 4
  ret i32 %10
}

define i32 @sub1.__module_recursion_02_getx() {
.entry:
  %getx = alloca i32, align 4
  %0 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @serialization_info.4, i32 0, i32 0), i32 0, i32 0, %string_descriptor* @string_const.6, i32* @__module___lcompilers_created__nested_context__sub1____lcompilers_created__nested_context__sub1_x)
  %1 = call i64 @_lfortran_str_len(i8* %0)
  %2 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %2 to %string_descriptor*
  %3 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %1, i64* %4, align 4
  %5 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %7 = load i32, i32* @__module___lcompilers_created__nested_context__sub1____lcompilers_created__nested_context__sub1_x, align 4
  store i32 %7, i32* %getx, align 4
  br label %return

return:                                           ; preds = %.entry
  %8 = load i32, i32* %getx, align 4
  ret i32 %8
}

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, ...)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value2 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %r = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %r1 = alloca i32, align 4
  store i32 3, i32* %call_arg_value, align 4
  store i32 3, i32* %call_arg_value2, align 4
  %2 = call i32 @__module_recursion_02_sub1(i32* %call_arg_value, i32* %call_arg_value2)
  store i32 %2, i32* %r1, align 4
  %3 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @serialization_info.9, i32 0, i32 0), i32 0, i32 0, %string_descriptor* @string_const.11, i32* %r1)
  %4 = call i64 @_lfortran_str_len(i8* %3)
  %5 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %5 to %string_descriptor*
  %6 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %3, i8** %6, align 8
  %7 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %4, i64* %7, align 4
  %8 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0))
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lpython_free_argv()
