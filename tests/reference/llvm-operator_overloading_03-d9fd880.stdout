; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"T>T:\00", align 1
@3 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"T>F:\00", align 1
@9 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@10 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@12 = private unnamed_addr constant [2 x i8] c" \00", align 1
@13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@14 = private unnamed_addr constant [5 x i8] c"F>T:\00", align 1
@15 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@16 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@17 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@18 = private unnamed_addr constant [2 x i8] c" \00", align 1
@19 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@20 = private unnamed_addr constant [5 x i8] c"F>F:\00", align 1
@21 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@22 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@23 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@24 = private unnamed_addr constant [2 x i8] c" \00", align 1
@25 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@26 = private unnamed_addr constant [5 x i8] c"T<T:\00", align 1
@27 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@28 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@29 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@30 = private unnamed_addr constant [2 x i8] c" \00", align 1
@31 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@32 = private unnamed_addr constant [5 x i8] c"T<F:\00", align 1
@33 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@34 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@35 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@36 = private unnamed_addr constant [2 x i8] c" \00", align 1
@37 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@38 = private unnamed_addr constant [5 x i8] c"F<T:\00", align 1
@39 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@40 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@41 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@42 = private unnamed_addr constant [2 x i8] c" \00", align 1
@43 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@44 = private unnamed_addr constant [5 x i8] c"F<F:\00", align 1
@45 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@46 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@47 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %log1, i1* %log2) {
.entry:
  %greater_than_inverse = alloca i1, align 1
  %0 = load i1, i1* %log1, align 1
  %1 = load i1, i1* %log2, align 1
  %2 = select i1 false, i1 true, i1 %1
  %3 = icmp eq i1 %0, false
  %4 = xor i1 %0, %2
  %5 = xor i1 %4, true
  %6 = icmp eq i1 %5, false
  %7 = xor i1 %5, false
  %8 = xor i1 %7, true
  br i1 %8, label %then, label %else

then:                                             ; preds = %.entry
  store i1 true, i1* %greater_than_inverse, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  store i1 false, i1* %greater_than_inverse, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %9 = load i1, i1* %greater_than_inverse, align 1
  ret i1 %9
}

define i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %log1, i1* %log2) {
.entry:
  %less_than_inverse = alloca i1, align 1
  %0 = load i1, i1* %log1, align 1
  %1 = load i1, i1* %log2, align 1
  %2 = select i1 true, i1 false, i1 %1
  %3 = icmp eq i1 %0, false
  %4 = xor i1 %0, %2
  %5 = xor i1 %4, true
  %6 = icmp eq i1 %5, false
  %7 = xor i1 %5, true
  %8 = xor i1 %7, true
  br i1 %8, label %then, label %else

then:                                             ; preds = %.entry
  store i1 true, i1* %less_than_inverse, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  store i1 false, i1* %less_than_inverse, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %9 = load i1, i1* %less_than_inverse, align 1
  ret i1 %9
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %f = alloca i1, align 1
  store i1 false, i1* %f, align 1
  %t = alloca i1, align 1
  store i1 true, i1* %t, align 1
  %2 = call i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %t, i1* %t)
  %3 = icmp eq i1 %2, false
  %4 = select i1 %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0)
  %5 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 8, i8* %4)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %6 = call i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %t, i1* %f)
  %7 = icmp eq i1 %6, false
  %8 = select i1 %7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0)
  %9 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i32 8, i8* %8)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  %10 = call i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %f, i1* %t)
  %11 = icmp eq i1 %10, false
  %12 = select i1 %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @16, i32 0, i32 0)
  %13 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @14, i32 0, i32 0), i32 8, i8* %12)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i32 0, i32 0), i8* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))
  %14 = call i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %f, i1* %f)
  %15 = icmp eq i1 %14, false
  %16 = select i1 %15, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @21, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @22, i32 0, i32 0)
  %17 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @20, i32 0, i32 0), i32 8, i8* %16)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @23, i32 0, i32 0), i8* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i32 0, i32 0))
  %18 = call i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %t, i1* %t)
  %19 = icmp eq i1 %18, false
  %20 = select i1 %19, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @27, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @28, i32 0, i32 0)
  %21 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @26, i32 0, i32 0), i32 8, i8* %20)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @29, i32 0, i32 0), i8* %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @25, i32 0, i32 0))
  %22 = call i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %t, i1* %f)
  %23 = icmp eq i1 %22, false
  %24 = select i1 %23, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @33, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @34, i32 0, i32 0)
  %25 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @32, i32 0, i32 0), i32 8, i8* %24)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @35, i32 0, i32 0), i8* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @31, i32 0, i32 0))
  %26 = call i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %f, i1* %t)
  %27 = icmp eq i1 %26, false
  %28 = select i1 %27, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @39, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @40, i32 0, i32 0)
  %29 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @38, i32 0, i32 0), i32 8, i8* %28)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @41, i32 0, i32 0), i8* %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @37, i32 0, i32 0))
  %30 = call i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %f, i1* %f)
  %31 = icmp eq i1 %30, false
  %32 = select i1 %31, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @45, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @46, i32 0, i32 0)
  %33 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @44, i32 0, i32 0), i32 8, i8* %32)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @47, i32 0, i32 0), i8* %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @43, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)
