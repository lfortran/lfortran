; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [4 x i8] c"S,L\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"T>T:\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [4 x i8] c"S,L\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"T>F:\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.2 = private unnamed_addr constant [4 x i8] c"S,L\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"F>T:\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.3 = private unnamed_addr constant [4 x i8] c"S,L\00", align 1
@10 = private unnamed_addr constant [5 x i8] c"F>F:\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.4 = private unnamed_addr constant [4 x i8] c"S,L\00", align 1
@13 = private unnamed_addr constant [5 x i8] c"T<T:\00", align 1
@14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@15 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.5 = private unnamed_addr constant [4 x i8] c"S,L\00", align 1
@16 = private unnamed_addr constant [5 x i8] c"T<F:\00", align 1
@17 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.6 = private unnamed_addr constant [4 x i8] c"S,L\00", align 1
@19 = private unnamed_addr constant [5 x i8] c"F<T:\00", align 1
@20 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@21 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.7 = private unnamed_addr constant [4 x i8] c"S,L\00", align 1
@22 = private unnamed_addr constant [5 x i8] c"F<F:\00", align 1
@23 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %log1, i1* %log2) {
.entry:
  %greater_than_inverse = alloca i1, align 1
  %0 = load i1, i1* %log1, align 1
  %1 = load i1, i1* %log2, align 1
  %2 = select i1 false, i1 true, i1 %1
  %3 = icmp eq i1 %0, false
  %4 = xor i1 %0, %2
  %5 = xor i1 %4, true
  %6 = icmp eq i1 %5, false
  %7 = xor i1 %5, false
  %8 = xor i1 %7, true
  br i1 %8, label %then, label %else

then:                                             ; preds = %.entry
  store i1 true, i1* %greater_than_inverse, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  store i1 false, i1* %greater_than_inverse, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %9 = load i1, i1* %greater_than_inverse, align 1
  ret i1 %9
}

define i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %log1, i1* %log2) {
.entry:
  %less_than_inverse = alloca i1, align 1
  %0 = load i1, i1* %log1, align 1
  %1 = load i1, i1* %log2, align 1
  %2 = select i1 true, i1 false, i1 %1
  %3 = icmp eq i1 %0, false
  %4 = xor i1 %0, %2
  %5 = xor i1 %4, true
  %6 = icmp eq i1 %5, false
  %7 = xor i1 %5, true
  %8 = xor i1 %7, true
  br i1 %8, label %then, label %else

then:                                             ; preds = %.entry
  store i1 true, i1* %less_than_inverse, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  store i1 false, i1* %less_than_inverse, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %9 = load i1, i1* %less_than_inverse, align 1
  ret i1 %9
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %f = alloca i1, align 1
  store i1 false, i1* %f, align 1
  %t = alloca i1, align 1
  store i1 true, i1* %t, align 1
  %2 = alloca i8*, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8** %2, align 8
  %3 = call i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %t, i1* %t)
  %4 = alloca i1, align 1
  store i1 %3, i1* %4, align 1
  %5 = call i8* (i8*, i8*, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @serialization_info, i32 0, i32 0), i32 0, i8** %2, i1* %4)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  %6 = alloca i8*, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i8** %6, align 8
  %7 = call i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %t, i1* %f)
  %8 = alloca i1, align 1
  store i1 %7, i1* %8, align 1
  %9 = call i8* (i8*, i8*, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @serialization_info.1, i32 0, i32 0), i32 0, i8** %6, i1* %8)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  %10 = alloca i8*, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8** %10, align 8
  %11 = call i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %f, i1* %t)
  %12 = alloca i1, align 1
  store i1 %11, i1* %12, align 1
  %13 = call i8* (i8*, i8*, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @serialization_info.2, i32 0, i32 0), i32 0, i8** %10, i1* %12)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  %14 = alloca i8*, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0), i8** %14, align 8
  %15 = call i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %f, i1* %f)
  %16 = alloca i1, align 1
  store i1 %15, i1* %16, align 1
  %17 = call i8* (i8*, i8*, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @serialization_info.3, i32 0, i32 0), i32 0, i8** %14, i1* %16)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  %18 = alloca i8*, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @13, i32 0, i32 0), i8** %18, align 8
  %19 = call i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %t, i1* %t)
  %20 = alloca i1, align 1
  store i1 %19, i1* %20, align 1
  %21 = call i8* (i8*, i8*, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @serialization_info.4, i32 0, i32 0), i32 0, i8** %18, i1* %20)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @14, i32 0, i32 0), i8* %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0))
  %22 = alloca i8*, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @16, i32 0, i32 0), i8** %22, align 8
  %23 = call i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %t, i1* %f)
  %24 = alloca i1, align 1
  store i1 %23, i1* %24, align 1
  %25 = call i8* (i8*, i8*, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @serialization_info.5, i32 0, i32 0), i32 0, i8** %22, i1* %24)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i32 0, i32 0), i8* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @15, i32 0, i32 0))
  %26 = alloca i8*, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @19, i32 0, i32 0), i8** %26, align 8
  %27 = call i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %f, i1* %t)
  %28 = alloca i1, align 1
  store i1 %27, i1* %28, align 1
  %29 = call i8* (i8*, i8*, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @serialization_info.6, i32 0, i32 0), i32 0, i8** %26, i1* %28)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @20, i32 0, i32 0), i8* %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @18, i32 0, i32 0))
  %30 = alloca i8*, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @22, i32 0, i32 0), i8** %30, align 8
  %31 = call i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %f, i1* %f)
  %32 = alloca i1, align 1
  store i1 %31, i1* %32, align 1
  %33 = call i8* (i8*, i8*, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @serialization_info.7, i32 0, i32 0), i32 0, i8** %30, i1* %32)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @23, i32 0, i32 0), i8* %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @21, i32 0, i32 0))
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i8*, i32, ...)

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_free_argv()
