; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [11 x i8] c"S-DESC-4,L\00", align 1
@string_const_data = private constant [4 x i8] c"T>T:"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data, i32 0, i32 0), i64 4 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [11 x i8] c"S-DESC-4,L\00", align 1
@string_const_data.2 = private constant [4 x i8] c"T>F:"
@string_const.3 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.2, i32 0, i32 0), i64 4 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.4 = private unnamed_addr constant [11 x i8] c"S-DESC-4,L\00", align 1
@string_const_data.5 = private constant [4 x i8] c"F>T:"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.5, i32 0, i32 0), i64 4 }>
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.7 = private unnamed_addr constant [11 x i8] c"S-DESC-4,L\00", align 1
@string_const_data.8 = private constant [4 x i8] c"F>F:"
@string_const.9 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.8, i32 0, i32 0), i64 4 }>
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.10 = private unnamed_addr constant [11 x i8] c"S-DESC-4,L\00", align 1
@string_const_data.11 = private constant [4 x i8] c"T<T:"
@string_const.12 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.11, i32 0, i32 0), i64 4 }>
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.13 = private unnamed_addr constant [11 x i8] c"S-DESC-4,L\00", align 1
@string_const_data.14 = private constant [4 x i8] c"T<F:"
@string_const.15 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.14, i32 0, i32 0), i64 4 }>
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.16 = private unnamed_addr constant [11 x i8] c"S-DESC-4,L\00", align 1
@string_const_data.17 = private constant [4 x i8] c"F<T:"
@string_const.18 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.17, i32 0, i32 0), i64 4 }>
@13 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.19 = private unnamed_addr constant [11 x i8] c"S-DESC-4,L\00", align 1
@string_const_data.20 = private constant [4 x i8] c"F<F:"
@string_const.21 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.20, i32 0, i32 0), i64 4 }>
@15 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %log1, i1* %log2) {
.entry:
  %greater_than_inverse = alloca i1, align 1
  %0 = load i1, i1* %log1, align 1
  %1 = load i1, i1* %log2, align 1
  %2 = select i1 false, i1 true, i1 %1
  %3 = icmp eq i1 %0, false
  %4 = xor i1 %0, %2
  %5 = xor i1 %4, true
  %6 = icmp eq i1 %5, false
  %7 = xor i1 %5, false
  %8 = xor i1 %7, true
  br i1 %8, label %then, label %else

then:                                             ; preds = %.entry
  store i1 true, i1* %greater_than_inverse, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  store i1 false, i1* %greater_than_inverse, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %9 = load i1, i1* %greater_than_inverse, align 1
  ret i1 %9
}

define i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %log1, i1* %log2) {
.entry:
  %less_than_inverse = alloca i1, align 1
  %0 = load i1, i1* %log1, align 1
  %1 = load i1, i1* %log2, align 1
  %2 = select i1 true, i1 false, i1 %1
  %3 = icmp eq i1 %0, false
  %4 = xor i1 %0, %2
  %5 = xor i1 %4, true
  %6 = icmp eq i1 %5, false
  %7 = xor i1 %5, true
  %8 = xor i1 %7, true
  br i1 %8, label %then, label %else

then:                                             ; preds = %.entry
  store i1 true, i1* %less_than_inverse, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  store i1 false, i1* %less_than_inverse, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %9 = load i1, i1* %less_than_inverse, align 1
  ret i1 %9
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %f = alloca i1, align 1
  store i1 false, i1* %f, align 1
  %t = alloca i1, align 1
  store i1 true, i1* %t, align 1
  %2 = alloca i64, align 8
  %3 = call i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %t, i1* %t)
  %4 = alloca i1, align 1
  store i1 %3, i1* %4, align 1
  %5 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @serialization_info, i32 0, i32 0), i64* %2, i32 0, i32 0, %string_descriptor* @string_const, i1* %4)
  %6 = load i64, i64* %2, align 4
  %7 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %7 to %string_descriptor*
  %8 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %5, i8** %8, align 8
  %9 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %6, i64* %9, align 4
  %10 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %13 = load i64, i64* %12, align 4
  %14 = trunc i64 %13 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %11, i32 %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  %15 = alloca i64, align 8
  %16 = call i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %t, i1* %f)
  %17 = alloca i1, align 1
  store i1 %16, i1* %17, align 1
  %18 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @serialization_info.1, i32 0, i32 0), i64* %15, i32 0, i32 0, %string_descriptor* @string_const.3, i1* %17)
  %19 = load i64, i64* %15, align 4
  %20 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc1 = bitcast i8* %20 to %string_descriptor*
  %21 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  store i8* %18, i8** %21, align 8
  %22 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  store i64 %19, i64* %22, align 4
  %23 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  %26 = load i64, i64* %25, align 4
  %27 = trunc i64 %26 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %24, i32 %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  %28 = alloca i64, align 8
  %29 = call i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %f, i1* %t)
  %30 = alloca i1, align 1
  store i1 %29, i1* %30, align 1
  %31 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @serialization_info.4, i32 0, i32 0), i64* %28, i32 0, i32 0, %string_descriptor* @string_const.6, i1* %30)
  %32 = load i64, i64* %28, align 4
  %33 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc2 = bitcast i8* %33 to %string_descriptor*
  %34 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  store i8* %31, i8** %34, align 8
  %35 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  store i64 %32, i64* %35, align 4
  %36 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  %39 = load i64, i64* %38, align 4
  %40 = trunc i64 %39 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %37, i32 %40, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i32 1)
  %41 = alloca i64, align 8
  %42 = call i1 @__module_operator_overloading_01_overload_comp_m_greater_than_inverse(i1* %f, i1* %f)
  %43 = alloca i1, align 1
  store i1 %42, i1* %43, align 1
  %44 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @serialization_info.7, i32 0, i32 0), i64* %41, i32 0, i32 0, %string_descriptor* @string_const.9, i1* %43)
  %45 = load i64, i64* %41, align 4
  %46 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc3 = bitcast i8* %46 to %string_descriptor*
  %47 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 0
  store i8* %44, i8** %47, align 8
  %48 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 1
  store i64 %45, i64* %48, align 4
  %49 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 1
  %52 = load i64, i64* %51, align 4
  %53 = trunc i64 %52 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %50, i32 %53, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0), i32 1)
  %54 = alloca i64, align 8
  %55 = call i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %t, i1* %t)
  %56 = alloca i1, align 1
  store i1 %55, i1* %56, align 1
  %57 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @serialization_info.10, i32 0, i32 0), i64* %54, i32 0, i32 0, %string_descriptor* @string_const.12, i1* %56)
  %58 = load i64, i64* %54, align 4
  %59 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc4 = bitcast i8* %59 to %string_descriptor*
  %60 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc4, i32 0, i32 0
  store i8* %57, i8** %60, align 8
  %61 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc4, i32 0, i32 1
  store i64 %58, i64* %61, align 4
  %62 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc4, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc4, i32 0, i32 1
  %65 = load i64, i64* %64, align 4
  %66 = trunc i64 %65 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* %63, i32 %66, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0), i32 1)
  %67 = alloca i64, align 8
  %68 = call i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %t, i1* %f)
  %69 = alloca i1, align 1
  store i1 %68, i1* %69, align 1
  %70 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @serialization_info.13, i32 0, i32 0), i64* %67, i32 0, i32 0, %string_descriptor* @string_const.15, i1* %69)
  %71 = load i64, i64* %67, align 4
  %72 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc5 = bitcast i8* %72 to %string_descriptor*
  %73 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc5, i32 0, i32 0
  store i8* %70, i8** %73, align 8
  %74 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc5, i32 0, i32 1
  store i64 %71, i64* %74, align 4
  %75 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc5, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc5, i32 0, i32 1
  %78 = load i64, i64* %77, align 4
  %79 = trunc i64 %78 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* %76, i32 %79, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0), i32 1)
  %80 = alloca i64, align 8
  %81 = call i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %f, i1* %t)
  %82 = alloca i1, align 1
  store i1 %81, i1* %82, align 1
  %83 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @serialization_info.16, i32 0, i32 0), i64* %80, i32 0, i32 0, %string_descriptor* @string_const.18, i1* %82)
  %84 = load i64, i64* %80, align 4
  %85 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc6 = bitcast i8* %85 to %string_descriptor*
  %86 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 0
  store i8* %83, i8** %86, align 8
  %87 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 1
  store i64 %84, i64* %87, align 4
  %88 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  %90 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 1
  %91 = load i64, i64* %90, align 4
  %92 = trunc i64 %91 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @13, i32 0, i32 0), i8* %89, i32 %92, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0), i32 1)
  %93 = alloca i64, align 8
  %94 = call i1 @__module_operator_overloading_01_overload_comp_m_less_than_inverse(i1* %f, i1* %f)
  %95 = alloca i1, align 1
  store i1 %94, i1* %95, align 1
  %96 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @serialization_info.19, i32 0, i32 0), i64* %93, i32 0, i32 0, %string_descriptor* @string_const.21, i1* %95)
  %97 = load i64, i64* %93, align 4
  %98 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc7 = bitcast i8* %98 to %string_descriptor*
  %99 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc7, i32 0, i32 0
  store i8* %96, i8** %99, align 8
  %100 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc7, i32 0, i32 1
  store i64 %97, i64* %100, align 4
  %101 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc7, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc7, i32 0, i32 1
  %104 = load i64, i64* %103, align 4
  %105 = trunc i64 %104 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @15, i32 0, i32 0), i8* %102, i32 %105, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i32 0, i32 0), i32 1)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lpython_free_argv()
