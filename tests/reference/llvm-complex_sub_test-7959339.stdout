; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [10 x i8] c"(%f,%f)%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [10 x i8] c"(%f,%f)%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [10 x i8] c"(%f,%f)%s\00", align 1

define i32 @main() {
.entry:
  %x = alloca %complex_4
  %0 = alloca %complex_4
  %1 = getelementptr %complex_4, %complex_4* %0, i32 0, i32 0
  %2 = getelementptr %complex_4, %complex_4* %0, i32 0, i32 1
  store float 3.000000e+00, float* %1
  store float 4.000000e+00, float* %2
  %3 = load %complex_4, %complex_4* %0
  store %complex_4 %3, %complex_4* %x
  %4 = load %complex_4, %complex_4* %x
  %5 = alloca %complex_4
  %6 = getelementptr %complex_4, %complex_4* %5, i32 0, i32 0
  %7 = getelementptr %complex_4, %complex_4* %5, i32 0, i32 1
  store float 4.000000e+00, float* %6
  store float 0.000000e+00, float* %7
  %8 = load %complex_4, %complex_4* %5
  %9 = alloca %complex_4
  store %complex_4 %4, %complex_4* %9
  %10 = alloca %complex_4
  store %complex_4 %8, %complex_4* %10
  %11 = alloca %complex_4
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_sub_32(%complex_4* %9, %complex_4* %10, %complex_4* %11)
  %12 = load %complex_4, %complex_4* %11
  store %complex_4 %12, %complex_4* %x
  %13 = alloca %complex_4
  %14 = getelementptr %complex_4, %complex_4* %13, i32 0, i32 0
  %15 = getelementptr %complex_4, %complex_4* %13, i32 0, i32 1
  store float 4.000000e+00, float* %14
  store float 0.000000e+00, float* %15
  %16 = load %complex_4, %complex_4* %13
  %17 = load %complex_4, %complex_4* %x
  %18 = alloca %complex_4
  store %complex_4 %16, %complex_4* %18
  %19 = alloca %complex_4
  store %complex_4 %17, %complex_4* %19
  %20 = alloca %complex_4
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_sub_32(%complex_4* %18, %complex_4* %19, %complex_4* %20)
  %21 = load %complex_4, %complex_4* %20
  store %complex_4 %21, %complex_4* %x
  %22 = load %complex_4, %complex_4* %x
  %23 = alloca %complex_4
  store %complex_4 %22, %complex_4* %23
  %24 = getelementptr %complex_4, %complex_4* %23, i32 0, i32 0
  %25 = load float, float* %24
  %26 = fpext float %25 to double
  %27 = alloca %complex_4
  store %complex_4 %22, %complex_4* %27
  %28 = getelementptr %complex_4, %complex_4* %27, i32 0, i32 1
  %29 = load float, float* %28
  %30 = fpext float %29 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i32 0, i32 0), double %26, double %30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %31 = alloca %complex_4
  %32 = getelementptr %complex_4, %complex_4* %31, i32 0, i32 0
  %33 = getelementptr %complex_4, %complex_4* %31, i32 0, i32 1
  store float 2.000000e+00, float* %32
  store float 0.000000e+00, float* %33
  %34 = load %complex_4, %complex_4* %31
  %35 = load %complex_4, %complex_4* %x
  %36 = alloca %complex_4
  store %complex_4 %34, %complex_4* %36
  %37 = alloca %complex_4
  store %complex_4 %35, %complex_4* %37
  %38 = alloca %complex_4
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_sub_32(%complex_4* %36, %complex_4* %37, %complex_4* %38)
  %39 = load %complex_4, %complex_4* %38
  store %complex_4 %39, %complex_4* %x
  %40 = load %complex_4, %complex_4* %x
  %41 = alloca %complex_4
  store %complex_4 %40, %complex_4* %41
  %42 = getelementptr %complex_4, %complex_4* %41, i32 0, i32 0
  %43 = load float, float* %42
  %44 = fpext float %43 to double
  %45 = alloca %complex_4
  store %complex_4 %40, %complex_4* %45
  %46 = getelementptr %complex_4, %complex_4* %45, i32 0, i32 1
  %47 = load float, float* %46
  %48 = fpext float %47 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i32 0, i32 0), double %44, double %48, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %49 = load %complex_4, %complex_4* %x
  %50 = alloca %complex_4
  %51 = getelementptr %complex_4, %complex_4* %50, i32 0, i32 0
  %52 = getelementptr %complex_4, %complex_4* %50, i32 0, i32 1
  store float 0.000000e+00, float* %51
  store float 3.000000e+00, float* %52
  %53 = load %complex_4, %complex_4* %50
  %54 = alloca %complex_4
  store %complex_4 %49, %complex_4* %54
  %55 = alloca %complex_4
  store %complex_4 %53, %complex_4* %55
  %56 = alloca %complex_4
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_sub_32(%complex_4* %54, %complex_4* %55, %complex_4* %56)
  %57 = load %complex_4, %complex_4* %56
  store %complex_4 %57, %complex_4* %x
  %58 = load %complex_4, %complex_4* %x
  %59 = alloca %complex_4
  store %complex_4 %58, %complex_4* %59
  %60 = getelementptr %complex_4, %complex_4* %59, i32 0, i32 0
  %61 = load float, float* %60
  %62 = fpext float %61 to double
  %63 = alloca %complex_4
  store %complex_4 %58, %complex_4* %63
  %64 = getelementptr %complex_4, %complex_4* %63, i32 0, i32 1
  %65 = load float, float* %64
  %66 = fpext float %65 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @8, i32 0, i32 0), double %62, double %66, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  ret i32 0
}

declare void @_lfortran_complex_sub_32(%complex_4*, %complex_4*, %complex_4*, ...)

declare void @_lfortran_printf(i8*, ...)
