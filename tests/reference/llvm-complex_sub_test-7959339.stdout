; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type <{ float, float }>
%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [8 x i8] c"{R4,R4}\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [8 x i8] c"{R4,R4}\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.2 = private unnamed_addr constant [8 x i8] c"{R4,R4}\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %x = alloca %complex_4, align 8
  %2 = alloca %complex_4, align 8
  %3 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 0
  %4 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 1
  store float 3.000000e+00, float* %3, align 4
  store float 4.000000e+00, float* %4, align 4
  %5 = load %complex_4, %complex_4* %2, align 1
  store %complex_4 %5, %complex_4* %x, align 1
  %6 = load %complex_4, %complex_4* %x, align 1
  %7 = alloca %complex_4, align 8
  %8 = getelementptr %complex_4, %complex_4* %7, i32 0, i32 0
  %9 = getelementptr %complex_4, %complex_4* %7, i32 0, i32 1
  store float 4.000000e+00, float* %8, align 4
  store float 0.000000e+00, float* %9, align 4
  %10 = load %complex_4, %complex_4* %7, align 1
  %11 = alloca %complex_4, align 8
  store %complex_4 %6, %complex_4* %11, align 1
  %12 = alloca %complex_4, align 8
  store %complex_4 %10, %complex_4* %12, align 1
  %13 = alloca %complex_4, align 8
  call void @_lfortran_complex_sub_32(%complex_4* %11, %complex_4* %12, %complex_4* %13)
  %14 = load %complex_4, %complex_4* %13, align 1
  store %complex_4 %14, %complex_4* %x, align 1
  %15 = alloca %complex_4, align 8
  %16 = getelementptr %complex_4, %complex_4* %15, i32 0, i32 0
  %17 = getelementptr %complex_4, %complex_4* %15, i32 0, i32 1
  store float 4.000000e+00, float* %16, align 4
  store float 0.000000e+00, float* %17, align 4
  %18 = load %complex_4, %complex_4* %15, align 1
  %19 = load %complex_4, %complex_4* %x, align 1
  %20 = alloca %complex_4, align 8
  store %complex_4 %18, %complex_4* %20, align 1
  %21 = alloca %complex_4, align 8
  store %complex_4 %19, %complex_4* %21, align 1
  %22 = alloca %complex_4, align 8
  call void @_lfortran_complex_sub_32(%complex_4* %20, %complex_4* %21, %complex_4* %22)
  %23 = load %complex_4, %complex_4* %22, align 1
  store %complex_4 %23, %complex_4* %x, align 1
  %24 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, %complex_4* %x)
  %25 = call i64 @_lfortran_str_len(i8* %24)
  %26 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %26 to %string_descriptor*
  %27 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %24, i8** %27, align 8
  %28 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %25, i64* %28, align 4
  %29 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %32 = load i64, i64* %31, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %30, i64 %32, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i64 1)
  %33 = alloca %complex_4, align 8
  %34 = getelementptr %complex_4, %complex_4* %33, i32 0, i32 0
  %35 = getelementptr %complex_4, %complex_4* %33, i32 0, i32 1
  store float 2.000000e+00, float* %34, align 4
  store float 0.000000e+00, float* %35, align 4
  %36 = load %complex_4, %complex_4* %33, align 1
  %37 = load %complex_4, %complex_4* %x, align 1
  %38 = alloca %complex_4, align 8
  store %complex_4 %36, %complex_4* %38, align 1
  %39 = alloca %complex_4, align 8
  store %complex_4 %37, %complex_4* %39, align 1
  %40 = alloca %complex_4, align 8
  call void @_lfortran_complex_sub_32(%complex_4* %38, %complex_4* %39, %complex_4* %40)
  %41 = load %complex_4, %complex_4* %40, align 1
  store %complex_4 %41, %complex_4* %x, align 1
  %42 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @serialization_info.1, i32 0, i32 0), i32 0, i32 0, %complex_4* %x)
  %43 = call i64 @_lfortran_str_len(i8* %42)
  %44 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc1 = bitcast i8* %44 to %string_descriptor*
  %45 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  store i8* %42, i8** %45, align 8
  %46 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  store i64 %43, i64* %46, align 4
  %47 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  %50 = load i64, i64* %49, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %48, i64 %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i64 1)
  %51 = load %complex_4, %complex_4* %x, align 1
  %52 = alloca %complex_4, align 8
  %53 = getelementptr %complex_4, %complex_4* %52, i32 0, i32 0
  %54 = getelementptr %complex_4, %complex_4* %52, i32 0, i32 1
  store float 0.000000e+00, float* %53, align 4
  store float 3.000000e+00, float* %54, align 4
  %55 = load %complex_4, %complex_4* %52, align 1
  %56 = alloca %complex_4, align 8
  store %complex_4 %51, %complex_4* %56, align 1
  %57 = alloca %complex_4, align 8
  store %complex_4 %55, %complex_4* %57, align 1
  %58 = alloca %complex_4, align 8
  call void @_lfortran_complex_sub_32(%complex_4* %56, %complex_4* %57, %complex_4* %58)
  %59 = load %complex_4, %complex_4* %58, align 1
  store %complex_4 %59, %complex_4* %x, align 1
  %60 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @serialization_info.2, i32 0, i32 0), i32 0, i32 0, %complex_4* %x)
  %61 = call i64 @_lfortran_str_len(i8* %60)
  %62 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc2 = bitcast i8* %62 to %string_descriptor*
  %63 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  store i8* %60, i8** %63, align 8
  %64 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  store i64 %61, i64* %64, align 4
  %65 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  %68 = load i64, i64* %67, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %66, i64 %68, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i64 1)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_complex_sub_32(%complex_4*, %complex_4*, %complex_4*)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i64, i8*, i64)

declare void @_lpython_free_argv()
