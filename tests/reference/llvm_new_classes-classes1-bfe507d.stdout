; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>
%base = type <{ %__new_vtab_base*, i32 }>
%__new_vtab_base = type { i64 }

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data = private constant [11 x i8] c"ERROR STOP\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data, i32 0, i32 0), i64 10 }>
@string_const_data.1 = private constant [2 x i8] c"\0A\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.1, i32 0, i32 0), i64 1 }>
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @__module_xx_show_x(%base* %this) {
.entry:
  %0 = alloca %__new_vtab_base, align 8
  %1 = getelementptr %__new_vtab_base, %__new_vtab_base* %0, i32 0, i32 0
  store i64 0, i64* %1, align 4
  %2 = getelementptr %base, %base* %this, i32 0, i32 1
  store i32 12, i32* %2, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = alloca %__new_vtab_base, align 8
  %3 = getelementptr %__new_vtab_base, %__new_vtab_base* %2, i32 0, i32 0
  store i64 0, i64* %3, align 4
  %b = alloca %base, align 8
  %4 = getelementptr %base, %base* %b, i32 0, i32 1
  %5 = getelementptr %base, %base* %b, i32 0, i32 1
  store i32 10, i32* %5, align 4
  %6 = alloca %__new_vtab_base, align 8
  %7 = getelementptr %__new_vtab_base, %__new_vtab_base* %6, i32 0, i32 0
  store i64 0, i64* %7, align 4
  call void @__module_xx_show_x(%base* %b)
  %8 = getelementptr %base, %base* %b, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = alloca i32, align 4
  store i32 %9, i32* %10, align 4
  %11 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i32* %10)
  %12 = call i64 @_lfortran_str_len(i8* %11)
  %13 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %13 to %string_descriptor*
  %14 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %11, i8** %14, align 8
  %15 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %12, i64* %15, align 4
  %16 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %19 = load i64, i64* %18, align 4
  %20 = trunc i64 %19 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %17, i32 %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  %21 = getelementptr %base, %base* %b, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp ne i32 %22, 12
  br i1 %23, label %then, label %else

then:                                             ; preds = %.entry
  %24 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %25 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %24, i8* %25)
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
