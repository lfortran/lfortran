; ModuleID = 'LFortran'
source_filename = "LFortran"

%base = type <{ i32 (...)**, i32 }>
%string_descriptor = type <{ i8*, i64 }>

@_Name_base = private unnamed_addr constant [5 x i8] c"base\00", align 1
@_Type_Info_base = linkonce_odr unnamed_addr constant { i8* } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @_Name_base, i32 0, i32 0) }, align 8
@_VTable_base = linkonce_odr unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* @_Type_Info_base, i8* bitcast (void (%base*)* @__module_xx_show_x to i8*)] }, align 8
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@"ERROR STOP" = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @__module_xx_show_x(%base* %this) {
.entry:
  %0 = getelementptr %base, %base* %this, i32 0, i32 1
  store i32 12, i32* %0, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %b = alloca %base, align 8
  %2 = bitcast %base* %b to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_VTable_base, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr %base, %base* %b, i32 0, i32 1
  %4 = getelementptr %base, %base* %b, i32 0, i32 1
  store i32 10, i32* %4, align 4
  call void @__module_xx_show_x(%base* %b)
  %5 = alloca i64, align 8
  %6 = getelementptr %base, %base* %b, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = alloca i32, align 4
  store i32 %7, i32* %8, align 4
  %9 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i64* %5, i32 0, i32 0, i32* %8)
  %10 = load i64, i64* %5, align 4
  %11 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %11 to %string_descriptor*
  %12 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %9, i8** %12, align 8
  %13 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %10, i64* %13, align 4
  %14 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %17 = load i64, i64* %16, align 4
  %18 = trunc i64 %17 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %15, i32 %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  %19 = getelementptr %base, %base* %b, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp ne i32 %20, 12
  br i1 %21, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
