; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@string_const_data = private constant [11 x i8] c"ERROR STOP\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data, i32 0, i32 0), i64 10 }>
@string_const_data.1 = private constant [2 x i8] c"\0A\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.1, i32 0, i32 0), i64 1 }>
@0 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.3 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.3, i32 0, i32 0), i64 10 }>
@string_const_data.5 = private constant [2 x i8] c"\0A\00"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.5, i32 0, i32 0), i64 1 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.7 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.8 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.7, i32 0, i32 0), i64 10 }>
@string_const_data.9 = private constant [2 x i8] c"\0A\00"
@string_const.10 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.9, i32 0, i32 0), i64 1 }>
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.11 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.12 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.11, i32 0, i32 0), i64 10 }>
@string_const_data.13 = private constant [2 x i8] c"\0A\00"
@string_const.14 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.13, i32 0, i32 0), i64 1 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %x = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %b = alloca i1, align 1
  %x1 = alloca i32, align 4
  store i32 2, i32* %x1, align 4
  %2 = load i32, i32* %x1, align 4
  %3 = icmp ne i32 %2, 2
  store i1 %3, i1* %b, align 1
  %4 = load i1, i1* %b, align 1
  br i1 %4, label %then, label %else

then:                                             ; preds = %.entry
  %5 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %6 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i8* %5, i8* %6)
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %7 = load i32, i32* %x1, align 4
  %8 = icmp eq i32 %7, 2
  store i1 %8, i1* %b, align 1
  %9 = load i1, i1* %b, align 1
  %10 = xor i1 %9, true
  br i1 %10, label %then2, label %else3

then2:                                            ; preds = %ifcont
  %11 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  %12 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.6, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %11, i8* %12)
  call void @exit(i32 1)
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %13 = load i32, i32* %x1, align 4
  %14 = icmp eq i32 %13, 2
  %15 = xor i1 %14, true
  store i1 %15, i1* %b, align 1
  %16 = load i1, i1* %b, align 1
  br i1 %16, label %then5, label %else6

then5:                                            ; preds = %ifcont4
  %17 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.8, i32 0, i32 0), align 8
  %18 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.10, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %17, i8* %18)
  call void @exit(i32 1)
  br label %ifcont7

else6:                                            ; preds = %ifcont4
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  %19 = load i32, i32* %x1, align 4
  %20 = icmp eq i32 %19, 2
  store i1 %20, i1* %b, align 1
  %21 = load i1, i1* %b, align 1
  %22 = xor i1 %21, true
  store i1 %22, i1* %b, align 1
  %23 = load i1, i1* %b, align 1
  br i1 %23, label %then8, label %else9

then8:                                            ; preds = %ifcont7
  %24 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.12, i32 0, i32 0), align 8
  %25 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.14, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %24, i8* %25)
  call void @exit(i32 1)
  br label %ifcont10

else9:                                            ; preds = %ifcont7
  br label %ifcont10

ifcont10:                                         ; preds = %else9, %then8
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont10
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
