; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@c_data = private global [2 x i8] c"BC"
@c = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @c_data, i32 0, i32 0), i64 2 }>
@string_const_data = private constant [1 x i8] c"A"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data, i32 0, i32 0), i64 1 }>
@string_const_data.1 = private constant [1 x i8] c"Z"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data.1, i32 0, i32 0), i64 1 }>
@string_const_data.3 = private constant [1 x i8] c"a"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data.3, i32 0, i32 0), i64 1 }>
@string_const_data.5 = private constant [1 x i8] c"z"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data.5, i32 0, i32 0), i64 1 }>
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [2 x i8] c"L\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.7 = private constant [2 x i8] c"@a"
@string_const.8 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.7, i32 0, i32 0), i64 2 }>
@string_const_data.9 = private constant [1 x i8] c"A"
@string_const.10 = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data.9, i32 0, i32 0), i64 1 }>
@string_const_data.11 = private constant [1 x i8] c"Z"
@string_const.12 = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data.11, i32 0, i32 0), i64 1 }>
@string_const_data.13 = private constant [1 x i8] c"a"
@string_const.14 = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data.13, i32 0, i32 0), i64 1 }>
@string_const_data.15 = private constant [1 x i8] c"z"
@string_const.16 = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data.15, i32 0, i32 0), i64 1 }>
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.17 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.18 = private constant [2 x i8] c"a@"
@string_const.19 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.18, i32 0, i32 0), i64 2 }>
@string_const_data.20 = private constant [1 x i8] c"A"
@string_const.21 = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data.20, i32 0, i32 0), i64 1 }>
@string_const_data.22 = private constant [1 x i8] c"Z"
@string_const.23 = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data.22, i32 0, i32 0), i64 1 }>
@string_const_data.24 = private constant [1 x i8] c"a"
@string_const.25 = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data.24, i32 0, i32 0), i64 1 }>
@string_const_data.26 = private constant [1 x i8] c"z"
@string_const.27 = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data.26, i32 0, i32 0), i64 1 }>
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.28 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.29 = private constant [3 x i8] c"sbs"
@string_const.30 = private global %string_descriptor <{ i8* getelementptr inbounds ([3 x i8], [3 x i8]* @string_const_data.29, i32 0, i32 0), i64 3 }>
@string_const_data.31 = private constant [3 x i8] c"sbs"
@string_const.32 = private global %string_descriptor <{ i8* getelementptr inbounds ([3 x i8], [3 x i8]* @string_const_data.31, i32 0, i32 0), i64 3 }>
@"ERROR STOP" = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %is_alpha = alloca i1, align 1
  %num = alloca %string_descriptor, align 8
  store %string_descriptor zeroinitializer, %string_descriptor* %num, align 1
  %2 = getelementptr %string_descriptor, %string_descriptor* %num, i32 0, i32 1
  store i64 3, i64* %2, align 4
  %3 = getelementptr %string_descriptor, %string_descriptor* %num, i32 0, i32 0
  %4 = call i8* @_lfortran_malloc(i64 3)
  store i8* %4, i8** %3, align 8
  %5 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %6 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %7 = call i32 @str_compare(i8* %5, i64 2, i8* %6, i64 1)
  %8 = icmp sge i32 %7, 0
  %9 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %10 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  %11 = call i32 @str_compare(i8* %9, i64 2, i8* %10, i64 1)
  %12 = icmp sle i32 %11, 0
  %13 = icmp eq i1 %8, false
  %14 = select i1 %13, i1 %8, i1 %12
  %15 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %16 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  %17 = call i32 @str_compare(i8* %15, i64 2, i8* %16, i64 1)
  %18 = icmp sge i32 %17, 0
  %19 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %20 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.6, i32 0, i32 0), align 8
  %21 = call i32 @str_compare(i8* %19, i64 2, i8* %20, i64 1)
  %22 = icmp sle i32 %21, 0
  %23 = icmp eq i1 %18, false
  %24 = select i1 %23, i1 %18, i1 %22
  %25 = icmp eq i1 %14, false
  %26 = select i1 %25, i1 %24, i1 %14
  store i1 %26, i1* %is_alpha, align 1
  %27 = alloca i64, align 8
  %28 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @serialization_info, i32 0, i32 0), i64* %27, i32 0, i32 0, i1* %is_alpha)
  %29 = load i64, i64* %27, align 4
  %stringFormat_desc = alloca %string_descriptor, align 8
  %30 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %28, i8** %30, align 8
  %31 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %29, i64* %31, align 4
  %32 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %35 = load i64, i64* %34, align 4
  %36 = trunc i64 %35 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %33, i32 %36, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  %37 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.8, i32 0, i32 0), align 8
  call void @_lfortran_strcpy(i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), i64* getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 1), i8 0, i8 0, i8* %37, i64 2)
  %38 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %39 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.10, i32 0, i32 0), align 8
  %40 = call i32 @str_compare(i8* %38, i64 2, i8* %39, i64 1)
  %41 = icmp sge i32 %40, 0
  %42 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %43 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.12, i32 0, i32 0), align 8
  %44 = call i32 @str_compare(i8* %42, i64 2, i8* %43, i64 1)
  %45 = icmp sle i32 %44, 0
  %46 = icmp eq i1 %41, false
  %47 = select i1 %46, i1 %41, i1 %45
  %48 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %49 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.14, i32 0, i32 0), align 8
  %50 = call i32 @str_compare(i8* %48, i64 2, i8* %49, i64 1)
  %51 = icmp sge i32 %50, 0
  %52 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %53 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.16, i32 0, i32 0), align 8
  %54 = call i32 @str_compare(i8* %52, i64 2, i8* %53, i64 1)
  %55 = icmp sle i32 %54, 0
  %56 = icmp eq i1 %51, false
  %57 = select i1 %56, i1 %51, i1 %55
  %58 = icmp eq i1 %47, false
  %59 = select i1 %58, i1 %57, i1 %47
  store i1 %59, i1* %is_alpha, align 1
  %60 = alloca i64, align 8
  %61 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @serialization_info.17, i32 0, i32 0), i64* %60, i32 0, i32 0, i1* %is_alpha)
  %62 = load i64, i64* %60, align 4
  %stringFormat_desc1 = alloca %string_descriptor, align 8
  %63 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  store i8* %61, i8** %63, align 8
  %64 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  store i64 %62, i64* %64, align 4
  %65 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  %68 = load i64, i64* %67, align 4
  %69 = trunc i64 %68 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %66, i32 %69, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  %70 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.19, i32 0, i32 0), align 8
  call void @_lfortran_strcpy(i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), i64* getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 1), i8 0, i8 0, i8* %70, i64 2)
  %71 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %72 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.21, i32 0, i32 0), align 8
  %73 = call i32 @str_compare(i8* %71, i64 2, i8* %72, i64 1)
  %74 = icmp sge i32 %73, 0
  %75 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %76 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.23, i32 0, i32 0), align 8
  %77 = call i32 @str_compare(i8* %75, i64 2, i8* %76, i64 1)
  %78 = icmp sle i32 %77, 0
  %79 = icmp eq i1 %74, false
  %80 = select i1 %79, i1 %74, i1 %78
  %81 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %82 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.25, i32 0, i32 0), align 8
  %83 = call i32 @str_compare(i8* %81, i64 2, i8* %82, i64 1)
  %84 = icmp sge i32 %83, 0
  %85 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %86 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.27, i32 0, i32 0), align 8
  %87 = call i32 @str_compare(i8* %85, i64 2, i8* %86, i64 1)
  %88 = icmp sle i32 %87, 0
  %89 = icmp eq i1 %84, false
  %90 = select i1 %89, i1 %84, i1 %88
  %91 = icmp eq i1 %80, false
  %92 = select i1 %91, i1 %90, i1 %80
  store i1 %92, i1* %is_alpha, align 1
  %93 = alloca i64, align 8
  %94 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @serialization_info.28, i32 0, i32 0), i64* %93, i32 0, i32 0, i1* %is_alpha)
  %95 = load i64, i64* %93, align 4
  %stringFormat_desc2 = alloca %string_descriptor, align 8
  %96 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  store i8* %94, i8** %96, align 8
  %97 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  store i64 %95, i64* %97, align 4
  %98 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  %99 = load i8*, i8** %98, align 8
  %100 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  %101 = load i64, i64* %100, align 4
  %102 = trunc i64 %101 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %99, i32 %102, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i32 1)
  %103 = getelementptr %string_descriptor, %string_descriptor* %num, i32 0, i32 0
  %104 = load i8*, i8** %103, align 8
  %StrSliceGEP = getelementptr i8, i8* %104, i64 0
  %StrSlice_StrView = alloca %string_descriptor, align 8
  %105 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView, i32 0, i32 0
  store i8* %StrSliceGEP, i8** %105, align 8
  %106 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView, i32 0, i32 1
  store i64 3, i64* %106, align 4
  %107 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView, i32 0, i32 0
  %108 = getelementptr %string_descriptor, %string_descriptor* %StrSlice_StrView, i32 0, i32 1
  %109 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.30, i32 0, i32 0), align 8
  call void @_lfortran_strcpy(i8** %107, i64* %108, i8 0, i8 0, i8* %109, i64 3)
  %110 = getelementptr %string_descriptor, %string_descriptor* %num, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  %112 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.32, i32 0, i32 0), align 8
  %113 = call i32 @str_compare(i8* %111, i64 3, i8* %112, i64 3)
  %114 = icmp ne i32 %113, 0
  br i1 %114, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i64)

declare i32 @str_compare(i8*, i64, i8*, i64)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare void @_lfortran_strcpy(i8**, i64*, i8, i8, i8*, i64)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
