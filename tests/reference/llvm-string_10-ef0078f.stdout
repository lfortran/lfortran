; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [3 x i8] c"BC\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@5 = private unnamed_addr constant [2 x i8] c" \00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@10 = private unnamed_addr constant [3 x i8] c"@a\00", align 1
@11 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@12 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@13 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@14 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@15 = private unnamed_addr constant [2 x i8] c" \00", align 1
@16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@17 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@18 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@19 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@20 = private unnamed_addr constant [3 x i8] c"a@\00", align 1
@21 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@22 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@23 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@24 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@25 = private unnamed_addr constant [2 x i8] c" \00", align 1
@26 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@27 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@28 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@29 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main() {
.entry:
  %c = alloca i8*, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0), i8** %c, align 8
  %is_alpha = alloca i1, align 1
  %0 = load i8*, i8** %c, align 8
  %1 = alloca i8*, align 8
  store i8* %0, i8** %1, align 8
  %2 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0), i8** %2, align 8
  %3 = call i1 @_lpython_str_compare_gte(i8** %1, i8** %2)
  %4 = load i8*, i8** %c, align 8
  %5 = alloca i8*, align 8
  store i8* %4, i8** %5, align 8
  %6 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i8** %6, align 8
  %7 = call i1 @_lpython_str_compare_lte(i8** %5, i8** %6)
  %8 = and i1 %3, %7
  %9 = load i8*, i8** %c, align 8
  %10 = alloca i8*, align 8
  store i8* %9, i8** %10, align 8
  %11 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), i8** %11, align 8
  %12 = call i1 @_lpython_str_compare_gte(i8** %10, i8** %11)
  %13 = load i8*, i8** %c, align 8
  %14 = alloca i8*, align 8
  store i8* %13, i8** %14, align 8
  %15 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i8** %15, align 8
  %16 = call i1 @_lpython_str_compare_lte(i8** %14, i8** %15)
  %17 = and i1 %12, %16
  %18 = or i1 %8, %17
  store i1 %18, i1* %is_alpha, align 1
  %19 = load i1, i1* %is_alpha, align 1
  %20 = icmp eq i1 %19, false
  %21 = select i1 %20, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @10, i32 0, i32 0), i8** %c, align 8
  %22 = load i8*, i8** %c, align 8
  %23 = alloca i8*, align 8
  store i8* %22, i8** %23, align 8
  %24 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i32 0, i32 0), i8** %24, align 8
  %25 = call i1 @_lpython_str_compare_gte(i8** %23, i8** %24)
  %26 = load i8*, i8** %c, align 8
  %27 = alloca i8*, align 8
  store i8* %26, i8** %27, align 8
  %28 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0), i8** %28, align 8
  %29 = call i1 @_lpython_str_compare_lte(i8** %27, i8** %28)
  %30 = and i1 %25, %29
  %31 = load i8*, i8** %c, align 8
  %32 = alloca i8*, align 8
  store i8* %31, i8** %32, align 8
  %33 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0), i8** %33, align 8
  %34 = call i1 @_lpython_str_compare_gte(i8** %32, i8** %33)
  %35 = load i8*, i8** %c, align 8
  %36 = alloca i8*, align 8
  store i8* %35, i8** %36, align 8
  %37 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i32 0, i32 0), i8** %37, align 8
  %38 = call i1 @_lpython_str_compare_lte(i8** %36, i8** %37)
  %39 = and i1 %34, %38
  %40 = or i1 %30, %39
  store i1 %40, i1* %is_alpha, align 1
  %41 = load i1, i1* %is_alpha, align 1
  %42 = icmp eq i1 %41, false
  %43 = select i1 %42, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @18, i32 0, i32 0)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @19, i32 0, i32 0), i8* %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i32 0, i32 0))
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @20, i32 0, i32 0), i8** %c, align 8
  %44 = load i8*, i8** %c, align 8
  %45 = alloca i8*, align 8
  store i8* %44, i8** %45, align 8
  %46 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @21, i32 0, i32 0), i8** %46, align 8
  %47 = call i1 @_lpython_str_compare_gte(i8** %45, i8** %46)
  %48 = load i8*, i8** %c, align 8
  %49 = alloca i8*, align 8
  store i8* %48, i8** %49, align 8
  %50 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @22, i32 0, i32 0), i8** %50, align 8
  %51 = call i1 @_lpython_str_compare_lte(i8** %49, i8** %50)
  %52 = and i1 %47, %51
  %53 = load i8*, i8** %c, align 8
  %54 = alloca i8*, align 8
  store i8* %53, i8** %54, align 8
  %55 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @23, i32 0, i32 0), i8** %55, align 8
  %56 = call i1 @_lpython_str_compare_gte(i8** %54, i8** %55)
  %57 = load i8*, i8** %c, align 8
  %58 = alloca i8*, align 8
  store i8* %57, i8** %58, align 8
  %59 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @24, i32 0, i32 0), i8** %59, align 8
  %60 = call i1 @_lpython_str_compare_lte(i8** %58, i8** %59)
  %61 = and i1 %56, %60
  %62 = or i1 %52, %61
  store i1 %62, i1* %is_alpha, align 1
  %63 = load i1, i1* %is_alpha, align 1
  %64 = icmp eq i1 %63, false
  %65 = select i1 %64, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @27, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @28, i32 0, i32 0)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @29, i32 0, i32 0), i8* %65, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @26, i32 0, i32 0))
  ret i32 0
}

declare i1 @_lpython_str_compare_gte(i8**, i8**)

declare i1 @_lpython_str_compare_lte(i8**, i8**)

declare void @_lfortran_printf(i8*, ...)
