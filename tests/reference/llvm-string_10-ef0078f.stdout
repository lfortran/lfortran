; ModuleID = 'LFortran'
source_filename = "LFortran"

@string_10.c = internal global i8* null
@0 = private unnamed_addr constant [3 x i8] c"BC\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@6 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@9 = private unnamed_addr constant [3 x i8] c"@a\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@11 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@12 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@13 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@15 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@16 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@17 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@18 = private unnamed_addr constant [3 x i8] c"a@\00", align 1
@19 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@20 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@21 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@22 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@23 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@24 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@25 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@26 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@27 = private unnamed_addr constant [4 x i8] c"sbs\00", align 1
@28 = private unnamed_addr constant [4 x i8] c"sbs\00", align 1
@29 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@30 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@31 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = call i8* @_lfortran_malloc(i32 3)
  call void @_lfortran_string_init(i32 3, i8* %2)
  store i8* %2, i8** @string_10.c, align 8
  call void @_lfortran_strcpy_pointer_string(i8** @string_10.c, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0))
  %3 = load i8*, i8** @string_10.c, align 8
  %is_alpha = alloca i1, align 1
  %num = alloca i8*, align 8
  %4 = call i8* @_lfortran_malloc(i32 4)
  call void @_lfortran_string_init(i32 4, i8* %4)
  store i8* %4, i8** %num, align 8
  %5 = load i8*, i8** @string_10.c, align 8
  %6 = alloca i8*, align 8
  store i8* %5, i8** %6, align 8
  %7 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0), i8** %7, align 8
  %8 = call i1 @_lpython_str_compare_gte(i8** %6, i8** %7)
  %9 = load i8*, i8** @string_10.c, align 8
  %10 = alloca i8*, align 8
  store i8* %9, i8** %10, align 8
  %11 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i8** %11, align 8
  %12 = call i1 @_lpython_str_compare_lte(i8** %10, i8** %11)
  %13 = icmp eq i1 %8, false
  %14 = select i1 %13, i1 %8, i1 %12
  %15 = load i8*, i8** @string_10.c, align 8
  %16 = alloca i8*, align 8
  store i8* %15, i8** %16, align 8
  %17 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), i8** %17, align 8
  %18 = call i1 @_lpython_str_compare_gte(i8** %16, i8** %17)
  %19 = load i8*, i8** @string_10.c, align 8
  %20 = alloca i8*, align 8
  store i8* %19, i8** %20, align 8
  %21 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i8** %21, align 8
  %22 = call i1 @_lpython_str_compare_lte(i8** %20, i8** %21)
  %23 = icmp eq i1 %18, false
  %24 = select i1 %23, i1 %18, i1 %22
  %25 = icmp eq i1 %14, false
  %26 = select i1 %25, i1 %24, i1 %14
  store i1 %26, i1* %is_alpha, align 1
  %27 = load i1, i1* %is_alpha, align 1
  %28 = icmp eq i1 %27, false
  %29 = select i1 %28, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0)
  %30 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 2, i8* null, i32 8, i8* %29)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* %30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  call void @_lfortran_strcpy_pointer_string(i8** @string_10.c, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @9, i32 0, i32 0))
  %31 = load i8*, i8** @string_10.c, align 8
  %32 = alloca i8*, align 8
  store i8* %31, i8** %32, align 8
  %33 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0), i8** %33, align 8
  %34 = call i1 @_lpython_str_compare_gte(i8** %32, i8** %33)
  %35 = load i8*, i8** @string_10.c, align 8
  %36 = alloca i8*, align 8
  store i8* %35, i8** %36, align 8
  %37 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i32 0, i32 0), i8** %37, align 8
  %38 = call i1 @_lpython_str_compare_lte(i8** %36, i8** %37)
  %39 = icmp eq i1 %34, false
  %40 = select i1 %39, i1 %34, i1 %38
  %41 = load i8*, i8** @string_10.c, align 8
  %42 = alloca i8*, align 8
  store i8* %41, i8** %42, align 8
  %43 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0), i8** %43, align 8
  %44 = call i1 @_lpython_str_compare_gte(i8** %42, i8** %43)
  %45 = load i8*, i8** @string_10.c, align 8
  %46 = alloca i8*, align 8
  store i8* %45, i8** %46, align 8
  %47 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0), i8** %47, align 8
  %48 = call i1 @_lpython_str_compare_lte(i8** %46, i8** %47)
  %49 = icmp eq i1 %44, false
  %50 = select i1 %49, i1 %44, i1 %48
  %51 = icmp eq i1 %40, false
  %52 = select i1 %51, i1 %50, i1 %40
  store i1 %52, i1* %is_alpha, align 1
  %53 = load i1, i1* %is_alpha, align 1
  %54 = icmp eq i1 %53, false
  %55 = select i1 %54, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @16, i32 0, i32 0)
  %56 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 2, i8* null, i32 8, i8* %55)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i32 0, i32 0), i8* %56, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i32 0, i32 0))
  call void @_lfortran_strcpy_pointer_string(i8** @string_10.c, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @18, i32 0, i32 0))
  %57 = load i8*, i8** @string_10.c, align 8
  %58 = alloca i8*, align 8
  store i8* %57, i8** %58, align 8
  %59 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i32 0, i32 0), i8** %59, align 8
  %60 = call i1 @_lpython_str_compare_gte(i8** %58, i8** %59)
  %61 = load i8*, i8** @string_10.c, align 8
  %62 = alloca i8*, align 8
  store i8* %61, i8** %62, align 8
  %63 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @20, i32 0, i32 0), i8** %63, align 8
  %64 = call i1 @_lpython_str_compare_lte(i8** %62, i8** %63)
  %65 = icmp eq i1 %60, false
  %66 = select i1 %65, i1 %60, i1 %64
  %67 = load i8*, i8** @string_10.c, align 8
  %68 = alloca i8*, align 8
  store i8* %67, i8** %68, align 8
  %69 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @21, i32 0, i32 0), i8** %69, align 8
  %70 = call i1 @_lpython_str_compare_gte(i8** %68, i8** %69)
  %71 = load i8*, i8** @string_10.c, align 8
  %72 = alloca i8*, align 8
  store i8* %71, i8** %72, align 8
  %73 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @22, i32 0, i32 0), i8** %73, align 8
  %74 = call i1 @_lpython_str_compare_lte(i8** %72, i8** %73)
  %75 = icmp eq i1 %70, false
  %76 = select i1 %75, i1 %70, i1 %74
  %77 = icmp eq i1 %66, false
  %78 = select i1 %77, i1 %76, i1 %66
  store i1 %78, i1* %is_alpha, align 1
  %79 = load i1, i1* %is_alpha, align 1
  %80 = icmp eq i1 %79, false
  %81 = select i1 %80, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @24, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @25, i32 0, i32 0)
  %82 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 2, i8* null, i32 8, i8* %81)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @26, i32 0, i32 0), i8* %82, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @23, i32 0, i32 0))
  %83 = load i8*, i8** %num, align 8
  %84 = call i8* @_lfortran_str_slice_assign(i8* %83, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @27, i32 0, i32 0), i32 0, i32 3, i32 1, i1 true, i1 true)
  call void @_lfortran_strcpy_pointer_string(i8** %num, i8* %84)
  %85 = load i8*, i8** %num, align 8
  %86 = alloca i8*, align 8
  store i8* %85, i8** %86, align 8
  %87 = alloca i8*, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @28, i32 0, i32 0), i8** %87, align 8
  %88 = call i1 @_lpython_str_compare_noteq(i8** %86, i8** %87)
  br i1 %88, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @29, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @30, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  call void @_lfortran_free(i8* %3)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i32)

declare void @_lfortran_string_init(i32, i8*)

declare void @_lfortran_strcpy_pointer_string(i8**, i8*)

declare i1 @_lpython_str_compare_gte(i8**, i8**)

declare i1 @_lpython_str_compare_lte(i8**, i8**)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)

declare i8* @_lfortran_str_slice_assign(i8*, i8*, i32, i32, i32, i1, i1)

declare i1 @_lpython_str_compare_noteq(i8**, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lfortran_free(i8*)

declare void @_lpython_free_argv()
