; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@c_data = private global [3 x i8] c"BC\00"
@c = private global %string_descriptor <{ i8* getelementptr inbounds ([3 x i8], [3 x i8]* @c_data, i32 0, i32 0), i64 2 }>
@string_const_data = private constant [2 x i8] c"A\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data, i32 0, i32 0), i64 1 }>
@string_const_data.1 = private constant [2 x i8] c"Z\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.1, i32 0, i32 0), i64 1 }>
@string_const_data.3 = private constant [2 x i8] c"a\00"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.3, i32 0, i32 0), i64 1 }>
@string_const_data.5 = private constant [2 x i8] c"z\00"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.5, i32 0, i32 0), i64 1 }>
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [2 x i8] c"L\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.7 = private constant [3 x i8] c"@a\00"
@string_const.8 = private global %string_descriptor <{ i8* getelementptr inbounds ([3 x i8], [3 x i8]* @string_const_data.7, i32 0, i32 0), i64 2 }>
@string_const_data.9 = private constant [2 x i8] c"A\00"
@string_const.10 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.9, i32 0, i32 0), i64 1 }>
@string_const_data.11 = private constant [2 x i8] c"Z\00"
@string_const.12 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.11, i32 0, i32 0), i64 1 }>
@string_const_data.13 = private constant [2 x i8] c"a\00"
@string_const.14 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.13, i32 0, i32 0), i64 1 }>
@string_const_data.15 = private constant [2 x i8] c"z\00"
@string_const.16 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.15, i32 0, i32 0), i64 1 }>
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.17 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.18 = private constant [3 x i8] c"a@\00"
@string_const.19 = private global %string_descriptor <{ i8* getelementptr inbounds ([3 x i8], [3 x i8]* @string_const_data.18, i32 0, i32 0), i64 2 }>
@string_const_data.20 = private constant [2 x i8] c"A\00"
@string_const.21 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.20, i32 0, i32 0), i64 1 }>
@string_const_data.22 = private constant [2 x i8] c"Z\00"
@string_const.23 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.22, i32 0, i32 0), i64 1 }>
@string_const_data.24 = private constant [2 x i8] c"a\00"
@string_const.25 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.24, i32 0, i32 0), i64 1 }>
@string_const_data.26 = private constant [2 x i8] c"z\00"
@string_const.27 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.26, i32 0, i32 0), i64 1 }>
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.28 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.29 = private constant [4 x i8] c"sbs\00"
@string_const.30 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.29, i32 0, i32 0), i64 3 }>
@string_const_data.31 = private constant [4 x i8] c"sbs\00"
@string_const.32 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.31, i32 0, i32 0), i64 3 }>
@string_const_data.33 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.34 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.33, i32 0, i32 0), i64 10 }>
@string_const_data.35 = private constant [2 x i8] c"\0A\00"
@string_const.36 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.35, i32 0, i32 0), i64 1 }>
@6 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %is_alpha = alloca i1, align 1
  %2 = call i8* @_lfortran_malloc(i64 16)
  %num = bitcast i8* %2 to %string_descriptor*
  store %string_descriptor zeroinitializer, %string_descriptor* %num, align 1
  %3 = getelementptr %string_descriptor, %string_descriptor* %num, i32 0, i32 1
  store i64 3, i64* %3, align 4
  %4 = getelementptr %string_descriptor, %string_descriptor* %num, i32 0, i32 0
  %5 = call i8* @_lfortran_malloc(i64 4)
  call void @_lfortran_string_init(i64 4, i8* %5)
  store i8* %5, i8** %4, align 8
  %6 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %7 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %8 = call i32 @str_compare(i8* %6, i64 2, i8* %7, i64 1)
  %9 = icmp sge i32 %8, 0
  %10 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %11 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  %12 = call i32 @str_compare(i8* %10, i64 2, i8* %11, i64 1)
  %13 = icmp sle i32 %12, 0
  %14 = icmp eq i1 %9, false
  %15 = select i1 %14, i1 %9, i1 %13
  %16 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %17 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  %18 = call i32 @str_compare(i8* %16, i64 2, i8* %17, i64 1)
  %19 = icmp sge i32 %18, 0
  %20 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %21 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.6, i32 0, i32 0), align 8
  %22 = call i32 @str_compare(i8* %20, i64 2, i8* %21, i64 1)
  %23 = icmp sle i32 %22, 0
  %24 = icmp eq i1 %19, false
  %25 = select i1 %24, i1 %19, i1 %23
  %26 = icmp eq i1 %15, false
  %27 = select i1 %26, i1 %25, i1 %15
  store i1 %27, i1* %is_alpha, align 1
  %28 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i1* %is_alpha)
  %29 = call i64 @_lfortran_str_len(i8* %28)
  %30 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %30 to %string_descriptor*
  %31 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %28, i8** %31, align 8
  %32 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %29, i64* %32, align 4
  %33 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %36 = load i64, i64* %35, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %34, i64 %36, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i64 1)
  %37 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.8, i32 0, i32 0), align 8
  call void @_lfortran_strcpy(i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), i64* getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 1), i8 0, i8 0, i8* %37, i64 2)
  %38 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %39 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.10, i32 0, i32 0), align 8
  %40 = call i32 @str_compare(i8* %38, i64 2, i8* %39, i64 1)
  %41 = icmp sge i32 %40, 0
  %42 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %43 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.12, i32 0, i32 0), align 8
  %44 = call i32 @str_compare(i8* %42, i64 2, i8* %43, i64 1)
  %45 = icmp sle i32 %44, 0
  %46 = icmp eq i1 %41, false
  %47 = select i1 %46, i1 %41, i1 %45
  %48 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %49 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.14, i32 0, i32 0), align 8
  %50 = call i32 @str_compare(i8* %48, i64 2, i8* %49, i64 1)
  %51 = icmp sge i32 %50, 0
  %52 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %53 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.16, i32 0, i32 0), align 8
  %54 = call i32 @str_compare(i8* %52, i64 2, i8* %53, i64 1)
  %55 = icmp sle i32 %54, 0
  %56 = icmp eq i1 %51, false
  %57 = select i1 %56, i1 %51, i1 %55
  %58 = icmp eq i1 %47, false
  %59 = select i1 %58, i1 %57, i1 %47
  store i1 %59, i1* %is_alpha, align 1
  %60 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @serialization_info.17, i32 0, i32 0), i32 0, i32 0, i1* %is_alpha)
  %61 = call i64 @_lfortran_str_len(i8* %60)
  %62 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc1 = bitcast i8* %62 to %string_descriptor*
  %63 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  store i8* %60, i8** %63, align 8
  %64 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  store i64 %61, i64* %64, align 4
  %65 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  %68 = load i64, i64* %67, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %66, i64 %68, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i64 1)
  %69 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.19, i32 0, i32 0), align 8
  call void @_lfortran_strcpy(i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), i64* getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 1), i8 0, i8 0, i8* %69, i64 2)
  %70 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %71 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.21, i32 0, i32 0), align 8
  %72 = call i32 @str_compare(i8* %70, i64 2, i8* %71, i64 1)
  %73 = icmp sge i32 %72, 0
  %74 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %75 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.23, i32 0, i32 0), align 8
  %76 = call i32 @str_compare(i8* %74, i64 2, i8* %75, i64 1)
  %77 = icmp sle i32 %76, 0
  %78 = icmp eq i1 %73, false
  %79 = select i1 %78, i1 %73, i1 %77
  %80 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %81 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.25, i32 0, i32 0), align 8
  %82 = call i32 @str_compare(i8* %80, i64 2, i8* %81, i64 1)
  %83 = icmp sge i32 %82, 0
  %84 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @c, i32 0, i32 0), align 8
  %85 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.27, i32 0, i32 0), align 8
  %86 = call i32 @str_compare(i8* %84, i64 2, i8* %85, i64 1)
  %87 = icmp sle i32 %86, 0
  %88 = icmp eq i1 %83, false
  %89 = select i1 %88, i1 %83, i1 %87
  %90 = icmp eq i1 %79, false
  %91 = select i1 %90, i1 %89, i1 %79
  store i1 %91, i1* %is_alpha, align 1
  %92 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @serialization_info.28, i32 0, i32 0), i32 0, i32 0, i1* %is_alpha)
  %93 = call i64 @_lfortran_str_len(i8* %92)
  %94 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc2 = bitcast i8* %94 to %string_descriptor*
  %95 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  store i8* %92, i8** %95, align 8
  %96 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  store i64 %93, i64* %96, align 4
  %97 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  %100 = load i64, i64* %99, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %98, i64 %100, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i64 1)
  %101 = getelementptr %string_descriptor, %string_descriptor* %num, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.30, i32 0, i32 0), align 8
  %104 = call i8* @_lfortran_str_slice_assign(i8* %102, i64 3, i8* %103, i64 3, i32 1, i32 3, i32 1, i1 true, i1 true)
  %105 = getelementptr %string_descriptor, %string_descriptor* %num, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %104, i64 3, i1 false)
  %107 = getelementptr %string_descriptor, %string_descriptor* %num, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  %109 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.32, i32 0, i32 0), align 8
  %110 = call i32 @str_compare(i8* %108, i64 3, i8* %109, i64 3)
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %then, label %else

then:                                             ; preds = %.entry
  %112 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.34, i32 0, i32 0), align 8
  %113 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.36, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i8* %112, i8* %113)
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_string_init(i64, i8*)

declare i32 @str_compare(i8*, i64, i8*, i64)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare void @_lfortran_printf(i8*, i8*, i64, i8*, i64)

declare void @_lfortran_strcpy(i8**, i64*, i8, i8, i8*, i64)

declare i8* @_lfortran_str_slice_assign(i8*, i64, i8*, i64, i32, i32, i32, i1, i1)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()

attributes #0 = { argmemonly nounwind willreturn }
