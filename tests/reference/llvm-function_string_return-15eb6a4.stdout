; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [11 x i8] c"Hello12345\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @__module_function_string_return_mod_ff(i8** %r) {
.entry:
  call void @_lfortran_strcpy_pointer_string(i8** %r, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_strcpy_pointer_string(i8**, i8*)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %__libasr__created__var__0__func_call_res = alloca i8*, align 8
  %2 = call i8* @_lfortran_malloc(i32 11)
  call void @_lfortran_string_init(i32 11, i8* %2)
  store i8* %2, i8** %__libasr__created__var__0__func_call_res, align 8
  %3 = load i8*, i8** %__libasr__created__var__0__func_call_res, align 8
  %my_string = alloca i8*, align 8
  %4 = call i8* @_lfortran_malloc(i32 11)
  call void @_lfortran_string_init(i32 11, i8* %4)
  store i8* %4, i8** %my_string, align 8
  %5 = load i8*, i8** %my_string, align 8
  call void @__module_function_string_return_mod_ff(i8** %__libasr__created__var__0__func_call_res)
  %6 = load i8*, i8** %__libasr__created__var__0__func_call_res, align 8
  call void @_lfortran_strcpy_pointer_string(i8** %my_string, i8* %6)
  %7 = load i8*, i8** %my_string, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i32)

declare void @_lfortran_string_init(i32, i8*)

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_free_argv()
