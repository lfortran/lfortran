; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@string_const_data = private constant [11 x i8] c"ERROR STOP\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data, i32 0, i32 0), i64 10 }>
@string_const_data.1 = private constant [2 x i8] c"\0A\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.1, i32 0, i32 0), i64 1 }>
@0 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.3 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.3, i32 0, i32 0), i64 10 }>
@string_const_data.5 = private constant [2 x i8] c"\0A\00"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.5, i32 0, i32 0), i64 1 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.7 = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.8 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.9 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.8, i32 0, i32 0), i64 10 }>
@string_const_data.10 = private constant [2 x i8] c"\0A\00"
@string_const.11 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.10, i32 0, i32 0), i64 1 }>
@6 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.12 = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %a1 = alloca i32, align 4
  %b2 = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j4 = alloca i32, align 4
  store i32 0, i32* %j4, align 4
  store i32 1, i32* %a1, align 4
  store i32 10, i32* %b2, align 4
  %2 = load i32, i32* %a1, align 4
  %3 = sub i32 %2, 1
  store i32 %3, i32* %i3, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %4 = load i32, i32* %i3, align 4
  %5 = add i32 %4, 1
  %6 = load i32, i32* %b2, align 4
  %7 = icmp sle i32 %5, %6
  br i1 %7, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %8 = load i32, i32* %i3, align 4
  %9 = add i32 %8, 1
  store i32 %9, i32* %i3, align 4
  %10 = load i32, i32* %j4, align 4
  %11 = load i32, i32* %i3, align 4
  %12 = add i32 %10, %11
  store i32 %12, i32* %j4, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %13 = load i32, i32* %j4, align 4
  %14 = icmp ne i32 %13, 55
  br i1 %14, label %then, label %else

then:                                             ; preds = %loop.end
  %15 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %16 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i8* %15, i8* %16)
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %17 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i32* %j4)
  %18 = call i64 @_lfortran_str_len(i8* %17)
  %19 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %19 to %string_descriptor*
  %20 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %17, i8** %20, align 8
  %21 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %18, i64* %21, align 4
  %22 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  store i32 0, i32* %a1, align 4
  store i32 0, i32* %i3, align 4
  br label %loop.head5

loop.head5:                                       ; preds = %loop.end9, %ifcont
  %24 = load i32, i32* %i3, align 4
  %25 = add i32 %24, 1
  %26 = icmp sle i32 %25, 10
  br i1 %26, label %loop.body6, label %loop.end10

loop.body6:                                       ; preds = %loop.head5
  %27 = load i32, i32* %i3, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %i3, align 4
  store i32 0, i32* %j4, align 4
  br label %loop.head7

loop.head7:                                       ; preds = %loop.body8, %loop.body6
  %29 = load i32, i32* %j4, align 4
  %30 = add i32 %29, 1
  %31 = icmp sle i32 %30, 10
  br i1 %31, label %loop.body8, label %loop.end9

loop.body8:                                       ; preds = %loop.head7
  %32 = load i32, i32* %j4, align 4
  %33 = add i32 %32, 1
  store i32 %33, i32* %j4, align 4
  %34 = load i32, i32* %a1, align 4
  %35 = load i32, i32* %i3, align 4
  %36 = sub i32 %35, 1
  %37 = mul i32 %36, 10
  %38 = add i32 %34, %37
  %39 = load i32, i32* %j4, align 4
  %40 = add i32 %38, %39
  store i32 %40, i32* %a1, align 4
  br label %loop.head7

loop.end9:                                        ; preds = %loop.head7
  br label %loop.head5

loop.end10:                                       ; preds = %loop.head5
  %41 = load i32, i32* %a1, align 4
  %42 = icmp ne i32 %41, 5050
  br i1 %42, label %then11, label %else12

then11:                                           ; preds = %loop.end10
  %43 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  %44 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.6, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %43, i8* %44)
  call void @exit(i32 1)
  br label %ifcont13

else12:                                           ; preds = %loop.end10
  br label %ifcont13

ifcont13:                                         ; preds = %else12, %then11
  %45 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.7, i32 0, i32 0), i32 0, i32 0, i32* %a1)
  %46 = call i64 @_lfortran_str_len(i8* %45)
  %47 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc14 = bitcast i8* %47 to %string_descriptor*
  %48 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc14, i32 0, i32 0
  store i8* %45, i8** %48, align 8
  %49 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc14, i32 0, i32 1
  store i64 %46, i64* %49, align 4
  %50 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc14, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  store i32 0, i32* %a1, align 4
  store i32 0, i32* %i3, align 4
  br label %loop.head15

loop.head15:                                      ; preds = %loop.end19, %ifcont13
  %52 = load i32, i32* %i3, align 4
  %53 = add i32 %52, 1
  %54 = icmp sle i32 %53, 10
  br i1 %54, label %loop.body16, label %loop.end20

loop.body16:                                      ; preds = %loop.head15
  %55 = load i32, i32* %i3, align 4
  %56 = add i32 %55, 1
  store i32 %56, i32* %i3, align 4
  store i32 0, i32* %j4, align 4
  br label %loop.head17

loop.head17:                                      ; preds = %loop.body18, %loop.body16
  %57 = load i32, i32* %j4, align 4
  %58 = add i32 %57, 1
  %59 = load i32, i32* %i3, align 4
  %60 = icmp sle i32 %58, %59
  br i1 %60, label %loop.body18, label %loop.end19

loop.body18:                                      ; preds = %loop.head17
  %61 = load i32, i32* %j4, align 4
  %62 = add i32 %61, 1
  store i32 %62, i32* %j4, align 4
  %63 = load i32, i32* %a1, align 4
  %64 = load i32, i32* %j4, align 4
  %65 = add i32 %63, %64
  store i32 %65, i32* %a1, align 4
  br label %loop.head17

loop.end19:                                       ; preds = %loop.head17
  br label %loop.head15

loop.end20:                                       ; preds = %loop.head15
  %66 = load i32, i32* %a1, align 4
  %67 = icmp ne i32 %66, 220
  br i1 %67, label %then21, label %else22

then21:                                           ; preds = %loop.end20
  %68 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.9, i32 0, i32 0), align 8
  %69 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.11, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i8* %68, i8* %69)
  call void @exit(i32 1)
  br label %ifcont23

else22:                                           ; preds = %loop.end20
  br label %ifcont23

ifcont23:                                         ; preds = %else22, %then21
  %70 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.12, i32 0, i32 0), i32 0, i32 0, i32* %a1)
  %71 = call i64 @_lfortran_str_len(i8* %70)
  %72 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc24 = bitcast i8* %72 to %string_descriptor*
  %73 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc24, i32 0, i32 0
  store i8* %70, i8** %73, align 8
  %74 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc24, i32 0, i32 1
  store i64 %71, i64* %74, align 4
  %75 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc24, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* %76, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont23
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_free_argv()
