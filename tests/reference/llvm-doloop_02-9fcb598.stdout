; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@5 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@10 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@12 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.2 = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %a1 = alloca i32, align 4
  %b2 = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j4 = alloca i32, align 4
  store i32 0, i32* %j4, align 4
  store i32 1, i32* %a1, align 4
  store i32 10, i32* %b2, align 4
  %2 = load i32, i32* %a1, align 4
  store i32 %2, i32* %i3, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %3 = load i32, i32* %i3, align 4
  %4 = load i32, i32* %b2, align 4
  %5 = icmp sle i32 %3, %4
  br i1 %5, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %6 = load i32, i32* %j4, align 4
  %7 = load i32, i32* %i3, align 4
  %8 = add i32 %6, %7
  store i32 %8, i32* %j4, align 4
  %9 = load i32, i32* %i3, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %i3, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %11 = load i32, i32* %j4, align 4
  %12 = icmp ne i32 %11, 55
  br i1 %12, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %13 = call i8* (i8*, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i32* %j4)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i8* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  store i32 0, i32* %a1, align 4
  store i32 1, i32* %i3, align 4
  br label %loop.head5

loop.head5:                                       ; preds = %loop.end9, %ifcont
  %14 = load i32, i32* %i3, align 4
  %15 = icmp sle i32 %14, 10
  br i1 %15, label %loop.body6, label %loop.end10

loop.body6:                                       ; preds = %loop.head5
  store i32 1, i32* %j4, align 4
  br label %loop.head7

loop.head7:                                       ; preds = %loop.body8, %loop.body6
  %16 = load i32, i32* %j4, align 4
  %17 = icmp sle i32 %16, 10
  br i1 %17, label %loop.body8, label %loop.end9

loop.body8:                                       ; preds = %loop.head7
  %18 = load i32, i32* %a1, align 4
  %19 = load i32, i32* %i3, align 4
  %20 = sub i32 %19, 1
  %21 = mul i32 %20, 10
  %22 = add i32 %18, %21
  %23 = load i32, i32* %j4, align 4
  %24 = add i32 %22, %23
  store i32 %24, i32* %a1, align 4
  %25 = load i32, i32* %j4, align 4
  %26 = add i32 %25, 1
  store i32 %26, i32* %j4, align 4
  br label %loop.head7

loop.end9:                                        ; preds = %loop.head7
  %27 = load i32, i32* %i3, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %i3, align 4
  br label %loop.head5

loop.end10:                                       ; preds = %loop.head5
  %29 = load i32, i32* %a1, align 4
  %30 = icmp ne i32 %29, 5050
  br i1 %30, label %then11, label %else12

then11:                                           ; preds = %loop.end10
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont13

else12:                                           ; preds = %loop.end10
  br label %ifcont13

ifcont13:                                         ; preds = %else12, %then11
  %31 = call i8* (i8*, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.1, i32 0, i32 0), i32 0, i32 0, i32* %a1)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0))
  store i32 0, i32* %a1, align 4
  store i32 1, i32* %i3, align 4
  br label %loop.head14

loop.head14:                                      ; preds = %loop.end18, %ifcont13
  %32 = load i32, i32* %i3, align 4
  %33 = icmp sle i32 %32, 10
  br i1 %33, label %loop.body15, label %loop.end19

loop.body15:                                      ; preds = %loop.head14
  store i32 1, i32* %j4, align 4
  br label %loop.head16

loop.head16:                                      ; preds = %loop.body17, %loop.body15
  %34 = load i32, i32* %j4, align 4
  %35 = load i32, i32* %i3, align 4
  %36 = icmp sle i32 %34, %35
  br i1 %36, label %loop.body17, label %loop.end18

loop.body17:                                      ; preds = %loop.head16
  %37 = load i32, i32* %a1, align 4
  %38 = load i32, i32* %j4, align 4
  %39 = add i32 %37, %38
  store i32 %39, i32* %a1, align 4
  %40 = load i32, i32* %j4, align 4
  %41 = add i32 %40, 1
  store i32 %41, i32* %j4, align 4
  br label %loop.head16

loop.end18:                                       ; preds = %loop.head16
  %42 = load i32, i32* %i3, align 4
  %43 = add i32 %42, 1
  store i32 %43, i32* %i3, align 4
  br label %loop.head14

loop.end19:                                       ; preds = %loop.head14
  %44 = load i32, i32* %a1, align 4
  %45 = icmp ne i32 %44, 220
  br i1 %45, label %then20, label %else21

then20:                                           ; preds = %loop.end19
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont22

else21:                                           ; preds = %loop.end19
  br label %ifcont22

ifcont22:                                         ; preds = %else21, %then20
  %46 = call i8* (i8*, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.2, i32 0, i32 0), i32 0, i32 0, i32* %a1)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @14, i32 0, i32 0), i8* %46, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont22
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare i8* @_lcompilers_string_format_fortran(i8*, i8*, i32, i32, ...)

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_free_argv()
