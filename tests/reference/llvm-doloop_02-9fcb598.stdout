; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@6 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@9 = private unnamed_addr constant [2 x i8] c" \00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@12 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@14 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@15 = private unnamed_addr constant [2 x i8] c" \00", align 1
@16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@17 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %j, align 4
  store i32 1, i32* %a, align 4
  store i32 10, i32* %b, align 4
  %2 = load i32, i32* %a, align 4
  store i32 %2, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %b, align 4
  %5 = icmp sle i32 %3, %4
  br i1 %5, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %i, align 4
  %8 = add i32 %6, %7
  store i32 %8, i32* %j, align 4
  %9 = load i32, i32* %i, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %i, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %11 = load i32, i32* %j, align 4
  %12 = icmp ne i32 %11, 55
  br i1 %12, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %13 = load i32, i32* %j, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i32 %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  store i32 0, i32* %a, align 4
  store i32 1, i32* %i, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %loop.end5, %ifcont
  %14 = load i32, i32* %i, align 4
  %15 = icmp sle i32 %14, 10
  br i1 %15, label %loop.body2, label %loop.end6

loop.body2:                                       ; preds = %loop.head1
  store i32 1, i32* %j, align 4
  br label %loop.head3

loop.head3:                                       ; preds = %loop.body4, %loop.body2
  %16 = load i32, i32* %j, align 4
  %17 = icmp sle i32 %16, 10
  br i1 %17, label %loop.body4, label %loop.end5

loop.body4:                                       ; preds = %loop.head3
  %18 = load i32, i32* %a, align 4
  %19 = load i32, i32* %i, align 4
  %20 = sub i32 %19, 1
  %21 = mul i32 %20, 10
  %22 = add i32 %18, %21
  %23 = load i32, i32* %j, align 4
  %24 = add i32 %22, %23
  store i32 %24, i32* %a, align 4
  %25 = load i32, i32* %j, align 4
  %26 = add i32 %25, 1
  store i32 %26, i32* %j, align 4
  br label %loop.head3

loop.end5:                                        ; preds = %loop.head3
  %27 = load i32, i32* %i, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %i, align 4
  br label %loop.head1

loop.end6:                                        ; preds = %loop.head1
  %29 = load i32, i32* %a, align 4
  %30 = icmp ne i32 %29, 5050
  br i1 %30, label %then7, label %else8

then7:                                            ; preds = %loop.end6
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont9

else8:                                            ; preds = %loop.end6
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %31 = load i32, i32* %a, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i32 %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  store i32 0, i32* %a, align 4
  store i32 1, i32* %i, align 4
  br label %loop.head10

loop.head10:                                      ; preds = %loop.end14, %ifcont9
  %32 = load i32, i32* %i, align 4
  %33 = icmp sle i32 %32, 10
  br i1 %33, label %loop.body11, label %loop.end15

loop.body11:                                      ; preds = %loop.head10
  store i32 1, i32* %j, align 4
  br label %loop.head12

loop.head12:                                      ; preds = %loop.body13, %loop.body11
  %34 = load i32, i32* %j, align 4
  %35 = load i32, i32* %i, align 4
  %36 = icmp sle i32 %34, %35
  br i1 %36, label %loop.body13, label %loop.end14

loop.body13:                                      ; preds = %loop.head12
  %37 = load i32, i32* %a, align 4
  %38 = load i32, i32* %j, align 4
  %39 = add i32 %37, %38
  store i32 %39, i32* %a, align 4
  %40 = load i32, i32* %j, align 4
  %41 = add i32 %40, 1
  store i32 %41, i32* %j, align 4
  br label %loop.head12

loop.end14:                                       ; preds = %loop.head12
  %42 = load i32, i32* %i, align 4
  %43 = add i32 %42, 1
  store i32 %43, i32* %i, align 4
  br label %loop.head10

loop.end15:                                       ; preds = %loop.head10
  %44 = load i32, i32* %a, align 4
  %45 = icmp ne i32 %44, 220
  br i1 %45, label %then16, label %else17

then16:                                           ; preds = %loop.end15
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @14, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont18

else17:                                           ; preds = %loop.end15
  br label %ifcont18

ifcont18:                                         ; preds = %else17, %then16
  %46 = load i32, i32* %a, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i32 0, i32 0), i32 %46, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lfortran_printf(i8*, ...)
