#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

// Forward declarations
namespace {
float func1(float a, float b);
float func2(float a, float b);
}

// Implementations
namespace {
float func1(float a, float b)
{
    float c;
    c = a + b;
    c = func2(c, c);
    return c;
}

float func2(float a, float b)
{
    float c;
    c = a*b;
    return c;
}


void main2() {
    float x;
    float y;
    float z;
    x =   5.00000000000000000e+00;
    y =   2.00000000000000000e+00;
    z = x*y;
    std::cout << "10.0 ==" << " " << z << std::endl;
    z = func1(x, y);
    std::cout << "49.0 ==" << " " << z << std::endl;
    z = func2(x, y);
    std::cout << "10.0 ==" << " " << z << std::endl;
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
