; ModuleID = 'LFortran'
source_filename = "LFortran"

%sub1_nstd_types = type { i32* }
%sub1_vals = type { i32 }

@n = global i32 0
@sub1_nstd_strct = global %sub1_nstd_types zeroinitializer
@sub1_nstd_strct_stack = global [1000 x %sub1_vals] zeroinitializer
@sp_sub1 = global i32 0
@x = global i32 0
@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"x = \00", align 1
@6 = private unnamed_addr constant [9 x i8] c"%s%s%d%s\00", align 1

define void @__module_recursion_01_sub1(i32* %x) {
.entry:
  store i32* %x, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  %0 = load i32, i32* %x, align 4
  %1 = load i32, i32* @n, align 4
  %2 = icmp slt i32 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load i32, i32* %x, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %x, align 4
  store i32* %x, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  %5 = load i32, i32* %x, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), i32 %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @__module_recursion_01_sub2()
  call void @__module_recursion_01_sub1(i32* %x)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void
}

define void @__module_recursion_01_sub2() {
.entry:
  %0 = load i32*, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  %1 = load i32*, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  %2 = load i32, i32* %1, align 4
  %3 = add i32 %2, 1
  store i32 %3, i32* %0, align 4
  store i32* %0, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  %4 = load i32*, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %6 = load i32*, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  call void @__module_recursion_01_sub1(i32* %6)
  %7 = load i32, i32* @sp_sub1, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %decrement_sp, label %normal_continue

decrement_sp:                                     ; preds = %.entry
  %9 = add i32 -1, %7
  store i32 %9, i32* @sp_sub1, align 4
  %10 = load i32, i32* @sp_sub1, align 4
  %11 = getelementptr [1000 x %sub1_vals], [1000 x %sub1_vals]* @sub1_nstd_strct_stack, i32 0, i32 %10
  %12 = getelementptr %sub1_vals, %sub1_vals* %11, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  store i32 %13, i32* %14, align 4
  store i32* %14, i32** getelementptr inbounds (%sub1_nstd_types, %sub1_nstd_types* @sub1_nstd_strct, i32 0, i32 0), align 8
  br label %normal_continue

normal_continue:                                  ; preds = %decrement_sp, %.entry
  br label %return

return:                                           ; preds = %normal_continue
  ret void
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main() {
.entry:
  store i32 10, i32* @n, align 4
  call void @__module_recursion_01_sub1(i32* @x)
  ret i32 0
}
