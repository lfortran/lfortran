; ModuleID = 'LFortran'
source_filename = "LFortran"

%abstype = type <{ i32 (...)** }>

@_Name_abstype = private unnamed_addr constant [8 x i8] c"abstype\00", align 1
@_Type_Info_abstype = linkonce_odr unnamed_addr constant { i8* } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @_Name_abstype, i32 0, i32 0) }, align 8
@_VTable_abstype = linkonce_odr unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8* }* @_Type_Info_abstype to i8*), i8* bitcast (void (i8*, i8*)* @_copy_codegen_function_polymorphic_abstype to i8*)] }, align 8

define void @__module_codegen_function_polymorphic_my_func(%abstype** %obj) {
.entry:
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define linkonce_odr void @_copy_codegen_function_polymorphic_abstype(i8* %0, i8* %1) {
entry:
  %2 = bitcast i8* %0 to %abstype*
  %3 = bitcast i8* %1 to %abstype*
  %4 = bitcast %abstype* %3 to i32 (...)***
  %5 = load i32 (...)**, i32 (...)*** %4, align 8
  %6 = bitcast %abstype* %2 to i32 (...)***
  store i32 (...)** %5, i32 (...)*** %6, align 8
  %7 = bitcast %abstype* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_VTable_abstype, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %7, align 8
  ret void
}
