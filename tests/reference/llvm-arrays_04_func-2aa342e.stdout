; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { float*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [4 x i8] c"abs\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@6 = private unnamed_addr constant [4 x i8] c"sum\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define float @abs(float* %a) {
.entry:
  %r = alloca float, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %0 = load float, float* %a, align 4
  %1 = fcmp ugt float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %a, align 4
  store float %2, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load float, float* %a, align 4
  %4 = fsub float 0.000000e+00, %3
  store float %4, float* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load float, float* %r, align 4
  ret float %5
}

define float @sum_a(float* %a, i32* %__1a, i32* %__2a) {
.entry:
  %i = alloca i32, align 4
  %r = alloca float, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  store float 0.000000e+00, float* %r, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = load i32, i32* %__2a, align 4
  %3 = mul i32 1, %2
  %4 = icmp sle i32 %1, %3
  br i1 %4, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %5 = load i32, i32* %i, align 4
  %6 = add i32 %5, 1
  store i32 %6, i32* %i, align 4
  %7 = load float, float* %r, align 4
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %__1a, align 4
  %10 = load i32, i32* %__2a, align 4
  %11 = sub i32 %8, %9
  %12 = mul i32 1, %11
  %13 = add i32 0, %12
  %14 = mul i32 1, %10
  %15 = getelementptr inbounds float, float* %a, i32 %13
  %16 = load float, float* %15, align 4
  %17 = fadd float %7, %16
  store float %17, float* %r, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %18 = load float, float* %r, align 4
  ret float %18
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main() {
.entry:
  %call_arg_value2 = alloca float, align 4
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %a = alloca %array, align 8
  %0 = getelementptr %array, %array* %a, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array, %array* %a, i32 0, i32 2
  %2 = alloca i32, align 4
  store i32 1, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = alloca %dimension_descriptor, i32 %3, align 8
  %5 = getelementptr %array, %array* %a, i32 0, i32 4
  store i32 1, i32* %5, align 4
  store %dimension_descriptor* %4, %dimension_descriptor** %1, align 8
  %6 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %7 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %6, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 1
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 2
  store i32 1, i32* %8, align 4
  store i32 1, i32* %9, align 4
  store i32 3, i32* %10, align 4
  %11 = alloca i32, align 4
  store i32 3, i32* %11, align 4
  %12 = getelementptr %array, %array* %a, i32 0, i32 0
  %13 = load i32, i32* %11, align 4
  %14 = alloca float, i32 %13, align 4
  store float* %14, float** %12, align 8
  %b = alloca float, align 4
  %15 = getelementptr %array, %array* %a, i32 0, i32 2
  %16 = load %dimension_descriptor*, %dimension_descriptor** %15, align 8
  %17 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %16, i32 0
  %18 = getelementptr %dimension_descriptor, %dimension_descriptor* %17, i32 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = sub i32 1, %19
  %21 = mul i32 1, %20
  %22 = add i32 0, %21
  %23 = getelementptr %dimension_descriptor, %dimension_descriptor* %17, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = mul i32 1, %24
  %26 = getelementptr %array, %array* %a, i32 0, i32 0
  %27 = load float*, float** %26, align 8
  %28 = getelementptr inbounds float, float* %27, i32 %22
  store float 3.000000e+00, float* %28, align 4
  %29 = getelementptr %array, %array* %a, i32 0, i32 2
  %30 = load %dimension_descriptor*, %dimension_descriptor** %29, align 8
  %31 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %30, i32 0
  %32 = getelementptr %dimension_descriptor, %dimension_descriptor* %31, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = sub i32 2, %33
  %35 = mul i32 1, %34
  %36 = add i32 0, %35
  %37 = getelementptr %dimension_descriptor, %dimension_descriptor* %31, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = mul i32 1, %38
  %40 = getelementptr %array, %array* %a, i32 0, i32 0
  %41 = load float*, float** %40, align 8
  %42 = getelementptr inbounds float, float* %41, i32 %36
  store float 2.000000e+00, float* %42, align 4
  %43 = getelementptr %array, %array* %a, i32 0, i32 2
  %44 = load %dimension_descriptor*, %dimension_descriptor** %43, align 8
  %45 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %44, i32 0
  %46 = getelementptr %dimension_descriptor, %dimension_descriptor* %45, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = sub i32 3, %47
  %49 = mul i32 1, %48
  %50 = add i32 0, %49
  %51 = getelementptr %dimension_descriptor, %dimension_descriptor* %45, i32 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = mul i32 1, %52
  %54 = getelementptr %array, %array* %a, i32 0, i32 0
  %55 = load float*, float** %54, align 8
  %56 = getelementptr inbounds float, float* %55, i32 %50
  store float 1.000000e+00, float* %56, align 4
  %57 = getelementptr %array, %array* %a, i32 0, i32 0
  %58 = load float*, float** %57, align 8
  store i32 1, i32* %call_arg_value, align 4
  store i32 3, i32* %call_arg_value1, align 4
  %59 = call float @sum_a(float* %58, i32* %call_arg_value, i32* %call_arg_value1)
  store float %59, float* %b, align 4
  %60 = load float, float* %b, align 4
  %61 = fsub float %60, 6.000000e+00
  store float %61, float* %call_arg_value2, align 4
  %62 = call float @abs(float* %call_arg_value2)
  %63 = fcmp ugt float %62, 0x3EE4F8B580000000
  br i1 %63, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @8, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @exit(i32)
