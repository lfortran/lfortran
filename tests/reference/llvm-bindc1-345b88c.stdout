; ModuleID = 'LFortran'
source_filename = "LFortran"

%c_ptr = type { i32 }
%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

declare void @__module_lfortran_intrinsic_builtin_execute_command_line(i8**, i1*, i32*, i32*, i8**)

declare void @__module_lfortran_intrinsic_builtin_get_command_argument(i32*, i8**, i32*, i32*)

declare void @__module_lfortran_intrinsic_builtin_get_environment_variable(i8**, i8**, i32*, i32*, i1*)

declare void @__module_lfortran_intrinsic_builtin_move_alloc(i32*, i32*)

declare void @__module_lfortran_intrinsic_iso_c_binding_c_f_pointer(%c_ptr*, i32**, %array*)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %p = alloca void*, align 8
  %x = alloca i32*, align 8
  %2 = load i32*, i32** %x, align 8
  %3 = bitcast i32* %2 to void*
  store void* %3, void** %p, align 8
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)
