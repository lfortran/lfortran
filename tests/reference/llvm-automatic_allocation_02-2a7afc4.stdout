; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type <{ float, float }>

@0 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@9 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %c = alloca %complex_4*, align 8
  store %complex_4* null, %complex_4** %c, align 8
  %i = alloca i32*, align 8
  store i32* null, i32** %i, align 8
  %l = alloca i1*, align 8
  store i1* null, i1** %l, align 8
  %r = alloca float*, align 8
  store float* null, float** %r, align 8
  %2 = load i32*, i32** %i, align 8
  %3 = icmp eq i32* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  %4 = call i8* @_lfortran_malloc(i32 4)
  call void @llvm.memset.p0i8.i32(i8* %4, i8 0, i32 4, i1 false)
  %5 = bitcast i8* %4 to i32*
  store i32* %5, i32** %i, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %6 = load i32*, i32** %i, align 8
  store i32 10, i32* %6, align 4
  %7 = load float*, float** %r, align 8
  %8 = icmp eq float* %7, null
  br i1 %8, label %then1, label %else2

then1:                                            ; preds = %ifcont
  %9 = call i8* @_lfortran_malloc(i32 4)
  call void @llvm.memset.p0i8.i32(i8* %9, i8 0, i32 4, i1 false)
  %10 = bitcast i8* %9 to float*
  store float* %10, float** %r, align 8
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %11 = load float*, float** %r, align 8
  store float 0x40119999A0000000, float* %11, align 4
  %12 = alloca %complex_4, align 8
  %13 = getelementptr %complex_4, %complex_4* %12, i32 0, i32 0
  %14 = getelementptr %complex_4, %complex_4* %12, i32 0, i32 1
  store float 1.000000e+00, float* %13, align 4
  store float 2.000000e+00, float* %14, align 4
  %15 = load %complex_4, %complex_4* %12, align 1
  %16 = load %complex_4*, %complex_4** %c, align 8
  %17 = icmp eq %complex_4* %16, null
  br i1 %17, label %then4, label %else5

then4:                                            ; preds = %ifcont3
  %18 = call i8* @_lfortran_malloc(i32 8)
  call void @llvm.memset.p0i8.i32(i8* %18, i8 0, i32 8, i1 false)
  %19 = bitcast i8* %18 to %complex_4*
  store %complex_4* %19, %complex_4** %c, align 8
  br label %ifcont6

else5:                                            ; preds = %ifcont3
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %20 = load %complex_4*, %complex_4** %c, align 8
  store %complex_4 %15, %complex_4* %20, align 1
  %21 = load i1*, i1** %l, align 8
  %22 = icmp eq i1* %21, null
  br i1 %22, label %then7, label %else8

then7:                                            ; preds = %ifcont6
  %23 = call i8* @_lfortran_malloc(i32 1)
  call void @llvm.memset.p0i8.i32(i8* %23, i8 0, i32 1, i1 false)
  %24 = bitcast i8* %23 to i1*
  store i1* %24, i1** %l, align 8
  br label %ifcont9

else8:                                            ; preds = %ifcont6
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %25 = load i1*, i1** %l, align 8
  store i1 true, i1* %25, align 1
  %26 = load i32*, i32** %i, align 8
  %27 = load i32, i32* %26, align 4
  %28 = icmp ne i32 %27, 10
  br i1 %28, label %then10, label %else11

then10:                                           ; preds = %ifcont9
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont12

else11:                                           ; preds = %ifcont9
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  %29 = load float*, float** %r, align 8
  %30 = load float, float* %29, align 4
  %31 = fcmp une float %30, 0x40119999A0000000
  br i1 %31, label %then13, label %else14

then13:                                           ; preds = %ifcont12
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont15

else14:                                           ; preds = %ifcont12
  br label %ifcont15

ifcont15:                                         ; preds = %else14, %then13
  %32 = load %complex_4*, %complex_4** %c, align 8
  %33 = load %complex_4, %complex_4* %32, align 1
  %34 = alloca %complex_4, align 8
  %35 = getelementptr %complex_4, %complex_4* %34, i32 0, i32 0
  %36 = getelementptr %complex_4, %complex_4* %34, i32 0, i32 1
  store float 1.000000e+00, float* %35, align 4
  store float 2.000000e+00, float* %36, align 4
  %37 = load %complex_4, %complex_4* %34, align 1
  %38 = alloca %complex_4, align 8
  store %complex_4 %33, %complex_4* %38, align 1
  %39 = getelementptr %complex_4, %complex_4* %38, i32 0, i32 0
  %40 = load float, float* %39, align 4
  %41 = alloca %complex_4, align 8
  store %complex_4 %37, %complex_4* %41, align 1
  %42 = getelementptr %complex_4, %complex_4* %41, i32 0, i32 0
  %43 = load float, float* %42, align 4
  %44 = alloca %complex_4, align 8
  store %complex_4 %33, %complex_4* %44, align 1
  %45 = getelementptr %complex_4, %complex_4* %44, i32 0, i32 1
  %46 = load float, float* %45, align 4
  %47 = alloca %complex_4, align 8
  store %complex_4 %37, %complex_4* %47, align 1
  %48 = getelementptr %complex_4, %complex_4* %47, i32 0, i32 1
  %49 = load float, float* %48, align 4
  %50 = fcmp one float %40, %43
  %51 = fcmp one float %46, %49
  %52 = or i1 %50, %51
  br i1 %52, label %then16, label %else17

then16:                                           ; preds = %ifcont15
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont18

else17:                                           ; preds = %ifcont15
  br label %ifcont18

ifcont18:                                         ; preds = %else17, %then16
  %53 = load i1*, i1** %l, align 8
  %54 = load i1, i1* %53, align 1
  %55 = icmp eq i1 %54, false
  %56 = xor i1 %54, true
  br i1 %56, label %then19, label %else20

then19:                                           ; preds = %ifcont18
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont21

else20:                                           ; preds = %ifcont18
  br label %ifcont21

ifcont21:                                         ; preds = %else20, %then19
  %57 = load i32*, i32** %i, align 8
  %58 = ptrtoint i32* %57 to i64
  %59 = icmp ne i64 %58, 0
  br i1 %59, label %then22, label %else23

then22:                                           ; preds = %ifcont21
  %60 = alloca i8*, align 8
  %61 = bitcast i32* %57 to i8*
  store i8* %61, i8** %60, align 8
  %62 = load i8*, i8** %60, align 8
  call void @_lfortran_free(i8* %62)
  store i32* null, i32** %i, align 8
  br label %ifcont24

else23:                                           ; preds = %ifcont21
  br label %ifcont24

ifcont24:                                         ; preds = %else23, %then22
  %63 = load float*, float** %r, align 8
  %64 = ptrtoint float* %63 to i64
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %then25, label %else26

then25:                                           ; preds = %ifcont24
  %66 = alloca i8*, align 8
  %67 = bitcast float* %63 to i8*
  store i8* %67, i8** %66, align 8
  %68 = load i8*, i8** %66, align 8
  call void @_lfortran_free(i8* %68)
  store float* null, float** %r, align 8
  br label %ifcont27

else26:                                           ; preds = %ifcont24
  br label %ifcont27

ifcont27:                                         ; preds = %else26, %then25
  %69 = load %complex_4*, %complex_4** %c, align 8
  %70 = ptrtoint %complex_4* %69 to i64
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %then28, label %else29

then28:                                           ; preds = %ifcont27
  %72 = alloca i8*, align 8
  %73 = bitcast %complex_4* %69 to i8*
  store i8* %73, i8** %72, align 8
  %74 = load i8*, i8** %72, align 8
  call void @_lfortran_free(i8* %74)
  store %complex_4* null, %complex_4** %c, align 8
  br label %ifcont30

else29:                                           ; preds = %ifcont27
  br label %ifcont30

ifcont30:                                         ; preds = %else29, %then28
  %75 = load i1*, i1** %l, align 8
  %76 = ptrtoint i1* %75 to i64
  %77 = icmp ne i64 %76, 0
  br i1 %77, label %then31, label %else32

then31:                                           ; preds = %ifcont30
  %78 = alloca i8*, align 8
  %79 = bitcast i1* %75 to i8*
  store i8* %79, i8** %78, align 8
  %80 = load i8*, i8** %78, align 8
  call void @_lfortran_free(i8* %80)
  store i1* null, i1** %l, align 8
  br label %ifcont33

else32:                                           ; preds = %ifcont30
  br label %ifcont33

ifcont33:                                         ; preds = %else32, %then31
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont33
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_allocate_string(i8**, i64, i64*, i64*)

declare i8* @_lfortran_malloc(i32)

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1 immarg) #0

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lfortran_free(i8*)

declare void @_lpython_free_argv()

attributes #0 = { argmemonly nounwind willreturn writeonly }
