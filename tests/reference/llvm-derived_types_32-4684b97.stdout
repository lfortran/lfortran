; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"(g0)\00", align 1
@4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@5 = private unnamed_addr constant [2 x i8] c" \00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [19 x i8] c"10.000000000000000\00", align 1
@9 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @__module_lfortran_intrinsic_string_len_trim(i8** %string) {
.entry:
  %r = alloca i32, align 4
  %0 = load i8*, i8** %string, align 8
  %1 = alloca i8*, align 8
  store i8* %0, i8** %1, align 8
  %2 = call i32 @_lfortran_str_len(i8** %1)
  store i32 %2, i32* %r, align 4
  %3 = load i32, i32* %r, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %then, label %else

then:                                             ; preds = %.entry
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  br label %loop.head

loop.head:                                        ; preds = %ifcont3, %ifcont
  %5 = load i32, i32* %r, align 4
  %6 = load i8*, i8** %string, align 8
  %7 = call i8* @_lfortran_str_item(i8* %6, i32 %5)
  %8 = alloca i8*, align 8
  store i8* %7, i8** %8, align 8
  %9 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i8** %9, align 8
  %10 = call i1 @_lpython_str_compare_eq(i8** %8, i8** %9)
  br i1 %10, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %11 = load i32, i32* %r, align 4
  %12 = sub i32 %11, 1
  store i32 %12, i32* %r, align 4
  %13 = load i32, i32* %r, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %then1, label %else2

then1:                                            ; preds = %loop.body
  br label %loop.end

unreachable_after_exit:                           ; No predecessors!
  br label %ifcont3

else2:                                            ; preds = %loop.body
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %unreachable_after_exit
  br label %loop.head

loop.end:                                         ; preds = %then1, %loop.head
  br label %return

return:                                           ; preds = %loop.end, %then
  %15 = load i32, i32* %r, align 4
  ret i32 %15
}

define i8* @__module_lfortran_intrinsic_string_trim(i8** %x) {
.entry:
  %i = alloca i32, align 4
  %r = alloca i8*, align 8
  %0 = call i32 @__module_lfortran_intrinsic_string_len_trim(i8** %x)
  %1 = add i32 %0, 1
  %2 = call i8* @_lfortran_malloc(i32 %1)
  call void @_lfortran_string_init(i32 %1, i8* %2)
  store i8* %2, i8** %r, align 8
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %3 = load i32, i32* %i, align 4
  %4 = add i32 %3, 1
  %5 = load i8*, i8** %r, align 8
  %6 = alloca i8*, align 8
  store i8* %5, i8** %6, align 8
  %7 = call i32 @_lfortran_str_len(i8** %6)
  %8 = icmp sle i32 %4, %7
  br i1 %8, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %9 = load i32, i32* %i, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %i, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i8*, i8** %r, align 8
  %13 = sub i32 %11, 1
  %14 = getelementptr i8, i8* %12, i32 %13
  %15 = load i32, i32* %i, align 4
  %16 = load i8*, i8** %x, align 8
  %17 = call i8* @_lfortran_str_item(i8* %16, i32 %15)
  %18 = load i8, i8* %17, align 1
  store i8 %18, i8* %14, align 1
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %19 = load i8*, i8** %r, align 8
  ret i8* %19
}

declare i32 @_lfortran_str_len(i8**)

declare i8* @_lfortran_str_item(i8*, i32)

declare i1 @_lpython_str_compare_eq(i8**, i8**)

declare i8* @_lfortran_malloc(i32)

declare void @_lfortran_string_init(i32, i8*)

define i8* @__module_testdrive_derived_types_32_real_dp_to_string(double* %val) {
.entry:
  %buffer = alloca i8*, align 8
  %0 = call i8* @_lfortran_malloc(i32 129)
  call void @_lfortran_string_init(i32 129, i8* %0)
  store i8* %0, i8** %buffer, align 8
  %1 = load i8*, i8** %buffer, align 8
  %buffer_len = alloca i32, align 4
  store i32 128, i32* %buffer_len, align 4
  %string = alloca i8*, align 8
  store i8* null, i8** %string, align 8
  %2 = alloca i32, align 4
  %3 = load double, double* %val, align 8
  %4 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i32 5, double %3)
  call void (i8**, i32*, i8*, ...) @_lfortran_string_write(i8** %buffer, i32* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i32 0, i32 0), i8* %4)
  %5 = call i8* @__module_lfortran_intrinsic_string_trim(i8** %buffer)
  call void @_lfortran_strcpy(i8** %string, i8* %5, i8 1)
  br label %return

return:                                           ; preds = %.entry
  %6 = load i8*, i8** %string, align 8
  ret i8* %6
}

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_string_write(i8**, i32*, i8*, ...)

declare void @_lfortran_strcpy(i8**, i8*, i8)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %value = alloca double, align 8
  store double 1.000000e+01, double* %value, align 8
  %2 = call i8* @__module_testdrive_derived_types_32_real_dp_to_string(double* %value)
  %3 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 2, i8* null, i32 7, i8* %2)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  %4 = call i8* @__module_testdrive_derived_types_32_real_dp_to_string(double* %value)
  %5 = alloca i8*, align 8
  store i8* %4, i8** %5, align 8
  %6 = alloca i8*, align 8
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @8, i32 0, i32 0), i8** %6, align 8
  %7 = call i1 @_lpython_str_compare_noteq(i8** %5, i8** %6)
  br i1 %7, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_printf(i8*, ...)

declare i1 @_lpython_str_compare_noteq(i8**, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
