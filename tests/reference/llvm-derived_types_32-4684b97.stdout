; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data = private constant [4 x i8] c"(g0)"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data, i32 0, i32 0), i64 4 }>
@serialization_info = private unnamed_addr constant [3 x i8] c"R8\00", align 1
@string_const_data.1 = private constant [4 x i8] c"(g0)"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([4 x i8], [4 x i8]* @string_const_data.1, i32 0, i32 0), i64 4 }>
@serialization_info.3 = private unnamed_addr constant [3 x i8] c"R8\00", align 1
@2 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@string_const_data.4 = private constant [1 x i8] c" "
@string_const.5 = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data.4, i32 0, i32 0), i64 1 }>
@3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.6 = private unnamed_addr constant [7 x i8] c"S-DESC\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.7 = private constant [18 x i8] c"10.000000000000000"
@string_const.8 = private global %string_descriptor <{ i8* getelementptr inbounds ([18 x i8], [18 x i8]* @string_const_data.7, i32 0, i32 0), i64 18 }>
@"ERROR STOP" = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@6 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @_lcompilers_len_trim_str(%string_descriptor* %str) {
.entry:
  %result = alloca i32, align 4
  %0 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 1
  %1 = load i64, i64* %0, align 4
  %2 = trunc i64 %1 to i32
  store i32 %2, i32* %result, align 4
  %3 = load i32, i32* %result, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %then, label %else2

then:                                             ; preds = %.entry
  br label %loop.head

loop.head:                                        ; preds = %ifcont, %then
  %5 = load i32, i32* %result, align 4
  %6 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 1
  %9 = load i64, i64* %8, align 4
  %10 = sext i32 %5 to i64
  %11 = call i8* @_lfortran_str_item(i8* %7, i64 %9, i64 %10)
  %12 = call i8* @_lfortran_malloc(i64 16)
  %stringItem_desc = bitcast i8* %12 to %string_descriptor*
  %13 = getelementptr %string_descriptor, %string_descriptor* %stringItem_desc, i32 0, i32 0
  store i8* %11, i8** %13, align 8
  %14 = getelementptr %string_descriptor, %string_descriptor* %stringItem_desc, i32 0, i32 1
  store i64 1, i64* %14, align 4
  %15 = getelementptr %string_descriptor, %string_descriptor* %stringItem_desc, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.5, i32 0, i32 0), align 8
  %18 = load i8, i8* %16, align 1
  %19 = load i8, i8* %17, align 1
  %20 = icmp eq i8 %18, %19
  br i1 %20, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %21 = load i32, i32* %result, align 4
  %22 = sub i32 %21, 1
  store i32 %22, i32* %result, align 4
  %23 = load i32, i32* %result, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %then1, label %else

then1:                                            ; preds = %loop.body
  br label %loop.end

unreachable_after_exit:                           ; No predecessors!
  br label %ifcont

else:                                             ; preds = %loop.body
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_exit
  br label %loop.head

loop.end:                                         ; preds = %then1, %loop.head
  br label %ifcont3

else2:                                            ; preds = %.entry
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %loop.end
  br label %return

return:                                           ; preds = %ifcont3
  %25 = load i32, i32* %result, align 4
  ret i32 %25
}

define %string_descriptor @_lcompilers_trim_str(%string_descriptor* %str) {
.entry:
  %0 = call i8* @_lfortran_malloc(i64 16)
  %result = bitcast i8* %0 to %string_descriptor*
  store %string_descriptor zeroinitializer, %string_descriptor* %result, align 1
  %1 = call i32 @_lcompilers_len_trim_str(%string_descriptor* %str)
  %2 = sext i32 %1 to i64
  %3 = getelementptr %string_descriptor, %string_descriptor* %result, i32 0, i32 1
  store i64 %2, i64* %3, align 4
  %4 = getelementptr %string_descriptor, %string_descriptor* %result, i32 0, i32 1
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr %string_descriptor, %string_descriptor* %result, i32 0, i32 0
  %7 = call i8* @_lfortran_string_malloc(i64 %5)
  store i8* %7, i8** %6, align 8
  %8 = call i32 @_lcompilers_len_trim_str(%string_descriptor* %str)
  %9 = getelementptr %string_descriptor, %string_descriptor* %str, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = sext i32 %8 to i64
  %12 = call i8* @_lfortran_str_slice_fortran(i8* %10, i64 1, i64 %11)
  %13 = call i32 @_lcompilers_len_trim_str(%string_descriptor* %str)
  %14 = sub i32 %13, 1
  %15 = add i32 %14, 1
  %16 = sext i32 %15 to i64
  %17 = call i8* @_lfortran_malloc(i64 16)
  %stringSection_desc = bitcast i8* %17 to %string_descriptor*
  %18 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc, i32 0, i32 0
  store i8* %12, i8** %18, align 8
  %19 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc, i32 0, i32 1
  store i64 %16, i64* %19, align 4
  %20 = getelementptr %string_descriptor, %string_descriptor* %result, i32 0, i32 0
  %21 = getelementptr %string_descriptor, %string_descriptor* %result, i32 0, i32 1
  %22 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr %string_descriptor, %string_descriptor* %stringSection_desc, i32 0, i32 1
  %25 = load i64, i64* %24, align 4
  call void @_lfortran_strcpy(i8** %20, i64* %21, i8 0, i8 0, i8* %23, i64 %25)
  br label %return

return:                                           ; preds = %.entry
  %26 = load %string_descriptor, %string_descriptor* %result, align 1
  ret %string_descriptor %26
}

define void @__module_testdrive_derived_types_32_real_dp_to_string(double* %val, %string_descriptor* %string) {
.entry:
  %string_ret_const = alloca %string_descriptor, align 8
  %0 = call i8* @_lfortran_malloc(i64 16)
  %buffer = bitcast i8* %0 to %string_descriptor*
  store %string_descriptor zeroinitializer, %string_descriptor* %buffer, align 1
  %1 = getelementptr %string_descriptor, %string_descriptor* %buffer, i32 0, i32 1
  store i64 128, i64* %1, align 4
  %2 = getelementptr %string_descriptor, %string_descriptor* %buffer, i32 0, i32 0
  %3 = call i8* @_lfortran_malloc(i64 128)
  store i8* %3, i8** %2, align 8
  %buffer_len = alloca i32, align 4
  store i32 128, i32* %buffer_len, align 4
  %4 = getelementptr %string_descriptor, %string_descriptor* %buffer, i32 0, i32 0
  %5 = getelementptr %string_descriptor, %string_descriptor* %buffer, i32 0, i32 1
  %6 = alloca i32*, align 8
  store i32* null, i32** %6, align 8
  %7 = load i32*, i32** %6, align 8
  %8 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %9 = alloca i64, align 8
  %10 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* %8, i64 4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i64* %9, i32 0, i32 0, double* %val)
  %11 = load i64, i64* %9, align 4
  %12 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %12 to %string_descriptor*
  %13 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %10, i8** %13, align 8
  %14 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %11, i64* %14, align 4
  %15 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  %18 = alloca i64, align 8
  %19 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* %17, i64 4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.3, i32 0, i32 0), i64* %18, i32 0, i32 0, double* %val)
  %20 = load i64, i64* %18, align 4
  %21 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc1 = bitcast i8* %21 to %string_descriptor*
  %22 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  store i8* %19, i8** %22, align 8
  %23 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  store i64 %20, i64* %23, align 4
  %24 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  %25 = load i64, i64* %24, align 4
  call void (i8**, i8, i8, i64*, i32*, i8*, i64, ...) @_lfortran_string_write(i8** %4, i8 0, i8 0, i64* %5, i32* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i64 2, i8* %16, i64 %25)
  %26 = call %string_descriptor @_lcompilers_trim_str(%string_descriptor* %buffer)
  store %string_descriptor %26, %string_descriptor* %string_ret_const, align 1
  %27 = getelementptr %string_descriptor, %string_descriptor* %string, i32 0, i32 0
  %28 = getelementptr %string_descriptor, %string_descriptor* %string, i32 0, i32 1
  %29 = getelementptr %string_descriptor, %string_descriptor* %string_ret_const, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr %string_descriptor, %string_descriptor* %string_ret_const, i32 0, i32 1
  %32 = load i64, i64* %31, align 4
  call void @_lfortran_strcpy(i8** %27, i64* %28, i8 1, i8 1, i8* %30, i64 %32)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare i8* @_lfortran_malloc(i64)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare void @_lfortran_string_write(i8**, i8, i8, i64*, i32*, i8*, i64, ...)

declare void @_lfortran_strcpy(i8**, i64*, i8, i8, i8*, i64)

declare i8* @_lfortran_str_item(i8*, i64, i64)

declare i8* @_lfortran_string_malloc(i64)

declare i8* @_lfortran_str_slice_fortran(i8*, i64, i64)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = call i8* @_lfortran_malloc(i64 16)
  %__libasr__created__var__0__func_call_res = bitcast i8* %2 to %string_descriptor*
  store %string_descriptor zeroinitializer, %string_descriptor* %__libasr__created__var__0__func_call_res, align 1
  %3 = call i8* @_lfortran_malloc(i64 16)
  %__libasr__created__var__1__func_call_res = bitcast i8* %3 to %string_descriptor*
  store %string_descriptor zeroinitializer, %string_descriptor* %__libasr__created__var__1__func_call_res, align 1
  %value = alloca double, align 8
  store double 1.000000e+01, double* %value, align 8
  %4 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 0
  %5 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 1
  %6 = load i8*, i8** %4, align 8
  call void @_lfortran_free(i8* %6)
  store i8* null, i8** %4, align 8
  store i64 0, i64* %5, align 4
  call void @__module_testdrive_derived_types_32_real_dp_to_string(double* %value, %string_descriptor* %__libasr__created__var__0__func_call_res)
  %7 = alloca i64, align 8
  %8 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 1
  %9 = load i64, i64* %8, align 4
  %10 = load %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, align 1
  %11 = alloca %string_descriptor, align 8
  store %string_descriptor %10, %string_descriptor* %11, align 1
  %12 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @serialization_info.6, i32 0, i32 0), i64* %7, i32 0, i32 1, i64 %9, %string_descriptor* %11)
  %13 = load i64, i64* %7, align 4
  %14 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %14 to %string_descriptor*
  %15 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %12, i8** %15, align 8
  %16 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %13, i64* %16, align 4
  %17 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %20 = load i64, i64* %19, align 4
  %21 = trunc i64 %20 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i8* %18, i32 %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), i32 1)
  %22 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 0
  %23 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 1
  %24 = load i8*, i8** %22, align 8
  call void @_lfortran_free(i8* %24)
  store i8* null, i8** %22, align 8
  store i64 0, i64* %23, align 4
  call void @__module_testdrive_derived_types_32_real_dp_to_string(double* %value, %string_descriptor* %__libasr__created__var__1__func_call_res)
  %25 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 1
  %28 = load i64, i64* %27, align 4
  %29 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.8, i32 0, i32 0), align 8
  %30 = call i32 @str_compare(i8* %26, i64 %28, i8* %29, i64 18)
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %32 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 0
  %33 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 1
  %34 = load i8*, i8** %32, align 8
  call void @_lfortran_free(i8* %34)
  store i8* null, i8** %32, align 8
  store i64 0, i64* %33, align 4
  %35 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 0
  %36 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 1
  %37 = load i8*, i8** %35, align 8
  call void @_lfortran_free(i8* %37)
  store i8* null, i8** %35, align 8
  store i64 0, i64* %36, align 4
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_free(i8*)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

declare i32 @str_compare(i8*, i64, i8*, i64)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
