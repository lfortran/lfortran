; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type { i8*, i64, i64 }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"(g0)\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"R8\00", align 1
@3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [2 x i8] c"S\00", align 1
@6 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@7 = private unnamed_addr constant [19 x i8] c"10.000000000000000\00", align 1
@8 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@10 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @_lcompilers_len_trim_str(i8** %str) {
.entry:
  %result = alloca i32, align 4
  %0 = load i8*, i8** %str, align 8
  %1 = alloca i8*, align 8
  store i8* %0, i8** %1, align 8
  %2 = call i32 @_lfortran_str_len(i8** %1)
  store i32 %2, i32* %result, align 4
  %3 = load i32, i32* %result, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %then, label %else2

then:                                             ; preds = %.entry
  br label %loop.head

loop.head:                                        ; preds = %ifcont, %then
  %5 = load i32, i32* %result, align 4
  %6 = load i8*, i8** %str, align 8
  %7 = sext i32 %5 to i64
  %8 = call i8* @_lfortran_str_item(i8* %6, i64 %7)
  %9 = alloca i8*, align 8
  store i8* %8, i8** %9, align 8
  %10 = alloca i8*, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i8** %10, align 8
  %11 = call i1 @_lpython_str_compare_eq(i8** %9, i8** %10)
  br i1 %11, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %12 = load i32, i32* %result, align 4
  %13 = sub i32 %12, 1
  store i32 %13, i32* %result, align 4
  %14 = load i32, i32* %result, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %then1, label %else

then1:                                            ; preds = %loop.body
  br label %loop.end

unreachable_after_exit:                           ; No predecessors!
  br label %ifcont

else:                                             ; preds = %loop.body
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_exit
  br label %loop.head

loop.end:                                         ; preds = %then1, %loop.head
  br label %ifcont3

else2:                                            ; preds = %.entry
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %loop.end
  br label %return

return:                                           ; preds = %ifcont3
  %16 = load i32, i32* %result, align 4
  ret i32 %16
}

define i8* @_lcompilers_trim_str(i8** %str) {
.entry:
  %result = alloca i8*, align 8
  %0 = call i32 @_lcompilers_len_trim_str(i8** %str)
  %1 = add i32 %0, 1
  %2 = call i8* @_lfortran_malloc(i32 %1)
  %3 = sext i32 %1 to i64
  call void @_lfortran_string_init(i64 %3, i8* %2)
  store i8* %2, i8** %result, align 8
  %4 = load i8*, i8** %str, align 8
  %5 = call i32 @_lcompilers_len_trim_str(i8** %str)
  %6 = call i8* @_lfortran_str_slice(i8* %4, i32 0, i32 %5, i32 1, i1 true, i1 true)
  call void @_lfortran_strcpy_pointer_string(i8** %result, i8* %6)
  br label %return

return:                                           ; preds = %.entry
  %7 = load i8*, i8** %result, align 8
  ret i8* %7
}

define void @__module_testdrive_derived_types_32_real_dp_to_string(double* %val, %string_descriptor* %string) {
.entry:
  %buffer = alloca i8*, align 8
  %0 = call i8* @_lfortran_malloc(i32 129)
  call void @_lfortran_string_init(i64 129, i8* %0)
  store i8* %0, i8** %buffer, align 8
  %1 = load i8*, i8** %buffer, align 8
  %buffer_len = alloca i32, align 4
  store i32 128, i32* %buffer_len, align 4
  %negative_one_constant = alloca i64, align 8
  store i64 -1, i64* %negative_one_constant, align 4
  %2 = alloca i32*, align 8
  store i32* null, i32** %2, align 8
  %3 = load i32*, i32** %2, align 8
  %4 = call i8* (i8*, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, double* %val)
  call void (i8**, i64*, i64*, i32*, i8*, ...) @_lfortran_string_write(i8** %buffer, i64* %negative_one_constant, i64* %negative_one_constant, i32* %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0), i8* %4)
  %casted_string_ptr_to_desc = alloca %string_descriptor, align 8
  %5 = getelementptr %string_descriptor, %string_descriptor* %casted_string_ptr_to_desc, i32 0, i32 0
  %6 = getelementptr %string_descriptor, %string_descriptor* %casted_string_ptr_to_desc, i32 0, i32 1
  %7 = getelementptr %string_descriptor, %string_descriptor* %casted_string_ptr_to_desc, i32 0, i32 2
  %8 = load i8*, i8** %buffer, align 8
  %9 = alloca i8*, align 8
  store i8* %8, i8** %9, align 8
  %10 = call i32 @_lfortran_str_len(i8** %9)
  %11 = sext i32 %10 to i64
  %12 = call i8* @_lcompilers_trim_str(i8** %buffer)
  store i8* %12, i8** %5, align 8
  store i64 %11, i64* %6, align 4
  store i64 %11, i64* %7, align 4
  %13 = getelementptr %string_descriptor, %string_descriptor* %string, i32 0, i32 0
  %14 = getelementptr %string_descriptor, %string_descriptor* %string, i32 0, i32 1
  %15 = getelementptr %string_descriptor, %string_descriptor* %string, i32 0, i32 2
  %16 = getelementptr %string_descriptor, %string_descriptor* %casted_string_ptr_to_desc, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @_lfortran_strcpy_descriptor_string(i8** %13, i8* %17, i64* %14, i64* %15)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare i8* @_lfortran_malloc(i32)

declare void @_lfortran_string_init(i64, i8*)

declare i8* @_lcompilers_string_format_fortran(i8*, i8*, i32, i32, ...)

declare void @_lfortran_string_write(i8**, i64*, i64*, i32*, i8*, ...)

declare i32 @_lfortran_str_len(i8**)

declare void @_lfortran_strcpy_descriptor_string(i8**, i8*, i64*, i64*)

declare i8* @_lfortran_str_item(i8*, i64)

declare i1 @_lpython_str_compare_eq(i8**, i8**)

declare i8* @_lfortran_str_slice(i8*, i32, i32, i32, i1, i1)

declare void @_lfortran_strcpy_pointer_string(i8**, i8*)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %__libasr__created__var__0__func_call_res = alloca %string_descriptor, align 8
  %2 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 0
  store i8* null, i8** %2, align 8
  %3 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 1
  store i64 0, i64* %3, align 4
  %4 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 2
  store i64 0, i64* %4, align 4
  %__libasr__created__var__1__func_call_res = alloca %string_descriptor, align 8
  %5 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 0
  store i8* null, i8** %5, align 8
  %6 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 1
  store i64 0, i64* %6, align 4
  %7 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 2
  store i64 0, i64* %7, align 4
  %__libasr__created__var__2__func_call_res = alloca %string_descriptor, align 8
  %8 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__2__func_call_res, i32 0, i32 0
  store i8* null, i8** %8, align 8
  %9 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__2__func_call_res, i32 0, i32 1
  store i64 0, i64* %9, align 4
  %10 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__2__func_call_res, i32 0, i32 2
  store i64 0, i64* %10, align 4
  %__libasr__created__var__3__func_call_res = alloca %string_descriptor, align 8
  %11 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__3__func_call_res, i32 0, i32 0
  store i8* null, i8** %11, align 8
  %12 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__3__func_call_res, i32 0, i32 1
  store i64 0, i64* %12, align 4
  %13 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__3__func_call_res, i32 0, i32 2
  store i64 0, i64* %13, align 4
  %value = alloca double, align 8
  store double 1.000000e+01, double* %value, align 8
  %14 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 0
  %15 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 1
  %16 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 2
  %17 = load i8*, i8** %14, align 8
  call void @_lfortran_free(i8* %17)
  store i8* null, i8** %14, align 8
  store i64 0, i64* %15, align 4
  store i64 0, i64* %16, align 4
  call void @__module_testdrive_derived_types_32_real_dp_to_string(double* %value, %string_descriptor* %__libasr__created__var__0__func_call_res)
  %18 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 0
  %19 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 1
  %20 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 2
  %21 = load i8*, i8** %18, align 8
  call void @_lfortran_free(i8* %21)
  store i8* null, i8** %18, align 8
  store i64 0, i64* %19, align 4
  store i64 0, i64* %20, align 4
  call void @__module_testdrive_derived_types_32_real_dp_to_string(double* %value, %string_descriptor* %__libasr__created__var__1__func_call_res)
  %22 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 1
  %23 = load i64, i64* %22, align 4
  %24 = trunc i64 %23 to i32
  %25 = sext i32 %24 to i64
  %26 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = alloca i8*, align 8
  store i8* %27, i8** %28, align 8
  %29 = call i8* (i8*, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @serialization_info.1, i32 0, i32 0), i32 0, i32 1, i64 %25, i8** %28)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i8* %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  %30 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__2__func_call_res, i32 0, i32 0
  %31 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__2__func_call_res, i32 0, i32 1
  %32 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__2__func_call_res, i32 0, i32 2
  %33 = load i8*, i8** %30, align 8
  call void @_lfortran_free(i8* %33)
  store i8* null, i8** %30, align 8
  store i64 0, i64* %31, align 4
  store i64 0, i64* %32, align 4
  call void @__module_testdrive_derived_types_32_real_dp_to_string(double* %value, %string_descriptor* %__libasr__created__var__2__func_call_res)
  %34 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__3__func_call_res, i32 0, i32 0
  %35 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__3__func_call_res, i32 0, i32 1
  %36 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__3__func_call_res, i32 0, i32 2
  %37 = load i8*, i8** %34, align 8
  call void @_lfortran_free(i8* %37)
  store i8* null, i8** %34, align 8
  store i64 0, i64* %35, align 4
  store i64 0, i64* %36, align 4
  call void @__module_testdrive_derived_types_32_real_dp_to_string(double* %value, %string_descriptor* %__libasr__created__var__3__func_call_res)
  %38 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__2__func_call_res, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = alloca i8*, align 8
  store i8* %39, i8** %40, align 8
  %41 = alloca i8*, align 8
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @7, i32 0, i32 0), i8** %41, align 8
  %42 = call i1 @_lpython_str_compare_noteq(i8** %40, i8** %41)
  br i1 %42, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %43 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 0
  %44 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 1
  %45 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__0__func_call_res, i32 0, i32 2
  %46 = load i8*, i8** %43, align 8
  call void @_lfortran_free(i8* %46)
  store i8* null, i8** %43, align 8
  store i64 0, i64* %44, align 4
  store i64 0, i64* %45, align 4
  %47 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 0
  %48 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 1
  %49 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__1__func_call_res, i32 0, i32 2
  %50 = load i8*, i8** %47, align 8
  call void @_lfortran_free(i8* %50)
  store i8* null, i8** %47, align 8
  store i64 0, i64* %48, align 4
  store i64 0, i64* %49, align 4
  %51 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__2__func_call_res, i32 0, i32 0
  %52 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__2__func_call_res, i32 0, i32 1
  %53 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__2__func_call_res, i32 0, i32 2
  %54 = load i8*, i8** %51, align 8
  call void @_lfortran_free(i8* %54)
  store i8* null, i8** %51, align 8
  store i64 0, i64* %52, align 4
  store i64 0, i64* %53, align 4
  %55 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__3__func_call_res, i32 0, i32 0
  %56 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__3__func_call_res, i32 0, i32 1
  %57 = getelementptr %string_descriptor, %string_descriptor* %__libasr__created__var__3__func_call_res, i32 0, i32 2
  %58 = load i8*, i8** %55, align 8
  call void @_lfortran_free(i8* %58)
  store i8* null, i8** %55, align 8
  store i64 0, i64* %56, align 4
  store i64 0, i64* %57, align 4
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_free(i8*)

declare void @_lfortran_printf(i8*, ...)

declare i1 @_lpython_str_compare_noteq(i8**, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
