; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [12 x i8] c"R4,R8,R4,R8\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %u = alloca double, align 8
  %v = alloca double, align 8
  %x = alloca float, align 4
  %zero = alloca float, align 4
  store float 0.000000e+00, float* %zero, align 4
  store double 0x3FF0CCCCC0000000, double* %u, align 8
  store double 1.050000e+00, double* %v, align 8
  store float 0x3FF0CCCCC0000000, float* %x, align 4
  %2 = call i8* (i8*, i8*, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @serialization_info, i32 0, i32 0), i32 0, float* %zero, double* %v, float* %x, double* %u)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i8*, i32, ...)

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_free_argv()
