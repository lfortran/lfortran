; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@__module___lcompilers_created__nested_context__closuretest____lcompilers_created__nested_context__closuretest_z = global i32 0
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca i32, align 4
  %z = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %z1 = alloca i32, align 4
  %2 = load i32, i32* %z1, align 4
  store i32 %2, i32* @__module___lcompilers_created__nested_context__closuretest____lcompilers_created__nested_context__closuretest_z, align 4
  store i32 0, i32* %z1, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %3 = load i32, i32* %z1, align 4
  %4 = add i32 %3, 1
  %5 = icmp sle i32 %4, 10
  br i1 %5, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %6 = load i32, i32* %z1, align 4
  %7 = add i32 %6, 1
  store i32 %7, i32* %z1, align 4
  %8 = load i32, i32* %z1, align 4
  store i32 %8, i32* @__module___lcompilers_created__nested_context__closuretest____lcompilers_created__nested_context__closuretest_z, align 4
  store i32 1, i32* %call_arg_value, align 4
  %9 = call i32 @apply(i32 (i32*)* @add_z, i32* %call_arg_value)
  %10 = alloca i32, align 4
  store i32 %9, i32* %10, align 4
  %11 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i32* %10)
  %12 = call i64 @_lfortran_str_len(i8* %11)
  %13 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %13 to %string_descriptor*
  %14 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %11, i8** %14, align 8
  %15 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %12, i64* %15, align 4
  %16 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  %18 = load i32, i32* @__module___lcompilers_created__nested_context__closuretest____lcompilers_created__nested_context__closuretest_z, align 4
  store i32 %18, i32* %z1, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %19 = load i32, i32* @__module___lcompilers_created__nested_context__closuretest____lcompilers_created__nested_context__closuretest_z, align 4
  store i32 %19, i32* %z1, align 4
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %loop.end
  ret i32 0
}

define i32 @add_z(i32* %x) {
.entry:
  %y = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = load i32, i32* @__module___lcompilers_created__nested_context__closuretest____lcompilers_created__nested_context__closuretest_z, align 4
  %2 = add i32 %0, %1
  store i32 %2, i32* %y, align 4
  br label %return

return:                                           ; preds = %.entry
  %3 = load i32, i32* %y, align 4
  ret i32 %3
}

define i32 @apply(i32 (i32*)* %fun, i32* %x) {
.entry:
  %y = alloca i32, align 4
  %0 = call i32 %fun(i32* %x)
  store i32 %0, i32* %y, align 4
  br label %return

return:                                           ; preds = %.entry
  %1 = load i32, i32* %y, align 4
  ret i32 %1
}

declare i32 @fun(i32*)

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_free_argv()
