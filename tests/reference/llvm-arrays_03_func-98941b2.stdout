; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define i32 @mysum_a(i32* %a, i32* %__1a, i32* %__2a) {
.entry:
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 0, i32* %r, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = load i32, i32* %__2a, align 4
  %3 = mul i32 1, %2
  %4 = icmp sle i32 %1, %3
  br i1 %4, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %5 = load i32, i32* %i, align 4
  %6 = add i32 %5, 1
  store i32 %6, i32* %i, align 4
  %7 = load i32, i32* %r, align 4
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %__1a, align 4
  %10 = load i32, i32* %__2a, align 4
  %11 = sub i32 %8, %9
  %12 = mul i32 1, %11
  %13 = add i32 0, %12
  %14 = mul i32 1, %10
  %15 = getelementptr inbounds i32, i32* %a, i32 %13
  %16 = load i32, i32* %15, align 4
  %17 = add i32 %7, %16
  store i32 %17, i32* %r, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %18 = load i32, i32* %r, align 4
  ret i32 %18
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %i = alloca i32, align 4
  %s = alloca i32, align 4
  %x = alloca %array, align 8
  %2 = getelementptr %array, %array* %x, i32 0, i32 1
  store i32 0, i32* %2, align 4
  %3 = getelementptr %array, %array* %x, i32 0, i32 2
  %4 = alloca i32, align 4
  store i32 1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = alloca %dimension_descriptor, i32 %5, align 8
  %7 = getelementptr %array, %array* %x, i32 0, i32 4
  store i32 1, i32* %7, align 4
  store %dimension_descriptor* %6, %dimension_descriptor** %3, align 8
  %8 = load %dimension_descriptor*, %dimension_descriptor** %3, align 8
  %9 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %8, i32 0
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 0
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 1
  %12 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 2
  store i32 1, i32* %10, align 4
  store i32 1, i32* %11, align 4
  store i32 10, i32* %12, align 4
  %13 = alloca i32, align 4
  store i32 10, i32* %13, align 4
  %14 = getelementptr %array, %array* %x, i32 0, i32 0
  %15 = load i32, i32* %13, align 4
  %16 = alloca i32, i32 %15, align 4
  store i32* %16, i32** %14, align 8
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %17 = load i32, i32* %i, align 4
  %18 = add i32 %17, 1
  %19 = icmp sle i32 %18, 10
  br i1 %19, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %20 = load i32, i32* %i, align 4
  %21 = add i32 %20, 1
  store i32 %21, i32* %i, align 4
  %22 = load i32, i32* %i, align 4
  %23 = getelementptr %array, %array* %x, i32 0, i32 2
  %24 = load %dimension_descriptor*, %dimension_descriptor** %23, align 8
  %25 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %24, i32 0
  %26 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = sub i32 %22, %27
  %29 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = mul i32 %30, %28
  %32 = add i32 0, %31
  %33 = getelementptr %array, %array* %x, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = add i32 %32, %34
  %36 = getelementptr %array, %array* %x, i32 0, i32 0
  %37 = load i32*, i32** %36, align 8
  %38 = getelementptr inbounds i32, i32* %37, i32 %35
  %39 = load i32, i32* %i, align 4
  store i32 %39, i32* %38, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %40 = getelementptr %array, %array* %x, i32 0, i32 0
  %41 = load i32*, i32** %40, align 8
  store i32 1, i32* %call_arg_value, align 4
  store i32 10, i32* %call_arg_value1, align 4
  %42 = call i32 @mysum_a(i32* %41, i32* %call_arg_value, i32* %call_arg_value1)
  store i32 %42, i32* %s, align 4
  %43 = load i32, i32* %s, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %44 = load i32, i32* %s, align 4
  %45 = icmp ne i32 %44, 55
  br i1 %45, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
