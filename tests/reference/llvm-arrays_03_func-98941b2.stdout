; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@3 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @mysum_integer____0(i32* %a, i32* %__1a, i32* %__2a) {
.entry:
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 0, i32* %r, align 4
  store i32 1, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %__2a, align 4
  %2 = mul i32 1, %1
  %3 = icmp sle i32 %0, %2
  br i1 %3, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %4 = load i32, i32* %r, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %__1a, align 4
  %7 = load i32, i32* %__2a, align 4
  %8 = sub i32 %5, %6
  %9 = mul i32 1, %8
  %10 = add i32 0, %9
  %11 = mul i32 1, %7
  %12 = getelementptr inbounds i32, i32* %a, i32 %10
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %4, %13
  store i32 %14, i32* %r, align 4
  %15 = load i32, i32* %i, align 4
  %16 = add i32 %15, 1
  store i32 %16, i32* %i, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %17 = load i32, i32* %r, align 4
  ret i32 %17
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %i = alloca i32, align 4
  %s = alloca i32, align 4
  %x = alloca [10 x i32], align 4
  store i32 1, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %2 = load i32, i32* %i, align 4
  %3 = icmp sle i32 %2, 10
  br i1 %3, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %4 = load i32, i32* %i, align 4
  %5 = sub i32 %4, 1
  %6 = mul i32 1, %5
  %7 = add i32 0, %6
  %8 = getelementptr [10 x i32], [10 x i32]* %x, i32 0, i32 %7
  %9 = load i32, i32* %i, align 4
  store i32 %9, i32* %8, align 4
  %10 = load i32, i32* %i, align 4
  %11 = add i32 %10, 1
  store i32 %11, i32* %i, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %12 = getelementptr [10 x i32], [10 x i32]* %x, i32 0, i32 0
  store i32 1, i32* %call_arg_value, align 4
  store i32 10, i32* %call_arg_value1, align 4
  %13 = call i32 @mysum_integer____0(i32* %12, i32* %call_arg_value, i32* %call_arg_value1)
  store i32 %13, i32* %s, align 4
  %14 = load i32, i32* %s, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %15 = load i32, i32* %s, align 4
  %16 = icmp ne i32 %15, 55
  br i1 %16, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
