#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}


struct dimension_descriptor
{
    int32_t lower_bound, length;
};

struct f32_3_1
{
    Kokkos::View<float*>* data;
    dimension_descriptor dims[1];
    bool is_allocated;

    f32_3_1(Kokkos::View<float*>* data_): data{data_} {};
};

// Forward declarations
namespace {
}

// Implementations
namespace {

void main2() {
    Kokkos::View<float*> a_data("a_data", 3);
    f32_3_1 a_value(&a_data);
    f32_3_1* a = &a_value;
    a->dims[0].lower_bound = 1;
    a->dims[0].length = 3;
    Kokkos::View<float*> b_data("b_data", 3);
    f32_3_1 b_value(&b_data);
    f32_3_1* b = &b_value;
    b->dims[0].lower_bound = 1;
    b->dims[0].length = 3;
    Kokkos::View<float*> r;
    r = from_std_vector<float>({(float)(1), (float)(2), (float)(3)});
    a->data = &r;
    Kokkos::View<float*> r;
    r = from_std_vector<float>({(float)(1), (float)(2), (float)(3)});
    b->data = &r;
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
