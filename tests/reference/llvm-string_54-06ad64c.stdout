; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

define i32 @__module_string_54_mod_double_(i32* %x) {
.entry:
  %ret = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = mul i32 %0, 2
  store i32 %1, i32* %ret, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load i32, i32* %ret, align 4
  ret i32 %2
}

define void @__module_string_54_mod_foo_sub(i32* %x, %string_descriptor* %char) {
.entry:
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %x = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = call i8* @_lfortran_malloc(i64 16)
  %char = bitcast i8* %2 to %string_descriptor*
  store %string_descriptor zeroinitializer, %string_descriptor* %char, align 1
  %3 = getelementptr %string_descriptor, %string_descriptor* %char, i32 0, i32 1
  store i64 10, i64* %3, align 4
  %4 = getelementptr %string_descriptor, %string_descriptor* %char, i32 0, i32 0
  %5 = call i8* @_lfortran_malloc(i64 11)
  call void @_lfortran_string_init(i64 11, i8* %5)
  store i8* %5, i8** %4, align 8
  %x1 = alloca i32, align 4
  store i32 10, i32* %x1, align 4
  call void @__module_string_54_mod_foo_sub(i32* %x1, %string_descriptor* %char)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_string_init(i64, i8*)

declare void @_lpython_free_argv()
