; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value9 = alloca i32, align 4
  %call_arg_value8 = alloca i32, align 4
  %call_arg_value7 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %array_bound3 = alloca i32, align 4
  %array_bound = alloca i32, align 4
  %__1_k = alloca i32, align 4
  %__libasr_index_0_ = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %__1_k1 = alloca i32, align 4
  %__libasr_index_0_2 = alloca i32, align 4
  %x = alloca [3 x i32], align 4
  %y = alloca [3 x i32], align 4
  br i1 true, label %then, label %else

then:                                             ; preds = %.entry
  store i32 1, i32* %array_bound, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %2 = load i32, i32* %array_bound, align 4
  %3 = sub i32 %2, 1
  store i32 %3, i32* %__libasr_index_0_2, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %ifcont
  %4 = load i32, i32* %__libasr_index_0_2, align 4
  %5 = add i32 %4, 1
  br i1 true, label %then4, label %else5

then4:                                            ; preds = %loop.head
  store i32 3, i32* %array_bound3, align 4
  br label %ifcont6

else5:                                            ; preds = %loop.head
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %6 = load i32, i32* %array_bound3, align 4
  %7 = icmp sle i32 %5, %6
  br i1 %7, label %loop.body, label %loop.end

loop.body:                                        ; preds = %ifcont6
  %8 = load i32, i32* %__libasr_index_0_2, align 4
  %9 = add i32 %8, 1
  store i32 %9, i32* %__libasr_index_0_2, align 4
  %10 = load i32, i32* %__libasr_index_0_2, align 4
  %11 = sub i32 %10, 1
  %12 = mul i32 1, %11
  %13 = add i32 0, %12
  %14 = getelementptr [3 x i32], [3 x i32]* %x, i32 0, i32 %13
  store i32 3, i32* %14, align 4
  br label %loop.head

loop.end:                                         ; preds = %ifcont6
  %15 = getelementptr [3 x i32], [3 x i32]* %x, i32 0, i32 0
  store i32 1, i32* %call_arg_value, align 4
  store i32 3, i32* %call_arg_value7, align 4
  %16 = getelementptr [3 x i32], [3 x i32]* %y, i32 0, i32 0
  store i32 1, i32* %call_arg_value8, align 4
  store i32 3, i32* %call_arg_value9, align 4
  call void @f_integer____0_integer____1(i32* %15, i32* %call_arg_value, i32* %call_arg_value7, i32* %16, i32* %call_arg_value8, i32* %call_arg_value9)
  %17 = getelementptr [3 x i32], [3 x i32]* %y, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr [3 x i32], [3 x i32]* %y, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr [3 x i32], [3 x i32]* %y, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 6, i8* null, i32 2, i64 %19, i32 2, i64 %22, i32 2, i64 %25)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  br label %return

return:                                           ; preds = %loop.end
  ret i32 0
}

define void @f_integer____0_integer____1(i32* %x, i32* %__1x, i32* %__2x, i32* %y, i32* %__1y, i32* %__2y) {
.entry:
  %__libasr_index_0_ = alloca i32, align 4
  %__libasr_index_0_1 = alloca i32, align 4
  %0 = load i32, i32* %__1x, align 4
  store i32 %0, i32* %__libasr_index_0_1, align 4
  %1 = load i32, i32* %__1y, align 4
  %2 = sub i32 %1, 1
  store i32 %2, i32* %__libasr_index_0_, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %3 = load i32, i32* %__libasr_index_0_, align 4
  %4 = add i32 %3, 1
  %5 = load i32, i32* %__2y, align 4
  %6 = load i32, i32* %__1y, align 4
  %7 = add i32 %5, %6
  %8 = sub i32 %7, 1
  %9 = icmp sle i32 %4, %8
  br i1 %9, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %10 = load i32, i32* %__libasr_index_0_, align 4
  %11 = add i32 %10, 1
  store i32 %11, i32* %__libasr_index_0_, align 4
  %12 = load i32, i32* %__libasr_index_0_, align 4
  %13 = load i32, i32* %__1y, align 4
  %14 = load i32, i32* %__2y, align 4
  %15 = sub i32 %12, %13
  %16 = mul i32 1, %15
  %17 = add i32 0, %16
  %18 = mul i32 1, %14
  %19 = getelementptr inbounds i32, i32* %y, i32 %17
  %20 = load i32, i32* %__libasr_index_0_1, align 4
  %21 = load i32, i32* %__1x, align 4
  %22 = load i32, i32* %__2x, align 4
  %23 = sub i32 %20, %21
  %24 = mul i32 1, %23
  %25 = add i32 0, %24
  %26 = mul i32 1, %22
  %27 = getelementptr inbounds i32, i32* %x, i32 %25
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %19, align 4
  %29 = load i32, i32* %__libasr_index_0_1, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %__libasr_index_0_1, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  ret void
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)
