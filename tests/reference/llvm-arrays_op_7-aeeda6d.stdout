; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\08\00", align 1
@5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

define void @f_integer____0_integer____1(i32* %x, i32* %__1x, i32* %__2x, i32* %y, i32* %__1y, i32* %__2y) {
.entry:
  %__1_t = alloca i32, align 4
  %__1_v = alloca i32, align 4
  %0 = load i32, i32* %__1x, align 4
  store i32 %0, i32* %__1_v, align 4
  %1 = load i32, i32* %__1y, align 4
  store i32 %1, i32* %__1_t, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %2 = load i32, i32* %__1_t, align 4
  %3 = load i32, i32* %__2y, align 4
  %4 = load i32, i32* %__1y, align 4
  %5 = add i32 %3, %4
  %6 = sub i32 %5, 1
  %7 = icmp sle i32 %2, %6
  br i1 %7, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %8 = load i32, i32* %__1_t, align 4
  %9 = load i32, i32* %__1y, align 4
  %10 = load i32, i32* %__2y, align 4
  %11 = sub i32 %8, %9
  %12 = mul i32 1, %11
  %13 = add i32 0, %12
  %14 = mul i32 1, %10
  %15 = getelementptr inbounds i32, i32* %y, i32 %13
  %16 = load i32, i32* %__1_v, align 4
  %17 = load i32, i32* %__1x, align 4
  %18 = load i32, i32* %__2x, align 4
  %19 = sub i32 %16, %17
  %20 = mul i32 1, %19
  %21 = add i32 0, %20
  %22 = mul i32 1, %18
  %23 = getelementptr inbounds i32, i32* %x, i32 %21
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %15, align 4
  %25 = load i32, i32* %__1_v, align 4
  %26 = add i32 %25, 1
  store i32 %26, i32* %__1_v, align 4
  %27 = load i32, i32* %__1_t, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %__1_t, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  ret void
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %array_bound13 = alloca i32, align 4
  %array_bound8 = alloca i32, align 4
  %call_arg_value7 = alloca i32, align 4
  %call_arg_value6 = alloca i32, align 4
  %call_arg_value5 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %array_bound1 = alloca i32, align 4
  %array_bound = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %__1_k = alloca i32, align 4
  %__1_t = alloca i32, align 4
  %x = alloca [3 x i32], align 4
  %y = alloca [3 x i32], align 4
  br i1 true, label %then, label %else

then:                                             ; preds = %.entry
  store i32 1, i32* %array_bound, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %2 = load i32, i32* %array_bound, align 4
  store i32 %2, i32* %__1_t, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %ifcont
  %3 = load i32, i32* %__1_t, align 4
  br i1 true, label %then2, label %else3

then2:                                            ; preds = %loop.head
  store i32 3, i32* %array_bound1, align 4
  br label %ifcont4

else3:                                            ; preds = %loop.head
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %4 = load i32, i32* %array_bound1, align 4
  %5 = icmp sle i32 %3, %4
  br i1 %5, label %loop.body, label %loop.end

loop.body:                                        ; preds = %ifcont4
  %6 = load i32, i32* %__1_t, align 4
  %7 = sub i32 %6, 1
  %8 = mul i32 1, %7
  %9 = add i32 0, %8
  %10 = getelementptr [3 x i32], [3 x i32]* %x, i32 0, i32 %9
  store i32 3, i32* %10, align 4
  %11 = load i32, i32* %__1_t, align 4
  %12 = add i32 %11, 1
  store i32 %12, i32* %__1_t, align 4
  br label %loop.head

loop.end:                                         ; preds = %ifcont4
  %13 = getelementptr [3 x i32], [3 x i32]* %x, i32 0, i32 0
  store i32 1, i32* %call_arg_value, align 4
  store i32 3, i32* %call_arg_value5, align 4
  %14 = getelementptr [3 x i32], [3 x i32]* %y, i32 0, i32 0
  store i32 1, i32* %call_arg_value6, align 4
  store i32 3, i32* %call_arg_value7, align 4
  call void @f_integer____0_integer____1(i32* %13, i32* %call_arg_value, i32* %call_arg_value5, i32* %14, i32* %call_arg_value6, i32* %call_arg_value7)
  br i1 true, label %then9, label %else10

then9:                                            ; preds = %loop.end
  store i32 1, i32* %array_bound8, align 4
  br label %ifcont11

else10:                                           ; preds = %loop.end
  br label %ifcont11

ifcont11:                                         ; preds = %else10, %then9
  %15 = load i32, i32* %array_bound8, align 4
  store i32 %15, i32* %__1_k, align 4
  br label %loop.head12

loop.head12:                                      ; preds = %loop.body17, %ifcont11
  %16 = load i32, i32* %__1_k, align 4
  br i1 true, label %then14, label %else15

then14:                                           ; preds = %loop.head12
  store i32 3, i32* %array_bound13, align 4
  br label %ifcont16

else15:                                           ; preds = %loop.head12
  br label %ifcont16

ifcont16:                                         ; preds = %else15, %then14
  %17 = load i32, i32* %array_bound13, align 4
  %18 = icmp sle i32 %16, %17
  br i1 %18, label %loop.body17, label %loop.end18

loop.body17:                                      ; preds = %ifcont16
  %19 = load i32, i32* %__1_k, align 4
  %20 = sub i32 %19, 1
  %21 = mul i32 1, %20
  %22 = add i32 0, %21
  %23 = getelementptr [3 x i32], [3 x i32]* %y, i32 0, i32 %22
  %24 = load i32, i32* %23, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %25 = load i32, i32* %__1_k, align 4
  %26 = add i32 %25, 1
  store i32 %26, i32* %__1_k, align 4
  br label %loop.head12

loop.end18:                                       ; preds = %ifcont16
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_printf(i8*, ...)
