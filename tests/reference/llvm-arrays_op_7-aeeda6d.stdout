; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

define void @f_x_y(i32* %x, i32* %__1x, i32* %__2x, i32* %y, i32* %__1y, i32* %__2y) {
.entry:
  %__1_k = alloca i32, align 4
  %0 = load i32, i32* %__1y, align 4
  %1 = sub i32 %0, 1
  store i32 %1, i32* %__1_k, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %2 = load i32, i32* %__1_k, align 4
  %3 = add i32 %2, 1
  %4 = load i32, i32* %__2y, align 4
  %5 = load i32, i32* %__1y, align 4
  %6 = add i32 %4, %5
  %7 = sub i32 %6, 1
  %8 = icmp sle i32 %3, %7
  br i1 %8, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %9 = load i32, i32* %__1_k, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %__1_k, align 4
  %11 = load i32, i32* %__1_k, align 4
  %12 = load i32, i32* %__1y, align 4
  %13 = load i32, i32* %__2y, align 4
  %14 = sub i32 %11, %12
  %15 = mul i32 1, %14
  %16 = add i32 0, %15
  %17 = mul i32 1, %13
  %18 = getelementptr inbounds i32, i32* %y, i32 %16
  %19 = load i32, i32* %__1_k, align 4
  %20 = load i32, i32* %__1x, align 4
  %21 = load i32, i32* %__2x, align 4
  %22 = sub i32 %19, %20
  %23 = mul i32 1, %22
  %24 = add i32 0, %23
  %25 = mul i32 1, %21
  %26 = getelementptr inbounds i32, i32* %x, i32 %24
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %18, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  ret void
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value3 = alloca i32, align 4
  %call_arg_value2 = alloca i32, align 4
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %__1_k = alloca i32, align 4
  %x = alloca %array, align 8
  %2 = getelementptr %array, %array* %x, i32 0, i32 1
  store i32 0, i32* %2, align 4
  %3 = getelementptr %array, %array* %x, i32 0, i32 2
  %4 = alloca i32, align 4
  store i32 1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = alloca %dimension_descriptor, i32 %5, align 8
  %7 = getelementptr %array, %array* %x, i32 0, i32 4
  store i32 1, i32* %7, align 4
  store %dimension_descriptor* %6, %dimension_descriptor** %3, align 8
  %8 = load %dimension_descriptor*, %dimension_descriptor** %3, align 8
  %9 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %8, i32 0
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 0
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 1
  %12 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 2
  store i32 1, i32* %10, align 4
  store i32 1, i32* %11, align 4
  store i32 3, i32* %12, align 4
  %13 = alloca i32, align 4
  store i32 3, i32* %13, align 4
  %14 = getelementptr %array, %array* %x, i32 0, i32 0
  %15 = load i32, i32* %13, align 4
  %16 = alloca i32, i32 %15, align 4
  store i32* %16, i32** %14, align 8
  %y = alloca %array, align 8
  %17 = getelementptr %array, %array* %y, i32 0, i32 1
  store i32 0, i32* %17, align 4
  %18 = getelementptr %array, %array* %y, i32 0, i32 2
  %19 = alloca i32, align 4
  store i32 1, i32* %19, align 4
  %20 = load i32, i32* %19, align 4
  %21 = alloca %dimension_descriptor, i32 %20, align 8
  %22 = getelementptr %array, %array* %y, i32 0, i32 4
  store i32 1, i32* %22, align 4
  store %dimension_descriptor* %21, %dimension_descriptor** %18, align 8
  %23 = load %dimension_descriptor*, %dimension_descriptor** %18, align 8
  %24 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %23, i32 0
  %25 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 0
  %26 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 1
  %27 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 2
  store i32 1, i32* %25, align 4
  store i32 1, i32* %26, align 4
  store i32 3, i32* %27, align 4
  %28 = alloca i32, align 4
  store i32 3, i32* %28, align 4
  %29 = getelementptr %array, %array* %y, i32 0, i32 0
  %30 = load i32, i32* %28, align 4
  %31 = alloca i32, i32 %30, align 4
  store i32* %31, i32** %29, align 8
  %32 = getelementptr %array, %array* %x, i32 0, i32 2
  %33 = load %dimension_descriptor*, %dimension_descriptor** %32, align 8
  %34 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %33, i32 0
  %35 = getelementptr %dimension_descriptor, %dimension_descriptor* %34, i32 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = sub i32 %36, 1
  store i32 %37, i32* %__1_k, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %38 = load i32, i32* %__1_k, align 4
  %39 = add i32 %38, 1
  %40 = getelementptr %array, %array* %x, i32 0, i32 2
  %41 = load %dimension_descriptor*, %dimension_descriptor** %40, align 8
  %42 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %41, i32 0
  %43 = getelementptr %dimension_descriptor, %dimension_descriptor* %42, i32 0, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr %dimension_descriptor, %dimension_descriptor* %42, i32 0, i32 2
  %46 = load i32, i32* %45, align 4
  %47 = add i32 %46, %44
  %48 = sub i32 %47, 1
  %49 = icmp sle i32 %39, %48
  br i1 %49, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %50 = load i32, i32* %__1_k, align 4
  %51 = add i32 %50, 1
  store i32 %51, i32* %__1_k, align 4
  %52 = load i32, i32* %__1_k, align 4
  %53 = getelementptr %array, %array* %x, i32 0, i32 2
  %54 = load %dimension_descriptor*, %dimension_descriptor** %53, align 8
  %55 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %54, i32 0
  %56 = getelementptr %dimension_descriptor, %dimension_descriptor* %55, i32 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = sub i32 %52, %57
  %59 = mul i32 1, %58
  %60 = add i32 0, %59
  %61 = getelementptr %dimension_descriptor, %dimension_descriptor* %55, i32 0, i32 2
  %62 = load i32, i32* %61, align 4
  %63 = mul i32 1, %62
  %64 = getelementptr %array, %array* %x, i32 0, i32 0
  %65 = load i32*, i32** %64, align 8
  %66 = getelementptr inbounds i32, i32* %65, i32 %60
  store i32 3, i32* %66, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %67 = getelementptr %array, %array* %x, i32 0, i32 0
  %68 = load i32*, i32** %67, align 8
  store i32 1, i32* %call_arg_value, align 4
  store i32 3, i32* %call_arg_value1, align 4
  %69 = getelementptr %array, %array* %y, i32 0, i32 0
  %70 = load i32*, i32** %69, align 8
  store i32 1, i32* %call_arg_value2, align 4
  store i32 3, i32* %call_arg_value3, align 4
  call void @f_x_y(i32* %68, i32* %call_arg_value, i32* %call_arg_value1, i32* %70, i32* %call_arg_value2, i32* %call_arg_value3)
  %71 = getelementptr %array, %array* %y, i32 0, i32 2
  %72 = load %dimension_descriptor*, %dimension_descriptor** %71, align 8
  %73 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %72, i32 0
  %74 = getelementptr %dimension_descriptor, %dimension_descriptor* %73, i32 0, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = sub i32 %75, 1
  store i32 %76, i32* %__1_k, align 4
  br label %loop.head4

loop.head4:                                       ; preds = %loop.body5, %loop.end
  %77 = load i32, i32* %__1_k, align 4
  %78 = add i32 %77, 1
  %79 = getelementptr %array, %array* %y, i32 0, i32 2
  %80 = load %dimension_descriptor*, %dimension_descriptor** %79, align 8
  %81 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %80, i32 0
  %82 = getelementptr %dimension_descriptor, %dimension_descriptor* %81, i32 0, i32 1
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr %dimension_descriptor, %dimension_descriptor* %81, i32 0, i32 2
  %85 = load i32, i32* %84, align 4
  %86 = add i32 %85, %83
  %87 = sub i32 %86, 1
  %88 = icmp sle i32 %78, %87
  br i1 %88, label %loop.body5, label %loop.end6

loop.body5:                                       ; preds = %loop.head4
  %89 = load i32, i32* %__1_k, align 4
  %90 = add i32 %89, 1
  store i32 %90, i32* %__1_k, align 4
  %91 = load i32, i32* %__1_k, align 4
  %92 = getelementptr %array, %array* %y, i32 0, i32 2
  %93 = load %dimension_descriptor*, %dimension_descriptor** %92, align 8
  %94 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %93, i32 0
  %95 = getelementptr %dimension_descriptor, %dimension_descriptor* %94, i32 0, i32 1
  %96 = load i32, i32* %95, align 4
  %97 = sub i32 %91, %96
  %98 = mul i32 1, %97
  %99 = add i32 0, %98
  %100 = getelementptr %dimension_descriptor, %dimension_descriptor* %94, i32 0, i32 2
  %101 = load i32, i32* %100, align 4
  %102 = mul i32 1, %101
  %103 = getelementptr %array, %array* %y, i32 0, i32 0
  %104 = load i32*, i32** %103, align 8
  %105 = getelementptr inbounds i32, i32* %104, i32 %99
  %106 = load i32, i32* %105, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %106, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  br label %loop.head4

loop.end6:                                        ; preds = %loop.head4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)
