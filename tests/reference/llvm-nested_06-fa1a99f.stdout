; ModuleID = 'LFortran'
source_filename = "LFortran"

%b_nstd_types = type { float* }

@b_nstd_strct = global %b_nstd_types zeroinitializer
@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [9 x i8] c"%13.8e%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [4 x i8] c"b()\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @__module_nested_06_a_b(float* %x) {
.entry:
  store float* %x, float** getelementptr inbounds (%b_nstd_types, %b_nstd_types* @b_nstd_strct, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  call void @__module_nested_06_a_c()
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @__module_nested_06_a_c() {
.entry:
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %0 = load float*, float** getelementptr inbounds (%b_nstd_types, %b_nstd_types* @b_nstd_strct, i32 0, i32 0), align 8
  %1 = load float, float* %0, align 4
  %2 = fpext float %1 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i32 0, i32 0), double %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca float, align 4
  call void @_lpython_set_argv(i32 %0, i8** %1)
  store float 6.000000e+00, float* %call_arg_value, align 4
  call void @__module_nested_06_a_b(float* %call_arg_value)
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)
