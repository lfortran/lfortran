; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [2 x i8] c" \00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@8 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@9 = private unnamed_addr constant [2 x i8] c" \00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1

define i32 @main() {
.entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %ifcont3, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = icmp sle i32 %1, 10
  br i1 %2, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %3 = load i32, i32* %i, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %i, align 4
  %7 = add i32 %5, %6
  store i32 %7, i32* %j, align 4
  %8 = load i32, i32* %i, align 4
  %9 = icmp eq i32 %8, 3
  br i1 %9, label %then, label %else

then:                                             ; preds = %loop.body
  br label %ifcont

else:                                             ; preds = %loop.body
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %10 = load i32, i32* %i, align 4
  %11 = icmp eq i32 %10, 2
  br i1 %11, label %then1, label %else2

then1:                                            ; preds = %ifcont
  br label %loop.end

unreachable_after_exit:                           ; No predecessors!
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %unreachable_after_exit
  br label %loop.head

loop.end:                                         ; preds = %then1, %loop.head
  %12 = load i32, i32* %j, align 4
  %13 = icmp ne i32 %12, 3
  br i1 %13, label %then4, label %else5

then4:                                            ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont6

else5:                                            ; preds = %loop.end
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %14 = load i32, i32* %j, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i32 %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head7

loop.head7:                                       ; preds = %ifcont12, %ifcont6
  %15 = load i32, i32* %i, align 4
  %16 = add i32 %15, 1
  %17 = icmp sle i32 %16, 10
  br i1 %17, label %loop.body8, label %loop.end13

loop.body8:                                       ; preds = %loop.head7
  %18 = load i32, i32* %i, align 4
  %19 = add i32 %18, 1
  store i32 %19, i32* %i, align 4
  %20 = load i32, i32* %i, align 4
  %21 = icmp eq i32 %20, 2
  br i1 %21, label %then9, label %else11

then9:                                            ; preds = %loop.body8
  br label %loop.end13

unreachable_after_exit10:                         ; No predecessors!
  br label %ifcont12

else11:                                           ; preds = %loop.body8
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %unreachable_after_exit10
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %i, align 4
  %24 = add i32 %22, %23
  store i32 %24, i32* %j, align 4
  br label %loop.head7

loop.end13:                                       ; preds = %then9, %loop.head7
  %25 = load i32, i32* %j, align 4
  %26 = icmp ne i32 %25, 1
  br i1 %26, label %then14, label %else15

then14:                                           ; preds = %loop.end13
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont16

else15:                                           ; preds = %loop.end13
  br label %ifcont16

ifcont16:                                         ; preds = %else15, %then14
  %27 = load i32, i32* %j, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i32 %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head17

loop.head17:                                      ; preds = %ifcont21, %then19, %ifcont16
  %28 = load i32, i32* %i, align 4
  %29 = add i32 %28, 1
  %30 = icmp sle i32 %29, 10
  br i1 %30, label %loop.body18, label %loop.end22

loop.body18:                                      ; preds = %loop.head17
  %31 = load i32, i32* %i, align 4
  %32 = add i32 %31, 1
  store i32 %32, i32* %i, align 4
  %33 = load i32, i32* %i, align 4
  %34 = icmp eq i32 %33, 2
  br i1 %34, label %then19, label %else20

then19:                                           ; preds = %loop.body18
  br label %loop.head17

unreachable_after_cycle:                          ; No predecessors!
  br label %ifcont21

else20:                                           ; preds = %loop.body18
  br label %ifcont21

ifcont21:                                         ; preds = %else20, %unreachable_after_cycle
  %35 = load i32, i32* %j, align 4
  %36 = load i32, i32* %i, align 4
  %37 = add i32 %35, %36
  store i32 %37, i32* %j, align 4
  br label %loop.head17

loop.end22:                                       ; preds = %loop.head17
  %38 = load i32, i32* %j, align 4
  %39 = icmp ne i32 %38, 53
  br i1 %39, label %then23, label %else24

then23:                                           ; preds = %loop.end22
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @8, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont25

else24:                                           ; preds = %loop.end22
  br label %ifcont25

ifcont25:                                         ; preds = %else24, %then23
  %40 = load i32, i32* %j, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i32 %40, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  ret i32 0
}

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lfortran_printf(i8*, ...)
