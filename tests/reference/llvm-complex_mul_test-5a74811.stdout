; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %x = alloca %complex_4, align 8
  %2 = alloca %complex_4, align 8
  %3 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 0
  %4 = getelementptr %complex_4, %complex_4* %2, i32 0, i32 1
  store float 3.000000e+00, float* %3, align 4
  store float 4.000000e+00, float* %4, align 4
  %5 = load %complex_4, %complex_4* %2, align 4
  store %complex_4 %5, %complex_4* %x, align 4
  %6 = load %complex_4, %complex_4* %x, align 4
  %7 = alloca %complex_4, align 8
  %8 = getelementptr %complex_4, %complex_4* %7, i32 0, i32 0
  %9 = getelementptr %complex_4, %complex_4* %7, i32 0, i32 1
  store float 4.000000e+00, float* %8, align 4
  store float 0.000000e+00, float* %9, align 4
  %10 = load %complex_4, %complex_4* %7, align 4
  %11 = alloca %complex_4, align 8
  store %complex_4 %6, %complex_4* %11, align 4
  %12 = alloca %complex_4, align 8
  store %complex_4 %10, %complex_4* %12, align 4
  %13 = alloca %complex_4, align 8
  call void @_lfortran_complex_mul_32(%complex_4* %11, %complex_4* %12, %complex_4* %13)
  %14 = load %complex_4, %complex_4* %13, align 4
  store %complex_4 %14, %complex_4* %x, align 4
  %15 = load %complex_4, %complex_4* %x, align 4
  %16 = alloca %complex_4, align 8
  store %complex_4 %15, %complex_4* %16, align 4
  %17 = getelementptr %complex_4, %complex_4* %16, i32 0, i32 0
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = alloca %complex_4, align 8
  store %complex_4 %15, %complex_4* %20, align 4
  %21 = getelementptr %complex_4, %complex_4* %20, i32 0, i32 1
  %22 = load float, float* %21, align 4
  %23 = fpext float %22 to double
  %24 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 6, double %19, i32 6, double %23)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %25 = alloca %complex_4, align 8
  %26 = getelementptr %complex_4, %complex_4* %25, i32 0, i32 0
  %27 = getelementptr %complex_4, %complex_4* %25, i32 0, i32 1
  store float 2.000000e+00, float* %26, align 4
  store float 0.000000e+00, float* %27, align 4
  %28 = load %complex_4, %complex_4* %25, align 4
  %29 = load %complex_4, %complex_4* %x, align 4
  %30 = alloca %complex_4, align 8
  store %complex_4 %28, %complex_4* %30, align 4
  %31 = alloca %complex_4, align 8
  store %complex_4 %29, %complex_4* %31, align 4
  %32 = alloca %complex_4, align 8
  call void @_lfortran_complex_mul_32(%complex_4* %30, %complex_4* %31, %complex_4* %32)
  %33 = load %complex_4, %complex_4* %32, align 4
  store %complex_4 %33, %complex_4* %x, align 4
  %34 = load %complex_4, %complex_4* %x, align 4
  %35 = alloca %complex_4, align 8
  store %complex_4 %34, %complex_4* %35, align 4
  %36 = getelementptr %complex_4, %complex_4* %35, i32 0, i32 0
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = alloca %complex_4, align 8
  store %complex_4 %34, %complex_4* %39, align 4
  %40 = getelementptr %complex_4, %complex_4* %39, i32 0, i32 1
  %41 = load float, float* %40, align 4
  %42 = fpext float %41 to double
  %43 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 6, double %38, i32 6, double %42)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %44 = load %complex_4, %complex_4* %x, align 4
  %45 = alloca %complex_4, align 8
  %46 = getelementptr %complex_4, %complex_4* %45, i32 0, i32 0
  %47 = getelementptr %complex_4, %complex_4* %45, i32 0, i32 1
  store float 0.000000e+00, float* %46, align 4
  store float 3.000000e+00, float* %47, align 4
  %48 = load %complex_4, %complex_4* %45, align 4
  %49 = alloca %complex_4, align 8
  store %complex_4 %44, %complex_4* %49, align 4
  %50 = alloca %complex_4, align 8
  store %complex_4 %48, %complex_4* %50, align 4
  %51 = alloca %complex_4, align 8
  call void @_lfortran_complex_mul_32(%complex_4* %49, %complex_4* %50, %complex_4* %51)
  %52 = load %complex_4, %complex_4* %51, align 4
  store %complex_4 %52, %complex_4* %x, align 4
  %53 = load %complex_4, %complex_4* %x, align 4
  %54 = alloca %complex_4, align 8
  store %complex_4 %53, %complex_4* %54, align 4
  %55 = getelementptr %complex_4, %complex_4* %54, i32 0, i32 0
  %56 = load float, float* %55, align 4
  %57 = fpext float %56 to double
  %58 = alloca %complex_4, align 8
  store %complex_4 %53, %complex_4* %58, align 4
  %59 = getelementptr %complex_4, %complex_4* %58, i32 0, i32 1
  %60 = load float, float* %59, align 4
  %61 = fpext float %60 to double
  %62 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 6, double %57, i32 6, double %61)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* %62, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lfortran_complex_mul_32(%complex_4*, %complex_4*, %complex_4*)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)
