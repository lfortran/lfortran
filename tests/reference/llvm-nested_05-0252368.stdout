; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@__module___lcompilers_created__nested_context__b____lcompilers_created__nested_context__b_x = global i32 0
@__module___lcompilers_created__nested_context__b____lcompilers_created__nested_context__b_y = global float 0.000000e+00
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [3 x i8] c"R4\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.2 = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.3 = private unnamed_addr constant [3 x i8] c"R4\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.4 = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.5 = private unnamed_addr constant [3 x i8] c"R4\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @__module_nested_05_a_b() {
.entry:
  %x = alloca i32, align 4
  %y = alloca float, align 4
  store i32 6, i32* %x, align 4
  store float 5.500000e+00, float* %y, align 4
  %0 = alloca i64, align 8
  %1 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.2, i32 0, i32 0), i64* %0, i32 0, i32 0, i32* %x)
  %2 = load i64, i64* %0, align 4
  %3 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %3 to %string_descriptor*
  %4 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %1, i8** %4, align 8
  %5 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %2, i64* %5, align 4
  %6 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %9 = load i64, i64* %8, align 4
  %10 = trunc i64 %9 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %7, i32 %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i32 1)
  %11 = alloca i64, align 8
  %12 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.3, i32 0, i32 0), i64* %11, i32 0, i32 0, float* %y)
  %13 = load i64, i64* %11, align 4
  %14 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc1 = bitcast i8* %14 to %string_descriptor*
  %15 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  store i8* %12, i8** %15, align 8
  %16 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  store i64 %13, i64* %16, align 4
  %17 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  %20 = load i64, i64* %19, align 4
  %21 = trunc i64 %20 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %18, i32 %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0), i32 1)
  %22 = load i32, i32* %x, align 4
  store i32 %22, i32* @__module___lcompilers_created__nested_context__b____lcompilers_created__nested_context__b_x, align 4
  %23 = load float, float* %y, align 4
  store float %23, float* @__module___lcompilers_created__nested_context__b____lcompilers_created__nested_context__b_y, align 4
  call void @b.__module_nested_05_a_c()
  %24 = load i32, i32* @__module___lcompilers_created__nested_context__b____lcompilers_created__nested_context__b_x, align 4
  store i32 %24, i32* %x, align 4
  %25 = load float, float* @__module___lcompilers_created__nested_context__b____lcompilers_created__nested_context__b_y, align 4
  store float %25, float* %y, align 4
  %26 = alloca i64, align 8
  %27 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.4, i32 0, i32 0), i64* %26, i32 0, i32 0, i32* %x)
  %28 = load i64, i64* %26, align 4
  %29 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc2 = bitcast i8* %29 to %string_descriptor*
  %30 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  store i8* %27, i8** %30, align 8
  %31 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  store i64 %28, i64* %31, align 4
  %32 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc2, i32 0, i32 1
  %35 = load i64, i64* %34, align 4
  %36 = trunc i64 %35 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* %33, i32 %36, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0), i32 1)
  %37 = alloca i64, align 8
  %38 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.5, i32 0, i32 0), i64* %37, i32 0, i32 0, float* %y)
  %39 = load i64, i64* %37, align 4
  %40 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc3 = bitcast i8* %40 to %string_descriptor*
  %41 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 0
  store i8* %38, i8** %41, align 8
  %42 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 1
  store i64 %39, i64* %42, align 4
  %43 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 1
  %46 = load i64, i64* %45, align 4
  %47 = trunc i64 %46 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* %44, i32 %47, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0), i32 1)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @b.__module_nested_05_a_c() {
.entry:
  %0 = alloca i64, align 8
  %1 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i64* %0, i32 0, i32 0, i32* @__module___lcompilers_created__nested_context__b____lcompilers_created__nested_context__b_x)
  %2 = load i64, i64* %0, align 4
  %3 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %3 to %string_descriptor*
  %4 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %1, i8** %4, align 8
  %5 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %2, i64* %5, align 4
  %6 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %9 = load i64, i64* %8, align 4
  %10 = trunc i64 %9 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %7, i32 %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  %11 = alloca i64, align 8
  %12 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.1, i32 0, i32 0), i64* %11, i32 0, i32 0, float* @__module___lcompilers_created__nested_context__b____lcompilers_created__nested_context__b_y)
  %13 = load i64, i64* %11, align 4
  %14 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc1 = bitcast i8* %14 to %string_descriptor*
  %15 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  store i8* %12, i8** %15, align 8
  %16 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  store i64 %13, i64* %16, align 4
  %17 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc1, i32 0, i32 1
  %20 = load i64, i64* %19, align 4
  %21 = trunc i64 %20 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %18, i32 %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  store i32 4, i32* @__module___lcompilers_created__nested_context__b____lcompilers_created__nested_context__b_x, align 4
  store float 3.500000e+00, float* @__module___lcompilers_created__nested_context__b____lcompilers_created__nested_context__b_y, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  call void @__module_nested_05_a_b()
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lpython_free_argv()
