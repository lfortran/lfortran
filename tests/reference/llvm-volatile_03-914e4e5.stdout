; ModuleID = 'LFortran'
source_filename = "LFortran"

@volatile_03.y = internal global i8* null
@0 = private unnamed_addr constant [2 x i8] c"2\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %x = alloca i8*, align 8
  %2 = call i8* @_lfortran_malloc(i32 2)
  call void @_lfortran_string_init(i64 2, i8* %2)
  store i8* %2, i8** %x, align 8
  %3 = load volatile i8*, i8** %x, align 8
  %4 = call i8* @_lfortran_malloc(i32 2)
  call void @_lfortran_string_init(i64 2, i8* %4)
  store i8* %4, i8** @volatile_03.y, align 8
  call void @_lfortran_strcpy_pointer_string(i8** @volatile_03.y, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  %5 = load i8*, i8** @volatile_03.y, align 8
  %6 = load i8*, i8** %x, align 8
  call void @_lfortran_strcpy_pointer_string(i8** @volatile_03.y, i8* %6)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i32)

declare void @_lfortran_string_init(i64, i8*)

declare void @_lfortran_strcpy_pointer_string(i8**, i8*)

declare void @_lpython_free_argv()
