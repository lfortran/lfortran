; ModuleID = 'LFortran'
source_filename = "LFortran"

%complextype = type { float, float }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [28 x i8] c"Calling integer_add_subrout\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@6 = private unnamed_addr constant [25 x i8] c"Calling real_add_subrout\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c" \00", align 1
@9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@10 = private unnamed_addr constant [17 x i8] c"%13.8e%s%13.8e%s\00", align 1
@11 = private unnamed_addr constant [2 x i8] c" \00", align 1
@12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@13 = private unnamed_addr constant [17 x i8] c"%13.8e%s%13.8e%s\00", align 1

define void @__module_complex_module_integer_add_subrout(%complextype* %this, i32* %r, i32* %i, %complextype* %sum) {
.entry:
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %0 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %1 = getelementptr %complextype, %complextype* %this, i32 0, i32 1
  %2 = load float, float* %1, align 4
  %3 = load i32, i32* %r, align 4
  %4 = sitofp i32 %3 to float
  %5 = fadd float %2, %4
  store float %5, float* %0, align 4
  %6 = getelementptr %complextype, %complextype* %sum, i32 0, i32 0
  %7 = getelementptr %complextype, %complextype* %this, i32 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = load i32, i32* %i, align 4
  %10 = sitofp i32 %9 to float
  %11 = fadd float %8, %10
  store float %11, float* %6, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @__module_complex_module_real_add_subrout(%complextype* %this, float* %r, float* %i, %complextype* %sum) {
.entry:
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  %0 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %1 = getelementptr %complextype, %complextype* %this, i32 0, i32 1
  %2 = load float, float* %1, align 4
  %3 = load float, float* %r, align 4
  %4 = fadd float %2, %3
  store float %4, float* %0, align 4
  %5 = getelementptr %complextype, %complextype* %sum, i32 0, i32 0
  %6 = getelementptr %complextype, %complextype* %this, i32 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = load float, float* %i, align 4
  %9 = fadd float %7, %8
  store float %9, float* %5, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %a = alloca %complextype, align 8
  %2 = getelementptr %complextype, %complextype* %a, i32 0, i32 0
  %3 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %c = alloca %complextype, align 8
  %4 = getelementptr %complextype, %complextype* %c, i32 0, i32 0
  %5 = getelementptr %complextype, %complextype* %c, i32 0, i32 1
  %fpone = alloca float, align 4
  %fptwo = alloca float, align 4
  %fpzero = alloca float, align 4
  %ione = alloca i32, align 4
  %izero = alloca i32, align 4
  %negfpone = alloca float, align 4
  store float 1.000000e+00, float* %fpone, align 4
  store float 2.000000e+00, float* %fptwo, align 4
  store float 0.000000e+00, float* %fpzero, align 4
  store i32 1, i32* %ione, align 4
  store i32 0, i32* %izero, align 4
  store float -1.000000e+00, float* %negfpone, align 4
  %6 = getelementptr %complextype, %complextype* %c, i32 0, i32 1
  %7 = load float, float* %fpone, align 4
  store float %7, float* %6, align 4
  %8 = getelementptr %complextype, %complextype* %c, i32 0, i32 0
  %9 = load float, float* %fptwo, align 4
  store float %9, float* %8, align 4
  call void @__module_complex_module_integer_add_subrout(%complextype* %c, i32* %ione, i32* %izero, %complextype* %a)
  %10 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = fpext float %11 to double
  %13 = getelementptr %complextype, %complextype* %a, i32 0, i32 0
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @10, i32 0, i32 0), double %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0), double %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  call void @__module_complex_module_real_add_subrout(%complextype* %c, float* %fpzero, float* %negfpone, %complextype* %a)
  %16 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = getelementptr %complextype, %complextype* %a, i32 0, i32 0
  %20 = load float, float* %19, align 4
  %21 = fpext float %20 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @13, i32 0, i32 0), double %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i32 0, i32 0), double %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0))
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)
