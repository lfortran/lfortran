; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>
%complextype = type <{ i32 (...)**, float, float }>

@_Name_complextype = private unnamed_addr constant [12 x i8] c"complextype\00", align 1
@_Type_Info_complextype = linkonce_odr unnamed_addr constant { i8* } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @_Name_complextype, i32 0, i32 0) }, align 8
@_VTable_complextype = linkonce_odr unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8* }* @_Type_Info_complextype to i8*), i8* bitcast (void (i8*, i8*)* @_copy_complex_module_complextype to i8*), i8* bitcast (void (%complextype*, i32*, i32*, %complextype*)* @__module_complex_module_integer_add_subrout to i8*), i8* bitcast (void (%complextype*, float*, float*, %complextype*)* @__module_complex_module_real_add_subrout to i8*)] }, align 8
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data = private constant [27 x i8] c"Calling integer_add_subrout"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([27 x i8], [27 x i8]* @string_const_data, i32 0, i32 0), i64 27 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.1 = private constant [24 x i8] c"Calling real_add_subrout"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([24 x i8], [24 x i8]* @string_const_data.1, i32 0, i32 0), i64 24 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [6 x i8] c"R4,R4\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@"ERROR STOP" = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.3 = private unnamed_addr constant [6 x i8] c"R4,R4\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@13 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@15 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @__module_complex_module_integer_add_subrout(%complextype* %this, i32* %r, i32* %i, %complextype* %sum) {
.entry:
  %0 = getelementptr %complextype, %complextype* %sum, i32 0, i32 2
  %1 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %2 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %2, i32 27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  %3 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %4 = getelementptr %complextype, %complextype* %this, i32 0, i32 1
  %5 = load float, float* %4, align 4
  %6 = load i32, i32* %r, align 4
  %7 = sitofp i32 %6 to float
  %8 = fadd float %5, %7
  store float %8, float* %3, align 4
  %9 = getelementptr %complextype, %complextype* %sum, i32 0, i32 2
  %10 = getelementptr %complextype, %complextype* %this, i32 0, i32 2
  %11 = load float, float* %10, align 4
  %12 = load i32, i32* %i, align 4
  %13 = sitofp i32 %12 to float
  %14 = fadd float %11, %13
  store float %14, float* %9, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @__module_complex_module_real_add_subrout(%complextype* %this, float* %r, float* %i, %complextype* %sum) {
.entry:
  %0 = getelementptr %complextype, %complextype* %sum, i32 0, i32 2
  %1 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %2 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %2, i32 24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  %3 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %4 = getelementptr %complextype, %complextype* %this, i32 0, i32 1
  %5 = load float, float* %4, align 4
  %6 = load float, float* %r, align 4
  %7 = fadd float %5, %6
  store float %7, float* %3, align 4
  %8 = getelementptr %complextype, %complextype* %sum, i32 0, i32 2
  %9 = getelementptr %complextype, %complextype* %this, i32 0, i32 2
  %10 = load float, float* %9, align 4
  %11 = load float, float* %i, align 4
  %12 = fadd float %10, %11
  store float %12, float* %8, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @_copy_complex_module_complextype(i8* %0, i8* %1) {
entry:
  %2 = bitcast i8* %0 to %complextype*
  %3 = bitcast i8* %1 to %complextype*
  %4 = bitcast %complextype* %3 to i32 (...)***
  %5 = load i32 (...)**, i32 (...)*** %4, align 8
  %6 = bitcast %complextype* %2 to i32 (...)***
  store i32 (...)** %5, i32 (...)*** %6, align 8
  %7 = getelementptr %complextype, %complextype* %2, i32 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = getelementptr %complextype, %complextype* %3, i32 0, i32 1
  br i1 true, label %then, label %else

then:                                             ; preds = %entry
  store float %8, float* %9, align 4
  br label %ifcont

else:                                             ; preds = %entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %10 = getelementptr %complextype, %complextype* %2, i32 0, i32 2
  %11 = load float, float* %10, align 4
  %12 = getelementptr %complextype, %complextype* %3, i32 0, i32 2
  br i1 true, label %then1, label %else2

then1:                                            ; preds = %ifcont
  store float %11, float* %12, align 4
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %13 = bitcast %complextype* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_VTable_complextype, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %13, align 8
  ret void
}

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %ione = alloca i32, align 4
  %izero = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %a = alloca %complextype, align 8
  %2 = bitcast %complextype* %a to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_VTable_complextype, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr %complextype, %complextype* %a, i32 0, i32 2
  %4 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %c = alloca %complextype, align 8
  %5 = bitcast %complextype* %c to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_VTable_complextype, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr %complextype, %complextype* %c, i32 0, i32 2
  %7 = getelementptr %complextype, %complextype* %c, i32 0, i32 1
  %fpone = alloca float, align 4
  %fptwo = alloca float, align 4
  %fpzero = alloca float, align 4
  %ione1 = alloca i32, align 4
  %izero2 = alloca i32, align 4
  %negfpone = alloca float, align 4
  store float 1.000000e+00, float* %fpone, align 4
  store float 2.000000e+00, float* %fptwo, align 4
  store float 0.000000e+00, float* %fpzero, align 4
  store i32 1, i32* %ione1, align 4
  store i32 0, i32* %izero2, align 4
  store float -1.000000e+00, float* %negfpone, align 4
  %8 = getelementptr %complextype, %complextype* %c, i32 0, i32 1
  %9 = load float, float* %fpone, align 4
  store float %9, float* %8, align 4
  %10 = getelementptr %complextype, %complextype* %c, i32 0, i32 2
  %11 = load float, float* %fptwo, align 4
  store float %11, float* %10, align 4
  call void @__module_complex_module_integer_add_subrout(%complextype* %c, i32* %ione1, i32* %izero2, %complextype* %a)
  %12 = alloca i64, align 8
  %13 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = alloca float, align 4
  store float %14, float* %15, align 4
  %16 = getelementptr %complextype, %complextype* %a, i32 0, i32 2
  %17 = load float, float* %16, align 4
  %18 = alloca float, align 4
  store float %17, float* %18, align 4
  %19 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @serialization_info, i32 0, i32 0), i64* %12, i32 0, i32 0, float* %15, float* %18)
  %20 = load i64, i64* %12, align 4
  %stringFormat_desc = alloca %string_descriptor, align 8
  %21 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %19, i8** %21, align 8
  %22 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %20, i64* %22, align 4
  %23 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %26 = load i64, i64* %25, align 4
  %27 = trunc i64 %26 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %24, i32 %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i32 1)
  call void @_lfortran_free(i8* %19)
  %28 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %29 = load float, float* %28, align 4
  %30 = fcmp une float %29, 2.000000e+00
  br i1 %30, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %31 = getelementptr %complextype, %complextype* %a, i32 0, i32 2
  %32 = load float, float* %31, align 4
  %33 = fcmp une float %32, 2.000000e+00
  br i1 %33, label %then3, label %else4

then3:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont5

else4:                                            ; preds = %ifcont
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  call void @__module_complex_module_real_add_subrout(%complextype* %c, float* %fpzero, float* %negfpone, %complextype* %a)
  %34 = alloca i64, align 8
  %35 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %36 = load float, float* %35, align 4
  %37 = alloca float, align 4
  store float %36, float* %37, align 4
  %38 = getelementptr %complextype, %complextype* %a, i32 0, i32 2
  %39 = load float, float* %38, align 4
  %40 = alloca float, align 4
  store float %39, float* %40, align 4
  %41 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @serialization_info.3, i32 0, i32 0), i64* %34, i32 0, i32 0, float* %37, float* %40)
  %42 = load i64, i64* %34, align 4
  %stringFormat_desc6 = alloca %string_descriptor, align 8
  %43 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 0
  store i8* %41, i8** %43, align 8
  %44 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 1
  store i64 %42, i64* %44, align 4
  %45 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 1
  %48 = load i64, i64* %47, align 4
  %49 = trunc i64 %48 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* %46, i32 %49, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0), i32 1)
  call void @_lfortran_free(i8* %41)
  %50 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %51 = load float, float* %50, align 4
  %52 = fcmp une float %51, 1.000000e+00
  br i1 %52, label %then7, label %else8

then7:                                            ; preds = %ifcont5
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @13, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont9

else8:                                            ; preds = %ifcont5
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %53 = getelementptr %complextype, %complextype* %a, i32 0, i32 2
  %54 = load float, float* %53, align 4
  %55 = fcmp une float %54, 1.000000e+00
  br i1 %55, label %then10, label %else11

then10:                                           ; preds = %ifcont9
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"ERROR STOP", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont12

else11:                                           ; preds = %ifcont9
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont12
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare void @_lfortran_free(i8*)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
