; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>
%complextype_polymorphic = type { i64, %complextype* }
%complextype = type <{ float, float }>

@__vtab_complextype = external global i64
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data = private constant [28 x i8] c"Calling integer_add_subrout\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([28 x i8], [28 x i8]* @string_const_data, i32 0, i32 0), i64 27 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.1 = private constant [25 x i8] c"Calling real_add_subrout\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([25 x i8], [25 x i8]* @string_const_data.1, i32 0, i32 0), i64 24 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [6 x i8] c"R4,R4\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.3 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.3, i32 0, i32 0), i64 10 }>
@string_const_data.5 = private constant [2 x i8] c"\0A\00"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.5, i32 0, i32 0), i64 1 }>
@6 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.7 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.8 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.7, i32 0, i32 0), i64 10 }>
@string_const_data.9 = private constant [2 x i8] c"\0A\00"
@string_const.10 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.9, i32 0, i32 0), i64 1 }>
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.11 = private unnamed_addr constant [6 x i8] c"R4,R4\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.12 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.13 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.12, i32 0, i32 0), i64 10 }>
@string_const_data.14 = private constant [2 x i8] c"\0A\00"
@string_const.15 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.14, i32 0, i32 0), i64 1 }>
@10 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.16 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.17 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.16, i32 0, i32 0), i64 10 }>
@string_const_data.18 = private constant [2 x i8] c"\0A\00"
@string_const.19 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.18, i32 0, i32 0), i64 1 }>
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @__module_complex_module_integer_add_subrout(%complextype_polymorphic* %this, i32* %r, i32* %i, %complextype* %sum) {
.entry:
  %0 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %1 = getelementptr %complextype, %complextype* %sum, i32 0, i32 0
  %2 = alloca i64, align 8
  store i64 0, i64* %2, align 4
  %3 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  %4 = getelementptr %complextype, %complextype* %sum, i32 0, i32 0
  %5 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %this, i32 0, i32 1
  %6 = load %complextype*, %complextype** %5, align 8
  %7 = getelementptr %complextype, %complextype* %6, i32 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = load i32, i32* %r, align 4
  %10 = sitofp i32 %9 to float
  %11 = fadd float %8, %10
  store float %11, float* %4, align 4
  %12 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %13 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %this, i32 0, i32 1
  %14 = load %complextype*, %complextype** %13, align 8
  %15 = getelementptr %complextype, %complextype* %14, i32 0, i32 1
  %16 = load float, float* %15, align 4
  %17 = load i32, i32* %i, align 4
  %18 = sitofp i32 %17 to float
  %19 = fadd float %16, %18
  store float %19, float* %12, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @__module_complex_module_real_add_subrout(%complextype_polymorphic* %this, float* %r, float* %i, %complextype* %sum) {
.entry:
  %0 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %1 = getelementptr %complextype, %complextype* %sum, i32 0, i32 0
  %2 = alloca i64, align 8
  store i64 0, i64* %2, align 4
  %3 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  %4 = getelementptr %complextype, %complextype* %sum, i32 0, i32 0
  %5 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %this, i32 0, i32 1
  %6 = load %complextype*, %complextype** %5, align 8
  %7 = getelementptr %complextype, %complextype* %6, i32 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = load float, float* %r, align 4
  %10 = fadd float %8, %9
  store float %10, float* %4, align 4
  %11 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %12 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %this, i32 0, i32 1
  %13 = load %complextype*, %complextype** %12, align 8
  %14 = getelementptr %complextype, %complextype* %13, i32 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = load float, float* %i, align 4
  %17 = fadd float %15, %16
  store float %17, float* %11, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %ione = alloca i32, align 4
  %izero = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = alloca i64, align 8
  store i64 0, i64* %2, align 4
  %a = alloca %complextype, align 8
  %3 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %4 = getelementptr %complextype, %complextype* %a, i32 0, i32 0
  %c = alloca %complextype, align 8
  %5 = getelementptr %complextype, %complextype* %c, i32 0, i32 1
  %6 = getelementptr %complextype, %complextype* %c, i32 0, i32 0
  %fpone = alloca float, align 4
  %fptwo = alloca float, align 4
  %fpzero = alloca float, align 4
  %ione1 = alloca i32, align 4
  %izero2 = alloca i32, align 4
  %negfpone = alloca float, align 4
  store float 1.000000e+00, float* %fpone, align 4
  store float 2.000000e+00, float* %fptwo, align 4
  store float 0.000000e+00, float* %fpzero, align 4
  store i32 1, i32* %ione1, align 4
  store i32 0, i32* %izero2, align 4
  store float -1.000000e+00, float* %negfpone, align 4
  %7 = getelementptr %complextype, %complextype* %c, i32 0, i32 0
  %8 = load float, float* %fpone, align 4
  store float %8, float* %7, align 4
  %9 = getelementptr %complextype, %complextype* %c, i32 0, i32 1
  %10 = load float, float* %fptwo, align 4
  store float %10, float* %9, align 4
  %11 = alloca %complextype_polymorphic, align 8
  %12 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %11, i32 0, i32 0
  store i64 0, i64* %12, align 4
  %13 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %11, i32 0, i32 1
  store %complextype* %c, %complextype** %13, align 8
  call void @__module_complex_module_integer_add_subrout(%complextype_polymorphic* %11, i32* %ione1, i32* %izero2, %complextype* %a)
  %14 = getelementptr %complextype, %complextype* %a, i32 0, i32 0
  %15 = load float, float* %14, align 4
  %16 = alloca float, align 4
  store float %15, float* %16, align 4
  %17 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %18 = load float, float* %17, align 4
  %19 = alloca float, align 4
  store float %18, float* %19, align 4
  %20 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, float* %16, float* %19)
  %21 = call i64 @_lfortran_str_len(i8* %20)
  %22 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %22 to %string_descriptor*
  %23 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %20, i8** %23, align 8
  %24 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %21, i64* %24, align 4
  %25 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %27 = getelementptr %complextype, %complextype* %a, i32 0, i32 0
  %28 = load float, float* %27, align 4
  %29 = fcmp une float %28, 2.000000e+00
  br i1 %29, label %then, label %else

then:                                             ; preds = %.entry
  %30 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  %31 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.6, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i8* %30, i8* %31)
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %32 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %33 = load float, float* %32, align 4
  %34 = fcmp une float %33, 2.000000e+00
  br i1 %34, label %then3, label %else4

then3:                                            ; preds = %ifcont
  %35 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.8, i32 0, i32 0), align 8
  %36 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.10, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %35, i8* %36)
  call void @exit(i32 1)
  br label %ifcont5

else4:                                            ; preds = %ifcont
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  %37 = alloca %complextype_polymorphic, align 8
  %38 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %37, i32 0, i32 0
  store i64 0, i64* %38, align 4
  %39 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %37, i32 0, i32 1
  store %complextype* %c, %complextype** %39, align 8
  call void @__module_complex_module_real_add_subrout(%complextype_polymorphic* %37, float* %fpzero, float* %negfpone, %complextype* %a)
  %40 = getelementptr %complextype, %complextype* %a, i32 0, i32 0
  %41 = load float, float* %40, align 4
  %42 = alloca float, align 4
  store float %41, float* %42, align 4
  %43 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %44 = load float, float* %43, align 4
  %45 = alloca float, align 4
  store float %44, float* %45, align 4
  %46 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @serialization_info.11, i32 0, i32 0), i32 0, i32 0, float* %42, float* %45)
  %47 = call i64 @_lfortran_str_len(i8* %46)
  %48 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc6 = bitcast i8* %48 to %string_descriptor*
  %49 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 0
  store i8* %46, i8** %49, align 8
  %50 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 1
  store i64 %47, i64* %50, align 4
  %51 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* %52, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0))
  %53 = getelementptr %complextype, %complextype* %a, i32 0, i32 0
  %54 = load float, float* %53, align 4
  %55 = fcmp une float %54, 1.000000e+00
  br i1 %55, label %then7, label %else8

then7:                                            ; preds = %ifcont5
  %56 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.13, i32 0, i32 0), align 8
  %57 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.15, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0), i8* %56, i8* %57)
  call void @exit(i32 1)
  br label %ifcont9

else8:                                            ; preds = %ifcont5
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %58 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %59 = load float, float* %58, align 4
  %60 = fcmp une float %59, 1.000000e+00
  br i1 %60, label %then10, label %else11

then10:                                           ; preds = %ifcont9
  %61 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.17, i32 0, i32 0), align 8
  %62 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.19, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* %61, i8* %62)
  call void @exit(i32 1)
  br label %ifcont12

else11:                                           ; preds = %ifcont9
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont12
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
