; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>
%complextype_polymorphic = type { i64, %complextype* }
%complextype = type <{ float, float }>
%__vtab_complextype = type { i64 }

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data = private constant [28 x i8] c"Calling integer_add_subrout\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([28 x i8], [28 x i8]* @string_const_data, i32 0, i32 0), i64 27 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data.1 = private constant [25 x i8] c"Calling real_add_subrout\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([25 x i8], [25 x i8]* @string_const_data.1, i32 0, i32 0), i64 24 }>
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [6 x i8] c"R4,R4\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.3 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.4 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.3, i32 0, i32 0), i64 10 }>
@string_const_data.5 = private constant [2 x i8] c"\0A\00"
@string_const.6 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.5, i32 0, i32 0), i64 1 }>
@6 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.7 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.8 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.7, i32 0, i32 0), i64 10 }>
@string_const_data.9 = private constant [2 x i8] c"\0A\00"
@string_const.10 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.9, i32 0, i32 0), i64 1 }>
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.11 = private unnamed_addr constant [6 x i8] c"R4,R4\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.12 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.13 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.12, i32 0, i32 0), i64 10 }>
@string_const_data.14 = private constant [2 x i8] c"\0A\00"
@string_const.15 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.14, i32 0, i32 0), i64 1 }>
@10 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@string_const_data.16 = private constant [11 x i8] c"ERROR STOP\00"
@string_const.17 = private global %string_descriptor <{ i8* getelementptr inbounds ([11 x i8], [11 x i8]* @string_const_data.16, i32 0, i32 0), i64 10 }>
@string_const_data.18 = private constant [2 x i8] c"\0A\00"
@string_const.19 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.18, i32 0, i32 0), i64 1 }>
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @__module_complex_module_integer_add_subrout(%complextype_polymorphic* %this, i32* %r, i32* %i, %complextype* %sum) {
.entry:
  %0 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %1 = getelementptr %complextype, %complextype* %sum, i32 0, i32 0
  %2 = alloca %__vtab_complextype, align 8
  %3 = getelementptr %__vtab_complextype, %__vtab_complextype* %2, i32 0, i32 0
  store i64 0, i64* %3, align 4
  %4 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %4, i64 27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i64 1)
  %5 = getelementptr %complextype, %complextype* %sum, i32 0, i32 0
  %6 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %this, i32 0, i32 1
  %7 = load %complextype*, %complextype** %6, align 8
  %8 = getelementptr %complextype, %complextype* %7, i32 0, i32 0
  %9 = load float, float* %8, align 4
  %10 = load i32, i32* %r, align 4
  %11 = sitofp i32 %10 to float
  %12 = fadd float %9, %11
  store float %12, float* %5, align 4
  %13 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %14 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %this, i32 0, i32 1
  %15 = load %complextype*, %complextype** %14, align 8
  %16 = getelementptr %complextype, %complextype* %15, i32 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = load i32, i32* %i, align 4
  %19 = sitofp i32 %18 to float
  %20 = fadd float %17, %19
  store float %20, float* %13, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @__module_complex_module_real_add_subrout(%complextype_polymorphic* %this, float* %r, float* %i, %complextype* %sum) {
.entry:
  %0 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %1 = getelementptr %complextype, %complextype* %sum, i32 0, i32 0
  %2 = alloca %__vtab_complextype, align 8
  %3 = getelementptr %__vtab_complextype, %__vtab_complextype* %2, i32 0, i32 0
  store i64 0, i64* %3, align 4
  %4 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %4, i64 24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i64 1)
  %5 = getelementptr %complextype, %complextype* %sum, i32 0, i32 0
  %6 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %this, i32 0, i32 1
  %7 = load %complextype*, %complextype** %6, align 8
  %8 = getelementptr %complextype, %complextype* %7, i32 0, i32 0
  %9 = load float, float* %8, align 4
  %10 = load float, float* %r, align 4
  %11 = fadd float %9, %10
  store float %11, float* %5, align 4
  %12 = getelementptr %complextype, %complextype* %sum, i32 0, i32 1
  %13 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %this, i32 0, i32 1
  %14 = load %complextype*, %complextype** %13, align 8
  %15 = getelementptr %complextype, %complextype* %14, i32 0, i32 1
  %16 = load float, float* %15, align 4
  %17 = load float, float* %i, align 4
  %18 = fadd float %16, %17
  store float %18, float* %12, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_printf(i8*, i8*, i64, i8*, i64)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %ione = alloca i32, align 4
  %izero = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = alloca %__vtab_complextype, align 8
  %3 = getelementptr %__vtab_complextype, %__vtab_complextype* %2, i32 0, i32 0
  store i64 0, i64* %3, align 4
  %a = alloca %complextype, align 8
  %4 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %5 = getelementptr %complextype, %complextype* %a, i32 0, i32 0
  %c = alloca %complextype, align 8
  %6 = getelementptr %complextype, %complextype* %c, i32 0, i32 1
  %7 = getelementptr %complextype, %complextype* %c, i32 0, i32 0
  %fpone = alloca float, align 4
  %fptwo = alloca float, align 4
  %fpzero = alloca float, align 4
  %ione1 = alloca i32, align 4
  %izero2 = alloca i32, align 4
  %negfpone = alloca float, align 4
  store float 1.000000e+00, float* %fpone, align 4
  store float 2.000000e+00, float* %fptwo, align 4
  store float 0.000000e+00, float* %fpzero, align 4
  store i32 1, i32* %ione1, align 4
  store i32 0, i32* %izero2, align 4
  store float -1.000000e+00, float* %negfpone, align 4
  %8 = getelementptr %complextype, %complextype* %c, i32 0, i32 0
  %9 = load float, float* %fpone, align 4
  store float %9, float* %8, align 4
  %10 = getelementptr %complextype, %complextype* %c, i32 0, i32 1
  %11 = load float, float* %fptwo, align 4
  store float %11, float* %10, align 4
  %12 = alloca %complextype_polymorphic, align 8
  %13 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %12, i32 0, i32 0
  store i64 0, i64* %13, align 4
  %14 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %12, i32 0, i32 1
  store %complextype* %c, %complextype** %14, align 8
  call void @__module_complex_module_integer_add_subrout(%complextype_polymorphic* %12, i32* %ione1, i32* %izero2, %complextype* %a)
  %15 = getelementptr %complextype, %complextype* %a, i32 0, i32 0
  %16 = load float, float* %15, align 4
  %17 = alloca float, align 4
  store float %16, float* %17, align 4
  %18 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %19 = load float, float* %18, align 4
  %20 = alloca float, align 4
  store float %19, float* %20, align 4
  %21 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, float* %17, float* %20)
  %22 = call i64 @_lfortran_str_len(i8* %21)
  %23 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %23 to %string_descriptor*
  %24 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %21, i8** %24, align 8
  %25 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %22, i64* %25, align 4
  %26 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %29 = load i64, i64* %28, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %27, i64 %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i64 1)
  %30 = getelementptr %complextype, %complextype* %a, i32 0, i32 0
  %31 = load float, float* %30, align 4
  %32 = fcmp une float %31, 2.000000e+00
  br i1 %32, label %then, label %else

then:                                             ; preds = %.entry
  %33 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.4, i32 0, i32 0), align 8
  %34 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.6, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i8* %33, i8* %34)
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %35 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %36 = load float, float* %35, align 4
  %37 = fcmp une float %36, 2.000000e+00
  br i1 %37, label %then3, label %else4

then3:                                            ; preds = %ifcont
  %38 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.8, i32 0, i32 0), align 8
  %39 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.10, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %38, i8* %39)
  call void @exit(i32 1)
  br label %ifcont5

else4:                                            ; preds = %ifcont
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  %40 = alloca %complextype_polymorphic, align 8
  %41 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %40, i32 0, i32 0
  store i64 0, i64* %41, align 4
  %42 = getelementptr %complextype_polymorphic, %complextype_polymorphic* %40, i32 0, i32 1
  store %complextype* %c, %complextype** %42, align 8
  call void @__module_complex_module_real_add_subrout(%complextype_polymorphic* %40, float* %fpzero, float* %negfpone, %complextype* %a)
  %43 = getelementptr %complextype, %complextype* %a, i32 0, i32 0
  %44 = load float, float* %43, align 4
  %45 = alloca float, align 4
  store float %44, float* %45, align 4
  %46 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %47 = load float, float* %46, align 4
  %48 = alloca float, align 4
  store float %47, float* %48, align 4
  %49 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @serialization_info.11, i32 0, i32 0), i32 0, i32 0, float* %45, float* %48)
  %50 = call i64 @_lfortran_str_len(i8* %49)
  %51 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc6 = bitcast i8* %51 to %string_descriptor*
  %52 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 0
  store i8* %49, i8** %52, align 8
  %53 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 1
  store i64 %50, i64* %53, align 4
  %54 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc6, i32 0, i32 1
  %57 = load i64, i64* %56, align 4
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* %55, i64 %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0), i64 1)
  %58 = getelementptr %complextype, %complextype* %a, i32 0, i32 0
  %59 = load float, float* %58, align 4
  %60 = fcmp une float %59, 1.000000e+00
  br i1 %60, label %then7, label %else8

then7:                                            ; preds = %ifcont5
  %61 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.13, i32 0, i32 0), align 8
  %62 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.15, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0), i8* %61, i8* %62)
  call void @exit(i32 1)
  br label %ifcont9

else8:                                            ; preds = %ifcont5
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %63 = getelementptr %complextype, %complextype* %a, i32 0, i32 1
  %64 = load float, float* %63, align 4
  %65 = fcmp une float %64, 1.000000e+00
  br i1 %65, label %then10, label %else11

then10:                                           ; preds = %ifcont9
  %66 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.17, i32 0, i32 0), align 8
  %67 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.19, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* %66, i8* %67)
  call void @exit(i32 1)
  br label %ifcont12

else11:                                           ; preds = %ifcont9
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont12
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()
