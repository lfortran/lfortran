; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>
%fpm_run_settings = type <{ %fpm_build_settings, %string_descriptor, %string_descriptor, %string_descriptor, i1 }>
%fpm_build_settings = type <{ i32 (...)**, i1 }>

@_Name_fpm_build_settings = private unnamed_addr constant [19 x i8] c"fpm_build_settings\00", align 1
@_Type_Info_fpm_build_settings = linkonce_odr unnamed_addr constant { i8* } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @_Name_fpm_build_settings, i32 0, i32 0) }, align 8
@_VTable_fpm_build_settings = linkonce_odr unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8* }* @_Type_Info_fpm_build_settings to i8*), i8* bitcast (void (i8*, i8*)* @_copy_modules_36_fpm_main_01_fpm_build_settings to i8*)] }, align 8
@_Name_fpm_run_settings = private unnamed_addr constant [17 x i8] c"fpm_run_settings\00", align 1
@_Type_Info_fpm_run_settings = linkonce_odr unnamed_addr constant { i8*, i8* } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @_Name_fpm_run_settings, i32 0, i32 0), i8* bitcast ({ i8* }* @_Type_Info_fpm_build_settings to i8*) }, align 8
@_VTable_fpm_run_settings = linkonce_odr unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_Type_Info_fpm_run_settings to i8*), i8* bitcast (void (i8*, i8*)* @_copy_modules_36_fpm_main_01_fpm_run_settings to i8*)] }, align 8
@0 = private unnamed_addr constant [47 x i8] c"__libasr_created__intrinsic_array_function_Any\00", align 1
@1 = private unnamed_addr constant [87 x i8] c"Runtime Error: Size mismatch in assignment to '%s'\0A\0ALHS size is %d and RHS size is %d\0A\00", align 1
@2 = private unnamed_addr constant [47 x i8] c"__libasr_created__intrinsic_array_function_Any\00", align 1
@3 = private unnamed_addr constant [120 x i8] c"Runtime error: Array '%s' index out of bounds.\0A\0ATried to access index %d of dimension %d, but valid range is %d to %d.\0A\00", align 1
@4 = private unnamed_addr constant [6 x i8] c"found\00", align 1
@5 = private unnamed_addr constant [120 x i8] c"Runtime error: Array '%s' index out of bounds.\0A\0ATried to access index %d of dimension %d, but valid range is %d to %d.\0A\00", align 1
@6 = private unnamed_addr constant [35 x i8] c"_lcompilers_Any_4_1_0_logical____0\00", align 1
@7 = private unnamed_addr constant [143 x i8] c"Runtime error: Array shape mismatch in subroutine '%s'\0A\0ATried to match size %d of dimension %d of argument number %d, but expected size is %d\0A\00", align 1
@string_const_data = private constant [0 x i8] zeroinitializer
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([0 x i8], [0 x i8]* @string_const_data, i32 0, i32 0), i64 0 }>
@8 = private unnamed_addr constant [5 x i8] c"mask\00", align 1
@9 = private unnamed_addr constant [120 x i8] c"Runtime error: Array '%s' index out of bounds.\0A\0ATried to access index %d of dimension %d, but valid range is %d to %d.\0A\00", align 1

define i1 @_lcompilers_Any_4_1_0_logical____0(i1* %mask, i32* %__1mask) {
.entry:
  %__1_i = alloca i32, align 4
  %_lcompilers_Any_4_1_0 = alloca i1, align 1
  store i1 false, i1* %_lcompilers_Any_4_1_0, align 1
  store i32 0, i32* %__1_i, align 4
  br label %loop.head

loop.head:                                        ; preds = %ifcont, %.entry
  %0 = load i32, i32* %__1_i, align 4
  %1 = add i32 %0, 1
  %2 = load i32, i32* %__1mask, align 4
  %3 = add i32 %2, 1
  %4 = sub i32 %3, 1
  %5 = icmp sle i32 %1, %4
  br i1 %5, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %6 = load i32, i32* %__1_i, align 4
  %7 = add i32 %6, 1
  store i32 %7, i32* %__1_i, align 4
  %8 = load i1, i1* %_lcompilers_Any_4_1_0, align 1
  %9 = load i32, i32* %__1_i, align 4
  %10 = load i32, i32* %__1mask, align 4
  %11 = sub i32 %9, 1
  %12 = mul i32 1, %11
  %13 = add i32 0, %12
  %14 = add i32 1, %10
  %15 = sub i32 %14, 1
  %16 = icmp slt i32 %9, 1
  %17 = icmp sgt i32 %9, %15
  %18 = or i1 %16, %17
  br i1 %18, label %then, label %ifcont

then:                                             ; preds = %loop.body
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i32 %9, i32 1, i32 1, i32 %15)
  call void @exit(i32 1)
  unreachable

ifcont:                                           ; preds = %loop.body
  %19 = mul i32 1, %10
  %20 = getelementptr inbounds i1, i1* %mask, i32 %13
  %21 = load i1, i1* %20, align 1
  %22 = icmp eq i1 %8, false
  %23 = select i1 %22, i1 %21, i1 %8
  store i1 %23, i1* %_lcompilers_Any_4_1_0, align 1
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %24 = load i1, i1* %_lcompilers_Any_4_1_0, align 1
  ret i1 %24
}

define void @__module_modules_36_fpm_main_01_cmd_run(%fpm_run_settings* %settings, i1* %test) {
.entry:
  %call_arg_value = alloca i32, align 4
  %array_bound7 = alloca i32, align 4
  %array_bound3 = alloca i32, align 4
  %array_bound = alloca i32, align 4
  %__libasr_created__intrinsic_array_function_Any = alloca [2 x i1], align 1
  %__libasr_created__intrinsic_array_function_Any1 = alloca i1, align 1
  %__libasr_index_0_ = alloca i32, align 4
  %__libasr_index_0_1 = alloca i32, align 4
  %found = alloca [2 x i1], align 1
  %toomany = alloca i1, align 1
  br i1 false, label %then, label %ifcont

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @0, i32 0, i32 0), i32 2, i32 2)
  call void @exit(i32 1)
  unreachable

ifcont:                                           ; preds = %.entry
  br i1 true, label %then1, label %else

then1:                                            ; preds = %ifcont
  store i32 1, i32* %array_bound, align 4
  br label %ifcont2

else:                                             ; preds = %ifcont
  br label %ifcont2

ifcont2:                                          ; preds = %else, %then1
  %0 = load i32, i32* %array_bound, align 4
  store i32 %0, i32* %__libasr_index_0_1, align 4
  br i1 true, label %then4, label %else5

then4:                                            ; preds = %ifcont2
  store i32 1, i32* %array_bound3, align 4
  br label %ifcont6

else5:                                            ; preds = %ifcont2
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %1 = load i32, i32* %array_bound3, align 4
  %2 = sub i32 %1, 1
  store i32 %2, i32* %__libasr_index_0_, align 4
  br label %loop.head

loop.head:                                        ; preds = %ifcont14, %ifcont6
  %3 = load i32, i32* %__libasr_index_0_, align 4
  %4 = add i32 %3, 1
  br i1 true, label %then8, label %else9

then8:                                            ; preds = %loop.head
  store i32 2, i32* %array_bound7, align 4
  br label %ifcont10

else9:                                            ; preds = %loop.head
  br label %ifcont10

ifcont10:                                         ; preds = %else9, %then8
  %5 = load i32, i32* %array_bound7, align 4
  %6 = icmp sle i32 %4, %5
  br i1 %6, label %loop.body, label %loop.end

loop.body:                                        ; preds = %ifcont10
  %7 = load i32, i32* %__libasr_index_0_, align 4
  %8 = add i32 %7, 1
  store i32 %8, i32* %__libasr_index_0_, align 4
  %9 = load i32, i32* %__libasr_index_0_, align 4
  %10 = sub i32 %9, 1
  %11 = mul i32 1, %10
  %12 = add i32 0, %11
  %13 = icmp slt i32 %9, 1
  %14 = icmp sgt i32 %9, 2
  %15 = or i1 %13, %14
  br i1 %15, label %then11, label %ifcont12

then11:                                           ; preds = %loop.body
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @2, i32 0, i32 0), i32 %9, i32 1, i32 1, i32 2)
  call void @exit(i32 1)
  unreachable

ifcont12:                                         ; preds = %loop.body
  %16 = getelementptr [2 x i1], [2 x i1]* %__libasr_created__intrinsic_array_function_Any, i32 0, i32 %12
  %17 = load i32, i32* %__libasr_index_0_1, align 4
  %18 = sub i32 %17, 1
  %19 = mul i32 1, %18
  %20 = add i32 0, %19
  %21 = icmp slt i32 %17, 1
  %22 = icmp sgt i32 %17, 2
  %23 = or i1 %21, %22
  br i1 %23, label %then13, label %ifcont14

then13:                                           ; preds = %ifcont12
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i32 0, i32 0), i32 %17, i32 1, i32 1, i32 2)
  call void @exit(i32 1)
  unreachable

ifcont14:                                         ; preds = %ifcont12
  %24 = getelementptr [2 x i1], [2 x i1]* %found, i32 0, i32 %20
  %25 = load i1, i1* %24, align 1
  %26 = xor i1 %25, true
  store i1 %26, i1* %16, align 1
  %27 = load i32, i32* %__libasr_index_0_1, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %__libasr_index_0_1, align 4
  br label %loop.head

loop.end:                                         ; preds = %ifcont10
  br i1 false, label %then15, label %ifcont16

then15:                                           ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([143 x i8], [143 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @6, i32 0, i32 0), i32 2, i32 1, i32 1, i32 2)
  call void @exit(i32 1)
  unreachable

ifcont16:                                         ; preds = %loop.end
  %29 = getelementptr [2 x i1], [2 x i1]* %__libasr_created__intrinsic_array_function_Any, i32 0, i32 0
  store i32 2, i32* %call_arg_value, align 4
  %30 = call i1 @_lcompilers_Any_4_1_0_logical____0(i1* %29, i32* %call_arg_value)
  store i1 %30, i1* %__libasr_created__intrinsic_array_function_Any1, align 1
  %31 = load i1, i1* %__libasr_created__intrinsic_array_function_Any1, align 1
  %32 = load i1, i1* %toomany, align 1
  %33 = load i1, i1* %test, align 1
  %34 = xor i1 %33, true
  %35 = icmp eq i1 %32, false
  %36 = select i1 %35, i1 %32, i1 %34
  %37 = load i1, i1* %toomany, align 1
  %38 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 3
  %39 = getelementptr %string_descriptor, %string_descriptor* %38, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %42 = call i32 @str_compare(i8* %40, i64 6, i8* %41, i64 0)
  %43 = icmp ne i32 %42, 0
  %44 = icmp eq i1 %37, false
  %45 = select i1 %44, i1 %37, i1 %43
  %46 = icmp eq i1 %36, false
  %47 = select i1 %46, i1 %45, i1 %36
  %48 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 0
  %49 = getelementptr %fpm_build_settings, %fpm_build_settings* %48, i32 0, i32 1
  %50 = load i1, i1* %49, align 1
  %51 = xor i1 %50, true
  %52 = icmp eq i1 %47, false
  %53 = select i1 %52, i1 %47, i1 %51
  %54 = icmp eq i1 %31, false
  %55 = select i1 %54, i1 %53, i1 %31
  br i1 %55, label %then17, label %else18

then17:                                           ; preds = %ifcont16
  br label %ifcont19

else18:                                           ; preds = %ifcont16
  br label %ifcont19

ifcont19:                                         ; preds = %else18, %then17
  br label %return

return:                                           ; preds = %ifcont19
  ret void
}

define void @_copy_modules_36_fpm_main_01_fpm_build_settings(i8* %0, i8* %1) {
entry:
  %2 = bitcast i8* %0 to %fpm_build_settings*
  %3 = bitcast i8* %1 to %fpm_build_settings*
  %4 = bitcast %fpm_build_settings* %3 to i32 (...)***
  %5 = load i32 (...)**, i32 (...)*** %4, align 8
  %6 = bitcast %fpm_build_settings* %2 to i32 (...)***
  store i32 (...)** %5, i32 (...)*** %6, align 8
  %7 = getelementptr %fpm_build_settings, %fpm_build_settings* %2, i32 0, i32 1
  %8 = load i1, i1* %7, align 1
  %9 = getelementptr %fpm_build_settings, %fpm_build_settings* %3, i32 0, i32 1
  br i1 true, label %then, label %else

then:                                             ; preds = %entry
  store i1 %8, i1* %9, align 1
  br label %ifcont

else:                                             ; preds = %entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %10 = bitcast %fpm_build_settings* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_VTable_fpm_build_settings, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %10, align 8
  ret void
}

define void @_copy_modules_36_fpm_main_01_fpm_run_settings(i8* %0, i8* %1) {
entry:
  %2 = bitcast i8* %0 to %fpm_run_settings*
  %3 = bitcast i8* %1 to %fpm_run_settings*
  %4 = bitcast %fpm_run_settings* %3 to i32 (...)***
  %5 = load i32 (...)**, i32 (...)*** %4, align 8
  %6 = bitcast %fpm_run_settings* %2 to i32 (...)***
  store i32 (...)** %5, i32 (...)*** %6, align 8
  %7 = getelementptr %fpm_run_settings, %fpm_run_settings* %2, i32 0, i32 1
  %8 = getelementptr %fpm_run_settings, %fpm_run_settings* %3, i32 0, i32 1
  br i1 true, label %then, label %else

then:                                             ; preds = %entry
  %9 = getelementptr %string_descriptor, %string_descriptor* %8, i32 0, i32 0
  %10 = getelementptr %string_descriptor, %string_descriptor* %8, i32 0, i32 1
  %11 = getelementptr %string_descriptor, %string_descriptor* %7, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  call void @_lfortran_strcpy(i8** %9, i64* %10, i8 0, i8 0, i8* %12, i64 5)
  br label %ifcont

else:                                             ; preds = %entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %13 = getelementptr %fpm_run_settings, %fpm_run_settings* %2, i32 0, i32 2
  %14 = getelementptr %fpm_run_settings, %fpm_run_settings* %3, i32 0, i32 2
  br i1 true, label %then1, label %else2

then1:                                            ; preds = %ifcont
  %15 = getelementptr %string_descriptor, %string_descriptor* %14, i32 0, i32 0
  %16 = getelementptr %string_descriptor, %string_descriptor* %14, i32 0, i32 1
  %17 = getelementptr %string_descriptor, %string_descriptor* %13, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @_lfortran_strcpy(i8** %15, i64* %16, i8 0, i8 0, i8* %18, i64 4)
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %19 = getelementptr %fpm_run_settings, %fpm_run_settings* %2, i32 0, i32 3
  %20 = getelementptr %fpm_run_settings, %fpm_run_settings* %3, i32 0, i32 3
  br i1 true, label %then4, label %else5

then4:                                            ; preds = %ifcont3
  %21 = getelementptr %string_descriptor, %string_descriptor* %20, i32 0, i32 0
  %22 = getelementptr %string_descriptor, %string_descriptor* %20, i32 0, i32 1
  %23 = getelementptr %string_descriptor, %string_descriptor* %19, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  call void @_lfortran_strcpy(i8** %21, i64* %22, i8 0, i8 0, i8* %24, i64 6)
  br label %ifcont6

else5:                                            ; preds = %ifcont3
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %25 = getelementptr %fpm_run_settings, %fpm_run_settings* %2, i32 0, i32 4
  %26 = load i1, i1* %25, align 1
  %27 = getelementptr %fpm_run_settings, %fpm_run_settings* %3, i32 0, i32 4
  br i1 true, label %then7, label %else8

then7:                                            ; preds = %ifcont6
  store i1 %26, i1* %27, align 1
  br label %ifcont9

else8:                                            ; preds = %ifcont6
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %28 = getelementptr %fpm_run_settings, %fpm_run_settings* %2, i32 0, i32 0
  %29 = getelementptr %fpm_run_settings, %fpm_run_settings* %3, i32 0, i32 0
  %30 = getelementptr %fpm_build_settings, %fpm_build_settings* %28, i32 0, i32 1
  %31 = load i1, i1* %30, align 1
  %32 = getelementptr %fpm_build_settings, %fpm_build_settings* %29, i32 0, i32 1
  br i1 true, label %then10, label %else11

then10:                                           ; preds = %ifcont9
  store i1 %31, i1* %32, align 1
  br label %ifcont12

else11:                                           ; preds = %ifcont9
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  %33 = bitcast %fpm_run_settings* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_VTable_fpm_run_settings, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %33, align 8
  ret void
}

declare void @_lfortran_strcpy(i8**, i64*, i8, i8, i8*, i64)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare i32 @str_compare(i8*, i64, i8*, i64)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca i1, align 1
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %settings = alloca %fpm_run_settings, align 8
  %2 = bitcast %fpm_run_settings* %settings to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_VTable_fpm_run_settings, i32 0, i32 0, i32 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 2
  store %string_descriptor zeroinitializer, %string_descriptor* %3, align 1
  %4 = getelementptr %string_descriptor, %string_descriptor* %3, i32 0, i32 1
  store i64 4, i64* %4, align 4
  %5 = getelementptr %string_descriptor, %string_descriptor* %3, i32 0, i32 0
  %6 = call i8* @_lfortran_malloc(i64 4)
  store i8* %6, i8** %5, align 8
  %7 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 4
  %8 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 1
  %9 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 3
  store %string_descriptor zeroinitializer, %string_descriptor* %9, align 1
  %10 = getelementptr %string_descriptor, %string_descriptor* %9, i32 0, i32 1
  store i64 6, i64* %10, align 4
  %11 = getelementptr %string_descriptor, %string_descriptor* %9, i32 0, i32 0
  %12 = call i8* @_lfortran_malloc(i64 6)
  store i8* %12, i8** %11, align 8
  %13 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 0
  %14 = getelementptr %fpm_build_settings, %fpm_build_settings* %13, i32 0, i32 1
  store i1 false, i1* %14, align 1
  store i1 true, i1* %call_arg_value, align 1
  call void @__module_modules_36_fpm_main_01_cmd_run(%fpm_run_settings* %settings, i1* %call_arg_value)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i64)

declare void @_lpython_free_argv()
