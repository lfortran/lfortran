; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>
%fpm_run_settings_polymorphic = type { i64, %fpm_run_settings* }
%fpm_run_settings = type <{ %fpm_build_settings, %string_descriptor, %string_descriptor, %string_descriptor, i1 }>
%fpm_build_settings = type <{ i1 }>
%__vtab_fpm_run_settings = type { i64 }

@0 = private unnamed_addr constant [47 x i8] c"__libasr_created__intrinsic_array_function_Any\00", align 1
@1 = private unnamed_addr constant [120 x i8] c"Runtime error: Array '%s' index out of bounds.\0A\0ATried to access index %d of dimension %d, but valid range is %d to %d.\0A\00", align 1
@2 = private unnamed_addr constant [6 x i8] c"found\00", align 1
@3 = private unnamed_addr constant [120 x i8] c"Runtime error: Array '%s' index out of bounds.\0A\0ATried to access index %d of dimension %d, but valid range is %d to %d.\0A\00", align 1
@4 = private unnamed_addr constant [35 x i8] c"_lcompilers_Any_4_1_0_logical____0\00", align 1
@5 = private unnamed_addr constant [143 x i8] c"Runtime error: Array shape mismatch in subroutine '%s'\0A\0ATried to match size %d of dimension %d of argument number %d, but expected size is %d\0A\00", align 1
@string_const_data = private constant [1 x i8] zeroinitializer
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data, i32 0, i32 0), i64 0 }>
@6 = private unnamed_addr constant [5 x i8] c"mask\00", align 1
@7 = private unnamed_addr constant [120 x i8] c"Runtime error: Array '%s' index out of bounds.\0A\0ATried to access index %d of dimension %d, but valid range is %d to %d.\0A\00", align 1

define i1 @_lcompilers_Any_4_1_0_logical____0(i1* %mask, i32* %__1mask) {
.entry:
  %__1_i = alloca i32, align 4
  %_lcompilers_Any_4_1_0 = alloca i1, align 1
  store i1 false, i1* %_lcompilers_Any_4_1_0, align 1
  store i32 0, i32* %__1_i, align 4
  br label %loop.head

loop.head:                                        ; preds = %ifcont, %.entry
  %0 = load i32, i32* %__1_i, align 4
  %1 = add i32 %0, 1
  %2 = load i32, i32* %__1mask, align 4
  %3 = add i32 %2, 1
  %4 = sub i32 %3, 1
  %5 = icmp sle i32 %1, %4
  br i1 %5, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %6 = load i32, i32* %__1_i, align 4
  %7 = add i32 %6, 1
  store i32 %7, i32* %__1_i, align 4
  %8 = load i1, i1* %_lcompilers_Any_4_1_0, align 1
  %9 = load i32, i32* %__1_i, align 4
  %10 = load i32, i32* %__1mask, align 4
  %11 = sub i32 %9, 1
  %12 = mul i32 1, %11
  %13 = add i32 0, %12
  %14 = add i32 1, %10
  %15 = sub i32 %14, 1
  %16 = icmp slt i32 %9, 1
  %17 = icmp sgt i32 %9, %15
  %18 = or i1 %16, %17
  br i1 %18, label %then, label %ifcont

then:                                             ; preds = %loop.body
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i32 %9, i32 1, i32 1, i32 %15)
  call void @exit(i32 1)
  unreachable

ifcont:                                           ; preds = %loop.body
  %19 = mul i32 1, %10
  %20 = getelementptr inbounds i1, i1* %mask, i32 %13
  %21 = load i1, i1* %20, align 1
  %22 = icmp eq i1 %8, false
  %23 = select i1 %22, i1 %21, i1 %8
  store i1 %23, i1* %_lcompilers_Any_4_1_0, align 1
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %24 = load i1, i1* %_lcompilers_Any_4_1_0, align 1
  ret i1 %24
}

define void @__module_modules_36_fpm_main_01_cmd_run(%fpm_run_settings_polymorphic* %settings, i1* %test) {
.entry:
  %call_arg_value = alloca i32, align 4
  %array_bound5 = alloca i32, align 4
  %array_bound1 = alloca i32, align 4
  %array_bound = alloca i32, align 4
  %0 = alloca %__vtab_fpm_run_settings, align 8
  %1 = getelementptr %__vtab_fpm_run_settings, %__vtab_fpm_run_settings* %0, i32 0, i32 0
  store i64 0, i64* %1, align 4
  %__libasr_created__intrinsic_array_function_Any = alloca [2 x i1], align 1
  %__libasr_created__intrinsic_array_function_Any1 = alloca i1, align 1
  %__libasr_index_0_ = alloca i32, align 4
  %__libasr_index_0_1 = alloca i32, align 4
  %found = alloca [2 x i1], align 1
  %toomany = alloca i1, align 1
  br i1 true, label %then, label %else

then:                                             ; preds = %.entry
  store i32 1, i32* %array_bound, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %2 = load i32, i32* %array_bound, align 4
  store i32 %2, i32* %__libasr_index_0_1, align 4
  br i1 true, label %then2, label %else3

then2:                                            ; preds = %ifcont
  store i32 1, i32* %array_bound1, align 4
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %3 = load i32, i32* %array_bound1, align 4
  %4 = sub i32 %3, 1
  store i32 %4, i32* %__libasr_index_0_, align 4
  br label %loop.head

loop.head:                                        ; preds = %ifcont12, %ifcont4
  %5 = load i32, i32* %__libasr_index_0_, align 4
  %6 = add i32 %5, 1
  br i1 true, label %then6, label %else7

then6:                                            ; preds = %loop.head
  store i32 2, i32* %array_bound5, align 4
  br label %ifcont8

else7:                                            ; preds = %loop.head
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %then6
  %7 = load i32, i32* %array_bound5, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %loop.body, label %loop.end

loop.body:                                        ; preds = %ifcont8
  %9 = load i32, i32* %__libasr_index_0_, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %__libasr_index_0_, align 4
  %11 = load i32, i32* %__libasr_index_0_, align 4
  %12 = sub i32 %11, 1
  %13 = mul i32 1, %12
  %14 = add i32 0, %13
  %15 = icmp slt i32 %11, 1
  %16 = icmp sgt i32 %11, 2
  %17 = or i1 %15, %16
  br i1 %17, label %then9, label %ifcont10

then9:                                            ; preds = %loop.body
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @0, i32 0, i32 0), i32 %11, i32 1, i32 1, i32 2)
  call void @exit(i32 1)
  unreachable

ifcont10:                                         ; preds = %loop.body
  %18 = getelementptr [2 x i1], [2 x i1]* %__libasr_created__intrinsic_array_function_Any, i32 0, i32 %14
  %19 = load i32, i32* %__libasr_index_0_1, align 4
  %20 = sub i32 %19, 1
  %21 = mul i32 1, %20
  %22 = add i32 0, %21
  %23 = icmp slt i32 %19, 1
  %24 = icmp sgt i32 %19, 2
  %25 = or i1 %23, %24
  br i1 %25, label %then11, label %ifcont12

then11:                                           ; preds = %ifcont10
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0), i32 %19, i32 1, i32 1, i32 2)
  call void @exit(i32 1)
  unreachable

ifcont12:                                         ; preds = %ifcont10
  %26 = getelementptr [2 x i1], [2 x i1]* %found, i32 0, i32 %22
  %27 = load i1, i1* %26, align 1
  %28 = xor i1 %27, true
  store i1 %28, i1* %18, align 1
  %29 = load i32, i32* %__libasr_index_0_1, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %__libasr_index_0_1, align 4
  br label %loop.head

loop.end:                                         ; preds = %ifcont8
  br i1 false, label %then13, label %ifcont14

then13:                                           ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([143 x i8], [143 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @4, i32 0, i32 0), i32 2, i32 1, i32 1, i32 2)
  call void @exit(i32 1)
  unreachable

ifcont14:                                         ; preds = %loop.end
  %31 = getelementptr [2 x i1], [2 x i1]* %__libasr_created__intrinsic_array_function_Any, i32 0, i32 0
  store i32 2, i32* %call_arg_value, align 4
  %32 = call i1 @_lcompilers_Any_4_1_0_logical____0(i1* %31, i32* %call_arg_value)
  store i1 %32, i1* %__libasr_created__intrinsic_array_function_Any1, align 1
  %33 = load i1, i1* %__libasr_created__intrinsic_array_function_Any1, align 1
  %34 = load i1, i1* %toomany, align 1
  %35 = load i1, i1* %test, align 1
  %36 = xor i1 %35, true
  %37 = icmp eq i1 %34, false
  %38 = select i1 %37, i1 %34, i1 %36
  %39 = load i1, i1* %toomany, align 1
  %40 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %settings, i32 0, i32 1
  %41 = load %fpm_run_settings*, %fpm_run_settings** %40, align 8
  %42 = getelementptr %fpm_run_settings, %fpm_run_settings* %41, i32 0, i32 3
  %43 = getelementptr %string_descriptor, %string_descriptor* %42, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %46 = call i32 @str_compare(i8* %44, i64 6, i8* %45, i64 0)
  %47 = icmp ne i32 %46, 0
  %48 = icmp eq i1 %39, false
  %49 = select i1 %48, i1 %39, i1 %47
  %50 = icmp eq i1 %38, false
  %51 = select i1 %50, i1 %49, i1 %38
  %52 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %settings, i32 0, i32 1
  %53 = load %fpm_run_settings*, %fpm_run_settings** %52, align 8
  %54 = getelementptr %fpm_run_settings, %fpm_run_settings* %53, i32 0, i32 0
  %55 = getelementptr %fpm_build_settings, %fpm_build_settings* %54, i32 0, i32 0
  %56 = load i1, i1* %55, align 1
  %57 = xor i1 %56, true
  %58 = icmp eq i1 %51, false
  %59 = select i1 %58, i1 %51, i1 %57
  %60 = icmp eq i1 %33, false
  %61 = select i1 %60, i1 %59, i1 %33
  br i1 %61, label %then15, label %else16

then15:                                           ; preds = %ifcont14
  br label %ifcont17

else16:                                           ; preds = %ifcont14
  br label %ifcont17

ifcont17:                                         ; preds = %else16, %then15
  br label %return

return:                                           ; preds = %ifcont17
  ret void
}

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare i32 @str_compare(i8*, i64, i8*, i64)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca i1, align 1
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = alloca %__vtab_fpm_run_settings, align 8
  %3 = getelementptr %__vtab_fpm_run_settings, %__vtab_fpm_run_settings* %2, i32 0, i32 0
  store i64 0, i64* %3, align 4
  %settings = alloca %fpm_run_settings, align 8
  %4 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 2
  store %string_descriptor zeroinitializer, %string_descriptor* %4, align 1
  %5 = getelementptr %string_descriptor, %string_descriptor* %4, i32 0, i32 1
  store i64 4, i64* %5, align 4
  %6 = getelementptr %string_descriptor, %string_descriptor* %4, i32 0, i32 0
  %7 = call i8* @_lfortran_malloc(i64 5)
  call void @_lfortran_string_init(i64 5, i8* %7)
  store i8* %7, i8** %6, align 8
  %8 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 4
  %9 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 1
  %10 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 3
  store %string_descriptor zeroinitializer, %string_descriptor* %10, align 1
  %11 = getelementptr %string_descriptor, %string_descriptor* %10, i32 0, i32 1
  store i64 6, i64* %11, align 4
  %12 = getelementptr %string_descriptor, %string_descriptor* %10, i32 0, i32 0
  %13 = call i8* @_lfortran_malloc(i64 7)
  call void @_lfortran_string_init(i64 7, i8* %13)
  store i8* %13, i8** %12, align 8
  %14 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 0
  %15 = getelementptr %fpm_build_settings, %fpm_build_settings* %14, i32 0, i32 0
  store i1 false, i1* %15, align 1
  %16 = alloca %fpm_run_settings_polymorphic, align 8
  %17 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %16, i32 0, i32 0
  store i64 0, i64* %17, align 4
  %18 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %16, i32 0, i32 1
  store %fpm_run_settings* %settings, %fpm_run_settings** %18, align 8
  store i1 true, i1* %call_arg_value, align 1
  call void @__module_modules_36_fpm_main_01_cmd_run(%fpm_run_settings_polymorphic* %16, i1* %call_arg_value)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_string_init(i64, i8*)

declare void @_lpython_free_argv()
