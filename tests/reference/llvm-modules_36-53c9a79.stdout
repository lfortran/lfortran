; ModuleID = 'LFortran'
source_filename = "LFortran"

%fpm_run_settings_polymorphic = type { i64, %fpm_run_settings* }
%fpm_run_settings = type <{ %fpm_build_settings, [2 x i8*], i8*, i8*, i1 }>
%fpm_build_settings = type <{ i1 }>
%__vtab_fpm_run_settings = type { i64 }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

define i1 @Any_4_1_0_logical____0(i1* %mask, i32* %__1mask, i32* %__2mask) {
.entry:
  %Any_4_1_0 = alloca i1, align 1
  %__1_i = alloca i32, align 4
  store i1 false, i1* %Any_4_1_0, align 1
  %0 = load i32, i32* %__1mask, align 4
  store i32 %0, i32* %__1_i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %1 = load i32, i32* %__1_i, align 4
  %2 = load i32, i32* %__2mask, align 4
  %3 = load i32, i32* %__1mask, align 4
  %4 = add i32 %2, %3
  %5 = sub i32 %4, 1
  %6 = icmp sle i32 %1, %5
  br i1 %6, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %7 = load i1, i1* %Any_4_1_0, align 1
  %8 = load i32, i32* %__1_i, align 4
  %9 = load i32, i32* %__1mask, align 4
  %10 = load i32, i32* %__2mask, align 4
  %11 = sub i32 %8, %9
  %12 = mul i32 1, %11
  %13 = add i32 0, %12
  %14 = mul i32 1, %10
  %15 = getelementptr inbounds i1, i1* %mask, i32 %13
  %16 = load i1, i1* %15, align 1
  %17 = icmp eq i1 %7, false
  %18 = select i1 %17, i1 %16, i1 %7
  store i1 %18, i1* %Any_4_1_0, align 1
  %19 = load i32, i32* %__1_i, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* %__1_i, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %21 = load i1, i1* %Any_4_1_0, align 1
  ret i1 %21
}

define void @__module_modules_36_fpm_main_01_cmd_run(%fpm_run_settings_polymorphic* %settings, i1* %test) {
.entry:
  %call_arg_value9 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %array_bound5 = alloca i32, align 4
  %array_bound1 = alloca i32, align 4
  %array_bound = alloca i32, align 4
  %0 = alloca %__vtab_fpm_run_settings, align 8
  %1 = getelementptr %__vtab_fpm_run_settings, %__vtab_fpm_run_settings* %0, i32 0, i32 0
  store i64 0, i64* %1, align 4
  %__libasr_created__intrinsic_array_function_Any = alloca [2 x i1], align 1
  %__libasr_created__intrinsic_array_function_Any1 = alloca i1, align 1
  %__libasr_index_0_ = alloca i32, align 4
  %__libasr_index_0_1 = alloca i32, align 4
  %found = alloca [2 x i1], align 1
  %toomany = alloca i1, align 1
  br i1 true, label %then, label %else

then:                                             ; preds = %.entry
  store i32 1, i32* %array_bound, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %2 = load i32, i32* %array_bound, align 4
  store i32 %2, i32* %__libasr_index_0_1, align 4
  br i1 true, label %then2, label %else3

then2:                                            ; preds = %ifcont
  store i32 1, i32* %array_bound1, align 4
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %3 = load i32, i32* %array_bound1, align 4
  store i32 %3, i32* %__libasr_index_0_, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %ifcont4
  %4 = load i32, i32* %__libasr_index_0_, align 4
  br i1 true, label %then6, label %else7

then6:                                            ; preds = %loop.head
  store i32 2, i32* %array_bound5, align 4
  br label %ifcont8

else7:                                            ; preds = %loop.head
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %then6
  %5 = load i32, i32* %array_bound5, align 4
  %6 = icmp sle i32 %4, %5
  br i1 %6, label %loop.body, label %loop.end

loop.body:                                        ; preds = %ifcont8
  %7 = load i32, i32* %__libasr_index_0_, align 4
  %8 = sub i32 %7, 1
  %9 = mul i32 1, %8
  %10 = add i32 0, %9
  %11 = getelementptr [2 x i1], [2 x i1]* %__libasr_created__intrinsic_array_function_Any, i32 0, i32 %10
  %12 = load i32, i32* %__libasr_index_0_1, align 4
  %13 = sub i32 %12, 1
  %14 = mul i32 1, %13
  %15 = add i32 0, %14
  %16 = getelementptr [2 x i1], [2 x i1]* %found, i32 0, i32 %15
  %17 = load i1, i1* %16, align 1
  %18 = xor i1 %17, true
  store i1 %18, i1* %11, align 1
  %19 = load i32, i32* %__libasr_index_0_1, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* %__libasr_index_0_1, align 4
  %21 = load i32, i32* %__libasr_index_0_, align 4
  %22 = add i32 %21, 1
  store i32 %22, i32* %__libasr_index_0_, align 4
  br label %loop.head

loop.end:                                         ; preds = %ifcont8
  %23 = getelementptr [2 x i1], [2 x i1]* %__libasr_created__intrinsic_array_function_Any, i32 0, i32 0
  store i32 1, i32* %call_arg_value, align 4
  store i32 2, i32* %call_arg_value9, align 4
  %24 = call i1 @Any_4_1_0_logical____0(i1* %23, i32* %call_arg_value, i32* %call_arg_value9)
  store i1 %24, i1* %__libasr_created__intrinsic_array_function_Any1, align 1
  %25 = load i1, i1* %__libasr_created__intrinsic_array_function_Any1, align 1
  %26 = load i1, i1* %toomany, align 1
  %27 = load i1, i1* %test, align 1
  %28 = xor i1 %27, true
  %29 = icmp eq i1 %26, false
  %30 = select i1 %29, i1 %26, i1 %28
  %31 = load i1, i1* %toomany, align 1
  %32 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %settings, i32 0, i32 1
  %33 = load %fpm_run_settings*, %fpm_run_settings** %32, align 8
  %34 = getelementptr %fpm_run_settings, %fpm_run_settings* %33, i32 0, i32 3
  %35 = load i8*, i8** %34, align 8
  %36 = alloca i8*, align 8
  store i8* %35, i8** %36, align 8
  %37 = alloca i8*, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i32 0, i32 0), i8** %37, align 8
  %38 = call i1 @_lpython_str_compare_noteq(i8** %36, i8** %37)
  %39 = icmp eq i1 %31, false
  %40 = select i1 %39, i1 %31, i1 %38
  %41 = icmp eq i1 %30, false
  %42 = select i1 %41, i1 %40, i1 %30
  %43 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %settings, i32 0, i32 1
  %44 = load %fpm_run_settings*, %fpm_run_settings** %43, align 8
  %45 = getelementptr %fpm_run_settings, %fpm_run_settings* %44, i32 0, i32 0
  %46 = getelementptr %fpm_build_settings, %fpm_build_settings* %45, i32 0, i32 0
  %47 = load i1, i1* %46, align 1
  %48 = xor i1 %47, true
  %49 = icmp eq i1 %42, false
  %50 = select i1 %49, i1 %42, i1 %48
  %51 = icmp eq i1 %25, false
  %52 = select i1 %51, i1 %50, i1 %25
  br i1 %52, label %then10, label %else11

then10:                                           ; preds = %loop.end
  br label %ifcont12

else11:                                           ; preds = %loop.end
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  br label %return

return:                                           ; preds = %ifcont12
  ret void
}

declare i1 @_lpython_str_compare_noteq(i8**, i8**)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca i1, align 1
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = alloca %__vtab_fpm_run_settings, align 8
  %3 = getelementptr %__vtab_fpm_run_settings, %__vtab_fpm_run_settings* %2, i32 0, i32 0
  store i64 0, i64* %3, align 4
  %settings = alloca %fpm_run_settings, align 8
  %4 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 2
  %5 = call i8* @_lfortran_malloc(i32 5)
  call void @_lfortran_string_init(i64 5, i8* %5)
  store i8* %5, i8** %4, align 8
  %6 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 4
  %7 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 1
  %8 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 3
  %9 = call i8* @_lfortran_malloc(i32 7)
  call void @_lfortran_string_init(i64 7, i8* %9)
  store i8* %9, i8** %8, align 8
  %10 = alloca %fpm_run_settings_polymorphic, align 8
  %11 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %10, i32 0, i32 0
  store i64 0, i64* %11, align 4
  %12 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %10, i32 0, i32 1
  store %fpm_run_settings* %settings, %fpm_run_settings** %12, align 8
  store i1 true, i1* %call_arg_value, align 1
  call void @__module_modules_36_fpm_main_01_cmd_run(%fpm_run_settings_polymorphic* %10, i1* %call_arg_value)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i32)

declare void @_lfortran_string_init(i64, i8*)

declare void @_lpython_free_argv()
