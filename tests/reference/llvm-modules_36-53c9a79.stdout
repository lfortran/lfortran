; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>
%fpm_run_settings_polymorphic = type { i64, %fpm_run_settings* }
%fpm_run_settings = type <{ %fpm_build_settings, %string_descriptor, %string_descriptor, %string_descriptor, i1 }>
%fpm_build_settings = type <{ i1 }>
%__vtab_fpm_run_settings = type { i64 }

@string_const_data = private constant [1 x i8] zeroinitializer
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([1 x i8], [1 x i8]* @string_const_data, i32 0, i32 0), i64 0 }>

define i1 @_lcompilers_Any_4_1_0_logical____0(i1* %mask, i32* %__1mask) {
.entry:
  %__1_i = alloca i32, align 4
  %_lcompilers_Any_4_1_0 = alloca i1, align 1
  store i1 false, i1* %_lcompilers_Any_4_1_0, align 1
  store i32 0, i32* %__1_i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %__1_i, align 4
  %1 = add i32 %0, 1
  %2 = load i32, i32* %__1mask, align 4
  %3 = add i32 %2, 1
  %4 = sub i32 %3, 1
  %5 = icmp sle i32 %1, %4
  br i1 %5, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %6 = load i32, i32* %__1_i, align 4
  %7 = add i32 %6, 1
  store i32 %7, i32* %__1_i, align 4
  %8 = load i1, i1* %_lcompilers_Any_4_1_0, align 1
  %9 = load i32, i32* %__1_i, align 4
  %10 = load i32, i32* %__1mask, align 4
  %11 = sub i32 %9, 1
  %12 = mul i32 1, %11
  %13 = add i32 0, %12
  %14 = mul i32 1, %10
  %15 = getelementptr inbounds i1, i1* %mask, i32 %13
  %16 = load i1, i1* %15, align 1
  %17 = icmp eq i1 %8, false
  %18 = select i1 %17, i1 %16, i1 %8
  store i1 %18, i1* %_lcompilers_Any_4_1_0, align 1
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %19 = load i1, i1* %_lcompilers_Any_4_1_0, align 1
  ret i1 %19
}

define void @__module_modules_36_fpm_main_01_cmd_run(%fpm_run_settings_polymorphic* %settings, i1* %test) {
.entry:
  %call_arg_value = alloca i32, align 4
  %array_bound5 = alloca i32, align 4
  %array_bound1 = alloca i32, align 4
  %array_bound = alloca i32, align 4
  %0 = alloca %__vtab_fpm_run_settings, align 8
  %1 = getelementptr %__vtab_fpm_run_settings, %__vtab_fpm_run_settings* %0, i32 0, i32 0
  store i64 0, i64* %1, align 4
  %__libasr_created__intrinsic_array_function_Any = alloca [2 x i1], align 1
  %__libasr_created__intrinsic_array_function_Any1 = alloca i1, align 1
  %__libasr_index_0_ = alloca i32, align 4
  %__libasr_index_0_1 = alloca i32, align 4
  %found = alloca [2 x i1], align 1
  %toomany = alloca i1, align 1
  br i1 true, label %then, label %else

then:                                             ; preds = %.entry
  store i32 1, i32* %array_bound, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %2 = load i32, i32* %array_bound, align 4
  store i32 %2, i32* %__libasr_index_0_1, align 4
  br i1 true, label %then2, label %else3

then2:                                            ; preds = %ifcont
  store i32 1, i32* %array_bound1, align 4
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %3 = load i32, i32* %array_bound1, align 4
  %4 = sub i32 %3, 1
  store i32 %4, i32* %__libasr_index_0_, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %ifcont4
  %5 = load i32, i32* %__libasr_index_0_, align 4
  %6 = add i32 %5, 1
  br i1 true, label %then6, label %else7

then6:                                            ; preds = %loop.head
  store i32 2, i32* %array_bound5, align 4
  br label %ifcont8

else7:                                            ; preds = %loop.head
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %then6
  %7 = load i32, i32* %array_bound5, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %loop.body, label %loop.end

loop.body:                                        ; preds = %ifcont8
  %9 = load i32, i32* %__libasr_index_0_, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %__libasr_index_0_, align 4
  %11 = load i32, i32* %__libasr_index_0_, align 4
  %12 = sub i32 %11, 1
  %13 = mul i32 1, %12
  %14 = add i32 0, %13
  %15 = getelementptr [2 x i1], [2 x i1]* %__libasr_created__intrinsic_array_function_Any, i32 0, i32 %14
  %16 = load i32, i32* %__libasr_index_0_1, align 4
  %17 = sub i32 %16, 1
  %18 = mul i32 1, %17
  %19 = add i32 0, %18
  %20 = getelementptr [2 x i1], [2 x i1]* %found, i32 0, i32 %19
  %21 = load i1, i1* %20, align 1
  %22 = xor i1 %21, true
  store i1 %22, i1* %15, align 1
  %23 = load i32, i32* %__libasr_index_0_1, align 4
  %24 = add i32 %23, 1
  store i32 %24, i32* %__libasr_index_0_1, align 4
  br label %loop.head

loop.end:                                         ; preds = %ifcont8
  %25 = getelementptr [2 x i1], [2 x i1]* %__libasr_created__intrinsic_array_function_Any, i32 0, i32 0
  store i32 2, i32* %call_arg_value, align 4
  %26 = call i1 @_lcompilers_Any_4_1_0_logical____0(i1* %25, i32* %call_arg_value)
  store i1 %26, i1* %__libasr_created__intrinsic_array_function_Any1, align 1
  %27 = load i1, i1* %__libasr_created__intrinsic_array_function_Any1, align 1
  %28 = load i1, i1* %toomany, align 1
  %29 = load i1, i1* %test, align 1
  %30 = xor i1 %29, true
  %31 = icmp eq i1 %28, false
  %32 = select i1 %31, i1 %28, i1 %30
  %33 = load i1, i1* %toomany, align 1
  %34 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %settings, i32 0, i32 1
  %35 = load %fpm_run_settings*, %fpm_run_settings** %34, align 8
  %36 = getelementptr %fpm_run_settings, %fpm_run_settings* %35, i32 0, i32 3
  %37 = getelementptr %string_descriptor, %string_descriptor* %36, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %40 = call i32 @str_compare(i8* %38, i64 6, i8* %39, i64 0)
  %41 = icmp ne i32 %40, 0
  %42 = icmp eq i1 %33, false
  %43 = select i1 %42, i1 %33, i1 %41
  %44 = icmp eq i1 %32, false
  %45 = select i1 %44, i1 %43, i1 %32
  %46 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %settings, i32 0, i32 1
  %47 = load %fpm_run_settings*, %fpm_run_settings** %46, align 8
  %48 = getelementptr %fpm_run_settings, %fpm_run_settings* %47, i32 0, i32 0
  %49 = getelementptr %fpm_build_settings, %fpm_build_settings* %48, i32 0, i32 0
  %50 = load i1, i1* %49, align 1
  %51 = xor i1 %50, true
  %52 = icmp eq i1 %45, false
  %53 = select i1 %52, i1 %45, i1 %51
  %54 = icmp eq i1 %27, false
  %55 = select i1 %54, i1 %53, i1 %27
  br i1 %55, label %then9, label %else10

then9:                                            ; preds = %loop.end
  br label %ifcont11

else10:                                           ; preds = %loop.end
  br label %ifcont11

ifcont11:                                         ; preds = %else10, %then9
  br label %return

return:                                           ; preds = %ifcont11
  ret void
}

declare i32 @str_compare(i8*, i64, i8*, i64)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca i1, align 1
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = alloca %__vtab_fpm_run_settings, align 8
  %3 = getelementptr %__vtab_fpm_run_settings, %__vtab_fpm_run_settings* %2, i32 0, i32 0
  store i64 0, i64* %3, align 4
  %settings = alloca %fpm_run_settings, align 8
  %4 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 2
  store %string_descriptor zeroinitializer, %string_descriptor* %4, align 1
  %5 = getelementptr %string_descriptor, %string_descriptor* %4, i32 0, i32 1
  store i64 4, i64* %5, align 4
  %6 = getelementptr %string_descriptor, %string_descriptor* %4, i32 0, i32 0
  %7 = call i8* @_lfortran_malloc(i64 5)
  call void @_lfortran_string_init(i64 5, i8* %7)
  store i8* %7, i8** %6, align 8
  %8 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 4
  %9 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 1
  %10 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 3
  store %string_descriptor zeroinitializer, %string_descriptor* %10, align 1
  %11 = getelementptr %string_descriptor, %string_descriptor* %10, i32 0, i32 1
  store i64 6, i64* %11, align 4
  %12 = getelementptr %string_descriptor, %string_descriptor* %10, i32 0, i32 0
  %13 = call i8* @_lfortran_malloc(i64 7)
  call void @_lfortran_string_init(i64 7, i8* %13)
  store i8* %13, i8** %12, align 8
  %14 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 0
  %15 = getelementptr %fpm_build_settings, %fpm_build_settings* %14, i32 0, i32 0
  store i1 false, i1* %15, align 1
  %16 = alloca %fpm_run_settings_polymorphic, align 8
  %17 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %16, i32 0, i32 0
  store i64 0, i64* %17, align 4
  %18 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %16, i32 0, i32 1
  store %fpm_run_settings* %settings, %fpm_run_settings** %18, align 8
  store i1 true, i1* %call_arg_value, align 1
  call void @__module_modules_36_fpm_main_01_cmd_run(%fpm_run_settings_polymorphic* %16, i1* %call_arg_value)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_string_init(i64, i8*)

declare void @_lpython_free_argv()
