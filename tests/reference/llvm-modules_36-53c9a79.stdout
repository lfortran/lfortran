; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i1*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }
%fpm_run_settings_polymorphic = type { i64, %fpm_run_settings* }
%fpm_run_settings = type { %fpm_build_settings, [2 x i8*], i8*, i8*, i1 }
%fpm_build_settings = type { i1 }
%__vtab_fpm_run_settings = type { i64 }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

define i1 @any_4_1_0(%array* %mask) {
.entry:
  %__1_i = alloca i32, align 4
  %any_4_1_0 = alloca i1, align 1
  store i1 false, i1* %any_4_1_0, align 1
  %0 = getelementptr %array, %array* %mask, i32 0, i32 2
  %1 = load %dimension_descriptor*, %dimension_descriptor** %0, align 8
  %2 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 0
  %3 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = sub i32 %4, 1
  store i32 %5, i32* %__1_i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %6 = load i32, i32* %__1_i, align 4
  %7 = add i32 %6, 1
  %8 = getelementptr %array, %array* %mask, i32 0, i32 2
  %9 = load %dimension_descriptor*, %dimension_descriptor** %8, align 8
  %10 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %9, i32 0
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %10, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr %dimension_descriptor, %dimension_descriptor* %10, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = add i32 %14, %12
  %16 = sub i32 %15, 1
  %17 = icmp sle i32 %7, %16
  br i1 %17, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %18 = load i32, i32* %__1_i, align 4
  %19 = add i32 %18, 1
  store i32 %19, i32* %__1_i, align 4
  %20 = load i1, i1* %any_4_1_0, align 1
  %21 = load i32, i32* %__1_i, align 4
  %22 = getelementptr %array, %array* %mask, i32 0, i32 2
  %23 = load %dimension_descriptor*, %dimension_descriptor** %22, align 8
  %24 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %23, i32 0
  %25 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = sub i32 %21, %26
  %28 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 %29, %27
  %31 = add i32 0, %30
  %32 = getelementptr %array, %array* %mask, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = add i32 %31, %33
  %35 = getelementptr %array, %array* %mask, i32 0, i32 0
  %36 = load i1*, i1** %35, align 8
  %37 = getelementptr inbounds i1, i1* %36, i32 %34
  %38 = load i1, i1* %37, align 1
  %39 = icmp eq i1 %20, false
  %40 = select i1 %39, i1 %38, i1 %20
  store i1 %40, i1* %any_4_1_0, align 1
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %41 = load i1, i1* %any_4_1_0, align 1
  ret i1 %41
}

define void @__module_modules_36_fpm_main_01_cmd_run(%fpm_run_settings_polymorphic* %settings, i1* %test) {
.entry:
  %array_descriptor = alloca %array, align 8
  %array_bound5 = alloca i32, align 4
  %array_bound1 = alloca i32, align 4
  %array_bound = alloca i32, align 4
  %0 = alloca %__vtab_fpm_run_settings, align 8
  %1 = getelementptr %__vtab_fpm_run_settings, %__vtab_fpm_run_settings* %0, i32 0, i32 0
  store i64 0, i64* %1, align 4
  %__1_t = alloca i32, align 4
  %__1_v = alloca i32, align 4
  %__libasr__created__var__0__logicalnot_unary_op_res = alloca [2 x i1], align 1
  %found = alloca [2 x i1], align 1
  %toomany = alloca i1, align 1
  br i1 true, label %then, label %else

then:                                             ; preds = %.entry
  store i32 1, i32* %array_bound, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %2 = load i32, i32* %array_bound, align 4
  store i32 %2, i32* %__1_v, align 4
  br i1 true, label %then2, label %else3

then2:                                            ; preds = %ifcont
  store i32 1, i32* %array_bound1, align 4
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %3 = load i32, i32* %array_bound1, align 4
  %4 = sub i32 %3, 1
  store i32 %4, i32* %__1_t, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %ifcont4
  %5 = load i32, i32* %__1_t, align 4
  %6 = add i32 %5, 1
  br i1 true, label %then6, label %else7

then6:                                            ; preds = %loop.head
  store i32 2, i32* %array_bound5, align 4
  br label %ifcont8

else7:                                            ; preds = %loop.head
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %then6
  %7 = load i32, i32* %array_bound5, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %loop.body, label %loop.end

loop.body:                                        ; preds = %ifcont8
  %9 = load i32, i32* %__1_t, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %__1_t, align 4
  %11 = load i32, i32* %__1_t, align 4
  %12 = sub i32 %11, 1
  %13 = mul i32 1, %12
  %14 = add i32 0, %13
  %15 = getelementptr [2 x i1], [2 x i1]* %__libasr__created__var__0__logicalnot_unary_op_res, i32 0, i32 %14
  %16 = load i32, i32* %__1_v, align 4
  %17 = sub i32 %16, 1
  %18 = mul i32 1, %17
  %19 = add i32 0, %18
  %20 = getelementptr [2 x i1], [2 x i1]* %found, i32 0, i32 %19
  %21 = load i1, i1* %20, align 1
  %22 = xor i1 %21, true
  store i1 %22, i1* %15, align 1
  %23 = load i32, i32* %__1_v, align 4
  %24 = add i32 %23, 1
  store i32 %24, i32* %__1_v, align 4
  br label %loop.head

loop.end:                                         ; preds = %ifcont8
  %25 = getelementptr [2 x i1], [2 x i1]* %__libasr__created__var__0__logicalnot_unary_op_res, i32 0, i32 0
  %26 = getelementptr %array, %array* %array_descriptor, i32 0, i32 0
  store i1* %25, i1** %26, align 8
  %27 = getelementptr %array, %array* %array_descriptor, i32 0, i32 1
  store i32 0, i32* %27, align 4
  %28 = getelementptr %array, %array* %array_descriptor, i32 0, i32 2
  %29 = alloca i32, align 4
  store i32 1, i32* %29, align 4
  %30 = load i32, i32* %29, align 4
  %31 = alloca %dimension_descriptor, i32 %30, align 8
  %32 = getelementptr %array, %array* %array_descriptor, i32 0, i32 4
  store i32 1, i32* %32, align 4
  store %dimension_descriptor* %31, %dimension_descriptor** %28, align 8
  %33 = load %dimension_descriptor*, %dimension_descriptor** %28, align 8
  %34 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %33, i32 0
  %35 = getelementptr %dimension_descriptor, %dimension_descriptor* %34, i32 0, i32 0
  %36 = getelementptr %dimension_descriptor, %dimension_descriptor* %34, i32 0, i32 1
  %37 = getelementptr %dimension_descriptor, %dimension_descriptor* %34, i32 0, i32 2
  store i32 1, i32* %35, align 4
  store i32 1, i32* %36, align 4
  store i32 2, i32* %37, align 4
  %38 = call i1 @any_4_1_0(%array* %array_descriptor)
  %39 = load i1, i1* %toomany, align 1
  %40 = load i1, i1* %test, align 1
  %41 = xor i1 %40, true
  %42 = icmp eq i1 %39, false
  %43 = select i1 %42, i1 %39, i1 %41
  %44 = load i1, i1* %toomany, align 1
  %45 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %settings, i32 0, i32 1
  %46 = load %fpm_run_settings*, %fpm_run_settings** %45, align 8
  %47 = getelementptr %fpm_run_settings, %fpm_run_settings* %46, i32 0, i32 3
  %48 = load i8*, i8** %47, align 8
  %49 = alloca i8*, align 8
  store i8* %48, i8** %49, align 8
  %50 = alloca i8*, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i32 0, i32 0), i8** %50, align 8
  %51 = call i1 @_lpython_str_compare_noteq(i8** %49, i8** %50)
  %52 = icmp eq i1 %44, false
  %53 = select i1 %52, i1 %44, i1 %51
  %54 = icmp eq i1 %43, false
  %55 = select i1 %54, i1 %53, i1 %43
  %56 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %settings, i32 0, i32 1
  %57 = load %fpm_run_settings*, %fpm_run_settings** %56, align 8
  %58 = getelementptr %fpm_run_settings, %fpm_run_settings* %57, i32 0, i32 0
  %59 = getelementptr %fpm_build_settings, %fpm_build_settings* %58, i32 0, i32 0
  %60 = load i1, i1* %59, align 1
  %61 = xor i1 %60, true
  %62 = icmp eq i1 %55, false
  %63 = select i1 %62, i1 %55, i1 %61
  %64 = icmp eq i1 %38, false
  %65 = select i1 %64, i1 %63, i1 %38
  br i1 %65, label %then9, label %else10

then9:                                            ; preds = %loop.end
  br label %ifcont11

else10:                                           ; preds = %loop.end
  br label %ifcont11

ifcont11:                                         ; preds = %else10, %then9
  br label %return

return:                                           ; preds = %ifcont11
  ret void
}

declare i1 @_lpython_str_compare_noteq(i8**, i8**)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca i1, align 1
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %settings = alloca %fpm_run_settings, align 8
  %2 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 2
  %3 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 4
  %4 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 1
  %5 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 3
  %6 = alloca %fpm_run_settings_polymorphic, align 8
  %7 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %6, i32 0, i32 0
  store i64 0, i64* %7, align 4
  %8 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %6, i32 0, i32 1
  store %fpm_run_settings* %settings, %fpm_run_settings** %8, align 8
  store i1 true, i1* %call_arg_value, align 1
  call void @__module_modules_36_fpm_main_01_cmd_run(%fpm_run_settings_polymorphic* %6, i1* %call_arg_value)
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)
