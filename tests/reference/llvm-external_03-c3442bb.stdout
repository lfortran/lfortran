; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @a(float (float*)* %f) {
.entry:
  %call_arg_value = alloca float, align 4
  %r = alloca float, align 4
  store float 2.000000e+00, float* %call_arg_value, align 4
  %0 = call float %f(float* %call_arg_value)
  store float %0, float* %r, align 4
  %1 = load float, float* %r, align 4
  %2 = fpext float %1 to double
  %3 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 2, i8* null, i32 6, double %2)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare float @f(float*)

define void @b() {
.entry:
  call void @a(float (float*)* @f.1)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare float @f.1(float*)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  call void @b()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)
