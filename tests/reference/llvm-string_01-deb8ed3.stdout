; ModuleID = 'LFortran'
source_filename = "LFortran"

@print_01.my_name = internal global i8* null
@0 = private unnamed_addr constant [8 x i8] c"Dominic\00", align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"My name is \00", align 1
@4 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %2 = call i8* @_lfortran_malloc(i32 8)
  call void @_lfortran_string_init(i32 8, i8* %2)
  store i8* %2, i8** @print_01.my_name, align 8
  call void @_lfortran_strcpy(i8** @print_01.my_name, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i32 0, i32 0), i8 0)
  %3 = load i8*, i8** @print_01.my_name, align 8
  %4 = load i8*, i8** @print_01.my_name, align 8
  %5 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 4, i8* null, i32 7, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0), i32 7, i8* %4)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i8* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i32)

declare void @_lfortran_string_init(i32, i8*)

declare void @_lfortran_strcpy(i8**, i8*, i8)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)
