; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { float*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }
%array.0 = type { i32*, i32, %dimension_descriptor*, i1, i32 }

@0 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@1 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@2 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define void @check_real(%array** %r) {
.entry:
  %u = alloca i32, align 4
  %v = alloca i32, align 4
  %0 = load %array*, %array** %r, align 8
  %1 = getelementptr %array, %array* %0, i32 0, i32 2
  %2 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %3 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %2, i32 0
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %3, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = sub i32 %5, 1
  store i32 %6, i32* %u, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.end, %.entry
  %7 = load i32, i32* %u, align 4
  %8 = add i32 %7, 1
  %9 = load %array*, %array** %r, align 8
  %10 = getelementptr %array, %array* %9, i32 0, i32 2
  %11 = load %dimension_descriptor*, %dimension_descriptor** %10, align 8
  %12 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %11, i32 0
  %13 = getelementptr %dimension_descriptor, %dimension_descriptor* %12, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr %dimension_descriptor, %dimension_descriptor* %12, i32 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = add i32 %16, %14
  %18 = sub i32 %17, 1
  %19 = icmp sle i32 %8, %18
  br i1 %19, label %loop.body, label %loop.end3

loop.body:                                        ; preds = %loop.head
  %20 = load i32, i32* %u, align 4
  %21 = add i32 %20, 1
  store i32 %21, i32* %u, align 4
  %22 = load %array*, %array** %r, align 8
  %23 = getelementptr %array, %array* %22, i32 0, i32 2
  %24 = load %dimension_descriptor*, %dimension_descriptor** %23, align 8
  %25 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %24, i32 1
  %26 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = sub i32 %27, 1
  store i32 %28, i32* %v, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont, %loop.body
  %29 = load i32, i32* %v, align 4
  %30 = add i32 %29, 1
  %31 = load %array*, %array** %r, align 8
  %32 = getelementptr %array, %array* %31, i32 0, i32 2
  %33 = load %dimension_descriptor*, %dimension_descriptor** %32, align 8
  %34 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %33, i32 1
  %35 = getelementptr %dimension_descriptor, %dimension_descriptor* %34, i32 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr %dimension_descriptor, %dimension_descriptor* %34, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = add i32 %38, %36
  %40 = sub i32 %39, 1
  %41 = icmp sle i32 %30, %40
  br i1 %41, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %42 = load i32, i32* %v, align 4
  %43 = add i32 %42, 1
  store i32 %43, i32* %v, align 4
  %44 = load i32, i32* %u, align 4
  %45 = load i32, i32* %v, align 4
  %46 = load %array*, %array** %r, align 8
  %47 = getelementptr %array, %array* %46, i32 0, i32 2
  %48 = load %dimension_descriptor*, %dimension_descriptor** %47, align 8
  %49 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %48, i32 0
  %50 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = sub i32 %44, %51
  %53 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = mul i32 %54, %52
  %56 = add i32 0, %55
  %57 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %48, i32 1
  %58 = getelementptr %dimension_descriptor, %dimension_descriptor* %57, i32 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = sub i32 %45, %59
  %61 = getelementptr %dimension_descriptor, %dimension_descriptor* %57, i32 0, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = mul i32 %62, %60
  %64 = add i32 %56, %63
  %65 = getelementptr %array, %array* %46, i32 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = add i32 %64, %66
  %68 = getelementptr %array, %array* %46, i32 0, i32 0
  %69 = load float*, float** %68, align 8
  %70 = getelementptr inbounds float, float* %69, i32 %67
  %71 = load float, float* %70, align 4
  %72 = load i32, i32* %u, align 4
  %73 = load i32, i32* %v, align 4
  %74 = mul i32 %72, %73
  %75 = sitofp i32 %74 to float
  %76 = fcmp one float %71, %75
  br i1 %76, label %then, label %else

then:                                             ; preds = %loop.body2
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.body2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  br label %loop.head

loop.end3:                                        ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end3
  ret void
}

define void @check_real_without_pointer(%array* %r) {
.entry:
  %u = alloca i32, align 4
  %v = alloca i32, align 4
  %0 = getelementptr %array, %array* %r, i32 0, i32 2
  %1 = load %dimension_descriptor*, %dimension_descriptor** %0, align 8
  %2 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 0
  %3 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = sub i32 %4, 1
  store i32 %5, i32* %u, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.end, %.entry
  %6 = load i32, i32* %u, align 4
  %7 = add i32 %6, 1
  %8 = getelementptr %array, %array* %r, i32 0, i32 2
  %9 = load %dimension_descriptor*, %dimension_descriptor** %8, align 8
  %10 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %9, i32 0
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %10, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr %dimension_descriptor, %dimension_descriptor* %10, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = add i32 %14, %12
  %16 = sub i32 %15, 1
  %17 = icmp sle i32 %7, %16
  br i1 %17, label %loop.body, label %loop.end3

loop.body:                                        ; preds = %loop.head
  %18 = load i32, i32* %u, align 4
  %19 = add i32 %18, 1
  store i32 %19, i32* %u, align 4
  %20 = getelementptr %array, %array* %r, i32 0, i32 2
  %21 = load %dimension_descriptor*, %dimension_descriptor** %20, align 8
  %22 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %21, i32 1
  %23 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sub i32 %24, 1
  store i32 %25, i32* %v, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont, %loop.body
  %26 = load i32, i32* %v, align 4
  %27 = add i32 %26, 1
  %28 = getelementptr %array, %array* %r, i32 0, i32 2
  %29 = load %dimension_descriptor*, %dimension_descriptor** %28, align 8
  %30 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %29, i32 1
  %31 = getelementptr %dimension_descriptor, %dimension_descriptor* %30, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr %dimension_descriptor, %dimension_descriptor* %30, i32 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = add i32 %34, %32
  %36 = sub i32 %35, 1
  %37 = icmp sle i32 %27, %36
  br i1 %37, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %38 = load i32, i32* %v, align 4
  %39 = add i32 %38, 1
  store i32 %39, i32* %v, align 4
  %40 = load i32, i32* %u, align 4
  %41 = load i32, i32* %v, align 4
  %42 = getelementptr %array, %array* %r, i32 0, i32 2
  %43 = load %dimension_descriptor*, %dimension_descriptor** %42, align 8
  %44 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %43, i32 0
  %45 = getelementptr %dimension_descriptor, %dimension_descriptor* %44, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = sub i32 %40, %46
  %48 = getelementptr %dimension_descriptor, %dimension_descriptor* %44, i32 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = mul i32 %49, %47
  %51 = add i32 0, %50
  %52 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %43, i32 1
  %53 = getelementptr %dimension_descriptor, %dimension_descriptor* %52, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = sub i32 %41, %54
  %56 = getelementptr %dimension_descriptor, %dimension_descriptor* %52, i32 0, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = mul i32 %57, %55
  %59 = add i32 %51, %58
  %60 = getelementptr %array, %array* %r, i32 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = add i32 %59, %61
  %63 = getelementptr %array, %array* %r, i32 0, i32 0
  %64 = load float*, float** %63, align 8
  %65 = getelementptr inbounds float, float* %64, i32 %62
  %66 = load float, float* %65, align 4
  %67 = load i32, i32* %u, align 4
  %68 = load i32, i32* %v, align 4
  %69 = mul i32 %67, %68
  %70 = sitofp i32 %69 to float
  %71 = fcmp one float %66, %70
  br i1 %71, label %then, label %else

then:                                             ; preds = %loop.body2
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.body2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  br label %loop.head

loop.end3:                                        ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end3
  ret void
}

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %array_descriptor1 = alloca %array, align 8
  %array_descriptor = alloca %array.0, align 8
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %i = alloca %array.0*, align 8
  store %array.0* null, %array.0** %i, align 8
  %iv = alloca [2 x i32], align 4
  %r = alloca %array*, align 8
  store %array* null, %array** %r, align 8
  %rv = alloca [6 x float], align 4
  %u = alloca i32, align 4
  %v = alloca i32, align 4
  %2 = getelementptr [2 x i32], [2 x i32]* %iv, i32 0, i32 0
  %3 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 0
  store i32* %2, i32** %3, align 8
  %4 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 1
  store i32 0, i32* %4, align 4
  %5 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 2
  %6 = alloca i32, align 4
  store i32 1, i32* %6, align 4
  %7 = load i32, i32* %6, align 4
  %8 = alloca %dimension_descriptor, i32 %7, align 8
  %9 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 4
  store i32 1, i32* %9, align 4
  store %dimension_descriptor* %8, %dimension_descriptor** %5, align 8
  %10 = load %dimension_descriptor*, %dimension_descriptor** %5, align 8
  %11 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %10, i32 0
  %12 = getelementptr %dimension_descriptor, %dimension_descriptor* %11, i32 0, i32 0
  %13 = getelementptr %dimension_descriptor, %dimension_descriptor* %11, i32 0, i32 1
  %14 = getelementptr %dimension_descriptor, %dimension_descriptor* %11, i32 0, i32 2
  store i32 1, i32* %12, align 4
  store i32 1, i32* %13, align 4
  store i32 2, i32* %14, align 4
  store %array.0* %array_descriptor, %array.0** %i, align 8
  %15 = getelementptr [6 x float], [6 x float]* %rv, i32 0, i32 0
  %16 = getelementptr %array, %array* %array_descriptor1, i32 0, i32 0
  store float* %15, float** %16, align 8
  %17 = getelementptr %array, %array* %array_descriptor1, i32 0, i32 1
  store i32 0, i32* %17, align 4
  %18 = getelementptr %array, %array* %array_descriptor1, i32 0, i32 2
  %19 = alloca i32, align 4
  store i32 2, i32* %19, align 4
  %20 = load i32, i32* %19, align 4
  %21 = alloca %dimension_descriptor, i32 %20, align 8
  %22 = getelementptr %array, %array* %array_descriptor1, i32 0, i32 4
  store i32 2, i32* %22, align 4
  store %dimension_descriptor* %21, %dimension_descriptor** %18, align 8
  %23 = load %dimension_descriptor*, %dimension_descriptor** %18, align 8
  %24 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %23, i32 0
  %25 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 0
  %26 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 1
  %27 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 2
  store i32 1, i32* %25, align 4
  store i32 1, i32* %26, align 4
  store i32 2, i32* %27, align 4
  %28 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %23, i32 1
  %29 = getelementptr %dimension_descriptor, %dimension_descriptor* %28, i32 0, i32 0
  %30 = getelementptr %dimension_descriptor, %dimension_descriptor* %28, i32 0, i32 1
  %31 = getelementptr %dimension_descriptor, %dimension_descriptor* %28, i32 0, i32 2
  store i32 2, i32* %29, align 4
  store i32 1, i32* %30, align 4
  store i32 3, i32* %31, align 4
  store %array* %array_descriptor1, %array** %r, align 8
  %32 = load %array.0*, %array.0** %i, align 8
  %33 = getelementptr %array.0, %array.0* %32, i32 0, i32 2
  %34 = load %dimension_descriptor*, %dimension_descriptor** %33, align 8
  %35 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %34, i32 0
  %36 = getelementptr %dimension_descriptor, %dimension_descriptor* %35, i32 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = sub i32 1, %37
  %39 = getelementptr %dimension_descriptor, %dimension_descriptor* %35, i32 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = mul i32 %40, %38
  %42 = add i32 0, %41
  %43 = getelementptr %array.0, %array.0* %32, i32 0, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = add i32 %42, %44
  %46 = getelementptr %array.0, %array.0* %32, i32 0, i32 0
  %47 = load i32*, i32** %46, align 8
  %48 = getelementptr inbounds i32, i32* %47, i32 %45
  store i32 1, i32* %48, align 4
  %49 = load %array.0*, %array.0** %i, align 8
  %50 = getelementptr %array.0, %array.0* %49, i32 0, i32 2
  %51 = load %dimension_descriptor*, %dimension_descriptor** %50, align 8
  %52 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %51, i32 0
  %53 = getelementptr %dimension_descriptor, %dimension_descriptor* %52, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = sub i32 1, %54
  %56 = getelementptr %dimension_descriptor, %dimension_descriptor* %52, i32 0, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = mul i32 %57, %55
  %59 = add i32 0, %58
  %60 = getelementptr %array.0, %array.0* %49, i32 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = add i32 %59, %61
  %63 = getelementptr %array.0, %array.0* %49, i32 0, i32 0
  %64 = load i32*, i32** %63, align 8
  %65 = getelementptr inbounds i32, i32* %64, i32 %62
  %66 = load i32, i32* %65, align 4
  %67 = icmp ne i32 %66, 1
  br i1 %67, label %then, label %else

then:                                             ; preds = %.entry
  %68 = load %array.0*, %array.0** %i, align 8
  %69 = getelementptr %array.0, %array.0* %68, i32 0, i32 2
  %70 = load %dimension_descriptor*, %dimension_descriptor** %69, align 8
  %71 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %70, i32 0
  %72 = getelementptr %dimension_descriptor, %dimension_descriptor* %71, i32 0, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = sub i32 2, %73
  %75 = getelementptr %dimension_descriptor, %dimension_descriptor* %71, i32 0, i32 0
  %76 = load i32, i32* %75, align 4
  %77 = mul i32 %76, %74
  %78 = add i32 0, %77
  %79 = getelementptr %array.0, %array.0* %68, i32 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = add i32 %78, %80
  %82 = getelementptr %array.0, %array.0* %68, i32 0, i32 0
  %83 = load i32*, i32** %82, align 8
  %84 = getelementptr inbounds i32, i32* %83, i32 %81
  store i32 3, i32* %84, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %85 = load %array.0*, %array.0** %i, align 8
  %86 = getelementptr %array.0, %array.0* %85, i32 0, i32 2
  %87 = load %dimension_descriptor*, %dimension_descriptor** %86, align 8
  %88 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %87, i32 0
  %89 = getelementptr %dimension_descriptor, %dimension_descriptor* %88, i32 0, i32 1
  %90 = load i32, i32* %89, align 4
  %91 = sub i32 2, %90
  %92 = getelementptr %dimension_descriptor, %dimension_descriptor* %88, i32 0, i32 0
  %93 = load i32, i32* %92, align 4
  %94 = mul i32 %93, %91
  %95 = add i32 0, %94
  %96 = getelementptr %array.0, %array.0* %85, i32 0, i32 1
  %97 = load i32, i32* %96, align 4
  %98 = add i32 %95, %97
  %99 = getelementptr %array.0, %array.0* %85, i32 0, i32 0
  %100 = load i32*, i32** %99, align 8
  %101 = getelementptr inbounds i32, i32* %100, i32 %98
  store i32 7, i32* %101, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %102 = getelementptr [2 x i32], [2 x i32]* %iv, i32 0, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp ne i32 %103, 1
  br i1 %104, label %then2, label %else3

then2:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %105 = getelementptr [2 x i32], [2 x i32]* %iv, i32 0, i32 1
  %106 = load i32, i32* %105, align 4
  %107 = icmp ne i32 %106, 7
  br i1 %107, label %then5, label %else6

then5:                                            ; preds = %ifcont4
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont7

else6:                                            ; preds = %ifcont4
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  %108 = load %array*, %array** %r, align 8
  %109 = getelementptr %array, %array* %108, i32 0, i32 2
  %110 = load %dimension_descriptor*, %dimension_descriptor** %109, align 8
  %111 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %110, i32 0
  %112 = getelementptr %dimension_descriptor, %dimension_descriptor* %111, i32 0, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = sub i32 %113, 1
  store i32 %114, i32* %u, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.end, %ifcont7
  %115 = load i32, i32* %u, align 4
  %116 = add i32 %115, 1
  %117 = load %array*, %array** %r, align 8
  %118 = getelementptr %array, %array* %117, i32 0, i32 2
  %119 = load %dimension_descriptor*, %dimension_descriptor** %118, align 8
  %120 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %119, i32 0
  %121 = getelementptr %dimension_descriptor, %dimension_descriptor* %120, i32 0, i32 1
  %122 = load i32, i32* %121, align 4
  %123 = getelementptr %dimension_descriptor, %dimension_descriptor* %120, i32 0, i32 2
  %124 = load i32, i32* %123, align 4
  %125 = add i32 %124, %122
  %126 = sub i32 %125, 1
  %127 = icmp sle i32 %116, %126
  br i1 %127, label %loop.body, label %loop.end10

loop.body:                                        ; preds = %loop.head
  %128 = load i32, i32* %u, align 4
  %129 = add i32 %128, 1
  store i32 %129, i32* %u, align 4
  %130 = load %array*, %array** %r, align 8
  %131 = getelementptr %array, %array* %130, i32 0, i32 2
  %132 = load %dimension_descriptor*, %dimension_descriptor** %131, align 8
  %133 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %132, i32 1
  %134 = getelementptr %dimension_descriptor, %dimension_descriptor* %133, i32 0, i32 1
  %135 = load i32, i32* %134, align 4
  %136 = sub i32 %135, 1
  store i32 %136, i32* %v, align 4
  br label %loop.head8

loop.head8:                                       ; preds = %loop.body9, %loop.body
  %137 = load i32, i32* %v, align 4
  %138 = add i32 %137, 1
  %139 = load %array*, %array** %r, align 8
  %140 = getelementptr %array, %array* %139, i32 0, i32 2
  %141 = load %dimension_descriptor*, %dimension_descriptor** %140, align 8
  %142 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %141, i32 1
  %143 = getelementptr %dimension_descriptor, %dimension_descriptor* %142, i32 0, i32 1
  %144 = load i32, i32* %143, align 4
  %145 = getelementptr %dimension_descriptor, %dimension_descriptor* %142, i32 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = add i32 %146, %144
  %148 = sub i32 %147, 1
  %149 = icmp sle i32 %138, %148
  br i1 %149, label %loop.body9, label %loop.end

loop.body9:                                       ; preds = %loop.head8
  %150 = load i32, i32* %v, align 4
  %151 = add i32 %150, 1
  store i32 %151, i32* %v, align 4
  %152 = load i32, i32* %u, align 4
  %153 = load i32, i32* %v, align 4
  %154 = sub i32 %152, 1
  %155 = mul i32 1, %154
  %156 = add i32 0, %155
  %157 = sub i32 %153, 1
  %158 = mul i32 2, %157
  %159 = add i32 %156, %158
  %160 = getelementptr [6 x float], [6 x float]* %rv, i32 0, i32 %159
  %161 = load i32, i32* %u, align 4
  %162 = load i32, i32* %v, align 4
  %163 = mul i32 %161, %162
  %164 = sitofp i32 %163 to float
  store float %164, float* %160, align 4
  br label %loop.head8

loop.end:                                         ; preds = %loop.head8
  br label %loop.head

loop.end10:                                       ; preds = %loop.head
  call void @check_real(%array** %r)
  %165 = load %array*, %array** %r, align 8
  call void @check_real_without_pointer(%array* %165)
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)
