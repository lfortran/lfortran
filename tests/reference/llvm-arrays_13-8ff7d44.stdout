; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { float*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }
%array.0 = type { i32*, i32, %dimension_descriptor*, i1, i32 }

@0 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@9 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %array_descriptor4 = alloca %array, align 8
  %array_descriptor = alloca %array.0, align 8
  %u = alloca i32, align 4
  %v = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %i = alloca %array.0*, align 8
  store %array.0* null, %array.0** %i, align 8
  %arr_desc = alloca %array.0, align 8
  %2 = getelementptr %array.0, %array.0* %arr_desc, i32 0, i32 2
  %3 = alloca i32, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = alloca %dimension_descriptor, i32 %4, align 8
  store %dimension_descriptor* %5, %dimension_descriptor** %2, align 8
  %6 = getelementptr %array.0, %array.0* %arr_desc, i32 0, i32 4
  store i32 1, i32* %6, align 4
  %7 = getelementptr %array.0, %array.0* %arr_desc, i32 0, i32 0
  store i32* null, i32** %7, align 8
  store %array.0* %arr_desc, %array.0** %i, align 8
  %iv = alloca [2 x i32], align 4
  %r = alloca %array*, align 8
  store %array* null, %array** %r, align 8
  %arr_desc1 = alloca %array, align 8
  %8 = getelementptr %array, %array* %arr_desc1, i32 0, i32 2
  %9 = alloca i32, align 4
  store i32 2, i32* %9, align 4
  %10 = load i32, i32* %9, align 4
  %11 = alloca %dimension_descriptor, i32 %10, align 8
  store %dimension_descriptor* %11, %dimension_descriptor** %8, align 8
  %12 = getelementptr %array, %array* %arr_desc1, i32 0, i32 4
  store i32 2, i32* %12, align 4
  %13 = getelementptr %array, %array* %arr_desc1, i32 0, i32 0
  store float* null, float** %13, align 8
  store %array* %arr_desc1, %array** %r, align 8
  %rv = alloca [6 x float], align 4
  %u2 = alloca i32, align 4
  %v3 = alloca i32, align 4
  %14 = getelementptr [2 x i32], [2 x i32]* %iv, i32 0, i32 0
  %15 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 0
  store i32* %14, i32** %15, align 8
  %16 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 1
  store i32 0, i32* %16, align 4
  %17 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 2
  %18 = alloca %dimension_descriptor, align 8
  store %dimension_descriptor* %18, %dimension_descriptor** %17, align 8
  %19 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 4
  store i32 1, i32* %19, align 4
  %20 = load %dimension_descriptor*, %dimension_descriptor** %17, align 8
  %21 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %20, i32 0
  %22 = getelementptr %dimension_descriptor, %dimension_descriptor* %21, i32 0, i32 0
  %23 = getelementptr %dimension_descriptor, %dimension_descriptor* %21, i32 0, i32 1
  %24 = getelementptr %dimension_descriptor, %dimension_descriptor* %21, i32 0, i32 2
  store i32 1, i32* %22, align 4
  store i32 1, i32* %23, align 4
  store i32 2, i32* %24, align 4
  %25 = load %array.0*, %array.0** %i, align 8
  %26 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 0
  %27 = getelementptr %array.0, %array.0* %25, i32 0, i32 0
  %28 = load i32*, i32** %26, align 8
  store i32* %28, i32** %27, align 8
  %29 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 2
  %30 = load %dimension_descriptor*, %dimension_descriptor** %29, align 8
  %31 = getelementptr %array.0, %array.0* %25, i32 0, i32 2
  %32 = load %dimension_descriptor*, %dimension_descriptor** %31, align 8
  %33 = bitcast %dimension_descriptor* %32 to i8*
  %34 = bitcast %dimension_descriptor* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 12, i1 false)
  %35 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 1
  %36 = getelementptr %array.0, %array.0* %25, i32 0, i32 1
  %37 = load i32, i32* %35, align 4
  store i32 %37, i32* %36, align 4
  %38 = getelementptr [6 x float], [6 x float]* %rv, i32 0, i32 0
  %39 = getelementptr %array, %array* %array_descriptor4, i32 0, i32 0
  store float* %38, float** %39, align 8
  %40 = getelementptr %array, %array* %array_descriptor4, i32 0, i32 1
  store i32 0, i32* %40, align 4
  %41 = getelementptr %array, %array* %array_descriptor4, i32 0, i32 2
  %42 = alloca %dimension_descriptor, i32 2, align 8
  store %dimension_descriptor* %42, %dimension_descriptor** %41, align 8
  %43 = getelementptr %array, %array* %array_descriptor4, i32 0, i32 4
  store i32 2, i32* %43, align 4
  %44 = load %dimension_descriptor*, %dimension_descriptor** %41, align 8
  %45 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %44, i32 0
  %46 = getelementptr %dimension_descriptor, %dimension_descriptor* %45, i32 0, i32 0
  %47 = getelementptr %dimension_descriptor, %dimension_descriptor* %45, i32 0, i32 1
  %48 = getelementptr %dimension_descriptor, %dimension_descriptor* %45, i32 0, i32 2
  store i32 1, i32* %46, align 4
  store i32 1, i32* %47, align 4
  store i32 2, i32* %48, align 4
  %49 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %44, i32 1
  %50 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 0
  %51 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 1
  %52 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 2
  store i32 2, i32* %50, align 4
  store i32 1, i32* %51, align 4
  store i32 3, i32* %52, align 4
  %53 = load %array*, %array** %r, align 8
  %54 = getelementptr %array, %array* %array_descriptor4, i32 0, i32 0
  %55 = getelementptr %array, %array* %53, i32 0, i32 0
  %56 = load float*, float** %54, align 8
  store float* %56, float** %55, align 8
  %57 = getelementptr %array, %array* %array_descriptor4, i32 0, i32 2
  %58 = load %dimension_descriptor*, %dimension_descriptor** %57, align 8
  %59 = getelementptr %array, %array* %53, i32 0, i32 2
  %60 = load %dimension_descriptor*, %dimension_descriptor** %59, align 8
  %61 = bitcast %dimension_descriptor* %60 to i8*
  %62 = bitcast %dimension_descriptor* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false)
  %63 = getelementptr %array, %array* %array_descriptor4, i32 0, i32 1
  %64 = getelementptr %array, %array* %53, i32 0, i32 1
  %65 = load i32, i32* %63, align 4
  store i32 %65, i32* %64, align 4
  %66 = load %array.0*, %array.0** %i, align 8
  %67 = getelementptr %array.0, %array.0* %66, i32 0, i32 2
  %68 = load %dimension_descriptor*, %dimension_descriptor** %67, align 8
  %69 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %68, i32 0
  %70 = getelementptr %dimension_descriptor, %dimension_descriptor* %69, i32 0, i32 1
  %71 = load i32, i32* %70, align 4
  %72 = sub i32 1, %71
  %73 = getelementptr %dimension_descriptor, %dimension_descriptor* %69, i32 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = mul i32 %74, %72
  %76 = add i32 0, %75
  %77 = getelementptr %array.0, %array.0* %66, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = add i32 %76, %78
  %80 = getelementptr %array.0, %array.0* %66, i32 0, i32 0
  %81 = load i32*, i32** %80, align 8
  %82 = getelementptr inbounds i32, i32* %81, i32 %79
  store i32 1, i32* %82, align 4
  %83 = load %array.0*, %array.0** %i, align 8
  %84 = getelementptr %array.0, %array.0* %83, i32 0, i32 2
  %85 = load %dimension_descriptor*, %dimension_descriptor** %84, align 8
  %86 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %85, i32 0
  %87 = getelementptr %dimension_descriptor, %dimension_descriptor* %86, i32 0, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = sub i32 1, %88
  %90 = getelementptr %dimension_descriptor, %dimension_descriptor* %86, i32 0, i32 0
  %91 = load i32, i32* %90, align 4
  %92 = mul i32 %91, %89
  %93 = add i32 0, %92
  %94 = getelementptr %array.0, %array.0* %83, i32 0, i32 1
  %95 = load i32, i32* %94, align 4
  %96 = add i32 %93, %95
  %97 = getelementptr %array.0, %array.0* %83, i32 0, i32 0
  %98 = load i32*, i32** %97, align 8
  %99 = getelementptr inbounds i32, i32* %98, i32 %96
  %100 = load i32, i32* %99, align 4
  %101 = icmp ne i32 %100, 1
  br i1 %101, label %then, label %else

then:                                             ; preds = %.entry
  %102 = load %array.0*, %array.0** %i, align 8
  %103 = getelementptr %array.0, %array.0* %102, i32 0, i32 2
  %104 = load %dimension_descriptor*, %dimension_descriptor** %103, align 8
  %105 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %104, i32 0
  %106 = getelementptr %dimension_descriptor, %dimension_descriptor* %105, i32 0, i32 1
  %107 = load i32, i32* %106, align 4
  %108 = sub i32 2, %107
  %109 = getelementptr %dimension_descriptor, %dimension_descriptor* %105, i32 0, i32 0
  %110 = load i32, i32* %109, align 4
  %111 = mul i32 %110, %108
  %112 = add i32 0, %111
  %113 = getelementptr %array.0, %array.0* %102, i32 0, i32 1
  %114 = load i32, i32* %113, align 4
  %115 = add i32 %112, %114
  %116 = getelementptr %array.0, %array.0* %102, i32 0, i32 0
  %117 = load i32*, i32** %116, align 8
  %118 = getelementptr inbounds i32, i32* %117, i32 %115
  store i32 3, i32* %118, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %119 = load %array.0*, %array.0** %i, align 8
  %120 = getelementptr %array.0, %array.0* %119, i32 0, i32 2
  %121 = load %dimension_descriptor*, %dimension_descriptor** %120, align 8
  %122 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %121, i32 0
  %123 = getelementptr %dimension_descriptor, %dimension_descriptor* %122, i32 0, i32 1
  %124 = load i32, i32* %123, align 4
  %125 = sub i32 2, %124
  %126 = getelementptr %dimension_descriptor, %dimension_descriptor* %122, i32 0, i32 0
  %127 = load i32, i32* %126, align 4
  %128 = mul i32 %127, %125
  %129 = add i32 0, %128
  %130 = getelementptr %array.0, %array.0* %119, i32 0, i32 1
  %131 = load i32, i32* %130, align 4
  %132 = add i32 %129, %131
  %133 = getelementptr %array.0, %array.0* %119, i32 0, i32 0
  %134 = load i32*, i32** %133, align 8
  %135 = getelementptr inbounds i32, i32* %134, i32 %132
  store i32 7, i32* %135, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %136 = getelementptr [2 x i32], [2 x i32]* %iv, i32 0, i32 0
  %137 = load i32, i32* %136, align 4
  %138 = icmp ne i32 %137, 1
  br i1 %138, label %then5, label %else6

then5:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont7

else6:                                            ; preds = %ifcont
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  %139 = getelementptr [2 x i32], [2 x i32]* %iv, i32 0, i32 1
  %140 = load i32, i32* %139, align 4
  %141 = icmp ne i32 %140, 7
  br i1 %141, label %then8, label %else9

then8:                                            ; preds = %ifcont7
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont10

else9:                                            ; preds = %ifcont7
  br label %ifcont10

ifcont10:                                         ; preds = %else9, %then8
  %142 = load %array*, %array** %r, align 8
  %143 = getelementptr %array, %array* %142, i32 0, i32 2
  %144 = load %dimension_descriptor*, %dimension_descriptor** %143, align 8
  %145 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %144, i32 0
  %146 = getelementptr %dimension_descriptor, %dimension_descriptor* %145, i32 0, i32 1
  %147 = load i32, i32* %146, align 4
  store i32 %147, i32* %u2, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.end, %ifcont10
  %148 = load i32, i32* %u2, align 4
  %149 = load %array*, %array** %r, align 8
  %150 = getelementptr %array, %array* %149, i32 0, i32 2
  %151 = load %dimension_descriptor*, %dimension_descriptor** %150, align 8
  %152 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %151, i32 0
  %153 = getelementptr %dimension_descriptor, %dimension_descriptor* %152, i32 0, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = getelementptr %dimension_descriptor, %dimension_descriptor* %152, i32 0, i32 2
  %156 = load i32, i32* %155, align 4
  %157 = add i32 %156, %154
  %158 = sub i32 %157, 1
  %159 = icmp sle i32 %148, %158
  br i1 %159, label %loop.body, label %loop.end13

loop.body:                                        ; preds = %loop.head
  %160 = load %array*, %array** %r, align 8
  %161 = getelementptr %array, %array* %160, i32 0, i32 2
  %162 = load %dimension_descriptor*, %dimension_descriptor** %161, align 8
  %163 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %162, i32 1
  %164 = getelementptr %dimension_descriptor, %dimension_descriptor* %163, i32 0, i32 1
  %165 = load i32, i32* %164, align 4
  store i32 %165, i32* %v3, align 4
  br label %loop.head11

loop.head11:                                      ; preds = %loop.body12, %loop.body
  %166 = load i32, i32* %v3, align 4
  %167 = load %array*, %array** %r, align 8
  %168 = getelementptr %array, %array* %167, i32 0, i32 2
  %169 = load %dimension_descriptor*, %dimension_descriptor** %168, align 8
  %170 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %169, i32 1
  %171 = getelementptr %dimension_descriptor, %dimension_descriptor* %170, i32 0, i32 1
  %172 = load i32, i32* %171, align 4
  %173 = getelementptr %dimension_descriptor, %dimension_descriptor* %170, i32 0, i32 2
  %174 = load i32, i32* %173, align 4
  %175 = add i32 %174, %172
  %176 = sub i32 %175, 1
  %177 = icmp sle i32 %166, %176
  br i1 %177, label %loop.body12, label %loop.end

loop.body12:                                      ; preds = %loop.head11
  %178 = load i32, i32* %u2, align 4
  %179 = load i32, i32* %v3, align 4
  %180 = sub i32 %178, 1
  %181 = mul i32 1, %180
  %182 = add i32 0, %181
  %183 = sub i32 %179, 1
  %184 = mul i32 2, %183
  %185 = add i32 %182, %184
  %186 = getelementptr [6 x float], [6 x float]* %rv, i32 0, i32 %185
  %187 = load i32, i32* %u2, align 4
  %188 = load i32, i32* %v3, align 4
  %189 = mul i32 %187, %188
  %190 = sitofp i32 %189 to float
  store float %190, float* %186, align 4
  %191 = load i32, i32* %v3, align 4
  %192 = add i32 %191, 1
  store i32 %192, i32* %v3, align 4
  br label %loop.head11

loop.end:                                         ; preds = %loop.head11
  %193 = load i32, i32* %u2, align 4
  %194 = add i32 %193, 1
  store i32 %194, i32* %u2, align 4
  br label %loop.head

loop.end13:                                       ; preds = %loop.head
  call void @check_real(%array** %r)
  %195 = load %array*, %array** %r, align 8
  call void @check_real_without_pointer(%array* %195)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %loop.end13
  ret i32 0
}

define void @check_real(%array** %r) {
.entry:
  %u = alloca i32, align 4
  %v = alloca i32, align 4
  %0 = load %array*, %array** %r, align 8
  %1 = getelementptr %array, %array* %0, i32 0, i32 2
  %2 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %3 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %2, i32 0
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %3, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %u, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.end, %.entry
  %6 = load i32, i32* %u, align 4
  %7 = load %array*, %array** %r, align 8
  %8 = getelementptr %array, %array* %7, i32 0, i32 2
  %9 = load %dimension_descriptor*, %dimension_descriptor** %8, align 8
  %10 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %9, i32 0
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %10, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr %dimension_descriptor, %dimension_descriptor* %10, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = add i32 %14, %12
  %16 = sub i32 %15, 1
  %17 = icmp sle i32 %6, %16
  br i1 %17, label %loop.body, label %loop.end3

loop.body:                                        ; preds = %loop.head
  %18 = load %array*, %array** %r, align 8
  %19 = getelementptr %array, %array* %18, i32 0, i32 2
  %20 = load %dimension_descriptor*, %dimension_descriptor** %19, align 8
  %21 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %20, i32 1
  %22 = getelementptr %dimension_descriptor, %dimension_descriptor* %21, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %v, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont, %loop.body
  %24 = load i32, i32* %v, align 4
  %25 = load %array*, %array** %r, align 8
  %26 = getelementptr %array, %array* %25, i32 0, i32 2
  %27 = load %dimension_descriptor*, %dimension_descriptor** %26, align 8
  %28 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %27, i32 1
  %29 = getelementptr %dimension_descriptor, %dimension_descriptor* %28, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr %dimension_descriptor, %dimension_descriptor* %28, i32 0, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = add i32 %32, %30
  %34 = sub i32 %33, 1
  %35 = icmp sle i32 %24, %34
  br i1 %35, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %36 = load i32, i32* %u, align 4
  %37 = load i32, i32* %v, align 4
  %38 = load %array*, %array** %r, align 8
  %39 = getelementptr %array, %array* %38, i32 0, i32 2
  %40 = load %dimension_descriptor*, %dimension_descriptor** %39, align 8
  %41 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %40, i32 0
  %42 = getelementptr %dimension_descriptor, %dimension_descriptor* %41, i32 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = sub i32 %36, %43
  %45 = getelementptr %dimension_descriptor, %dimension_descriptor* %41, i32 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = mul i32 %46, %44
  %48 = add i32 0, %47
  %49 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %40, i32 1
  %50 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = sub i32 %37, %51
  %53 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = mul i32 %54, %52
  %56 = add i32 %48, %55
  %57 = getelementptr %array, %array* %38, i32 0, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = add i32 %56, %58
  %60 = getelementptr %array, %array* %38, i32 0, i32 0
  %61 = load float*, float** %60, align 8
  %62 = getelementptr inbounds float, float* %61, i32 %59
  %63 = load float, float* %62, align 4
  %64 = load i32, i32* %u, align 4
  %65 = load i32, i32* %v, align 4
  %66 = mul i32 %64, %65
  %67 = sitofp i32 %66 to float
  %68 = fcmp une float %63, %67
  br i1 %68, label %then, label %else

then:                                             ; preds = %loop.body2
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.body2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %69 = load i32, i32* %v, align 4
  %70 = add i32 %69, 1
  store i32 %70, i32* %v, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %71 = load i32, i32* %u, align 4
  %72 = add i32 %71, 1
  store i32 %72, i32* %u, align 4
  br label %loop.head

loop.end3:                                        ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end3
  ret void
}

define void @check_real_without_pointer(%array* %r) {
.entry:
  %u = alloca i32, align 4
  %v = alloca i32, align 4
  %0 = getelementptr %array, %array* %r, i32 0, i32 2
  %1 = load %dimension_descriptor*, %dimension_descriptor** %0, align 8
  %2 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 0
  %3 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  store i32 %4, i32* %u, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.end, %.entry
  %5 = load i32, i32* %u, align 4
  %6 = getelementptr %array, %array* %r, i32 0, i32 2
  %7 = load %dimension_descriptor*, %dimension_descriptor** %6, align 8
  %8 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %7, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %8, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %8, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = sub i32 %13, 1
  %15 = icmp sle i32 %5, %14
  br i1 %15, label %loop.body, label %loop.end3

loop.body:                                        ; preds = %loop.head
  %16 = getelementptr %array, %array* %r, i32 0, i32 2
  %17 = load %dimension_descriptor*, %dimension_descriptor** %16, align 8
  %18 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %17, i32 1
  %19 = getelementptr %dimension_descriptor, %dimension_descriptor* %18, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  store i32 %20, i32* %v, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont, %loop.body
  %21 = load i32, i32* %v, align 4
  %22 = getelementptr %array, %array* %r, i32 0, i32 2
  %23 = load %dimension_descriptor*, %dimension_descriptor** %22, align 8
  %24 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %23, i32 1
  %25 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, %26
  %30 = sub i32 %29, 1
  %31 = icmp sle i32 %21, %30
  br i1 %31, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %32 = load i32, i32* %u, align 4
  %33 = load i32, i32* %v, align 4
  %34 = getelementptr %array, %array* %r, i32 0, i32 2
  %35 = load %dimension_descriptor*, %dimension_descriptor** %34, align 8
  %36 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %35, i32 0
  %37 = getelementptr %dimension_descriptor, %dimension_descriptor* %36, i32 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = sub i32 %32, %38
  %40 = getelementptr %dimension_descriptor, %dimension_descriptor* %36, i32 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = mul i32 %41, %39
  %43 = add i32 0, %42
  %44 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %35, i32 1
  %45 = getelementptr %dimension_descriptor, %dimension_descriptor* %44, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = sub i32 %33, %46
  %48 = getelementptr %dimension_descriptor, %dimension_descriptor* %44, i32 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = mul i32 %49, %47
  %51 = add i32 %43, %50
  %52 = getelementptr %array, %array* %r, i32 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = add i32 %51, %53
  %55 = getelementptr %array, %array* %r, i32 0, i32 0
  %56 = load float*, float** %55, align 8
  %57 = getelementptr inbounds float, float* %56, i32 %54
  %58 = load float, float* %57, align 4
  %59 = load i32, i32* %u, align 4
  %60 = load i32, i32* %v, align 4
  %61 = mul i32 %59, %60
  %62 = sitofp i32 %61 to float
  %63 = fcmp une float %58, %62
  br i1 %63, label %then, label %else

then:                                             ; preds = %loop.body2
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.body2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %64 = load i32, i32* %v, align 4
  %65 = add i32 %64, 1
  store i32 %65, i32* %v, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %66 = load i32, i32* %u, align 4
  %67 = add i32 %66, 1
  store i32 %67, i32* %u, align 4
  br label %loop.head

loop.end3:                                        ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end3
  ret void
}

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_call_initial_functions(i32, i8**)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0

declare void @_lpython_free_argv()

attributes #0 = { argmemonly nounwind willreturn }
