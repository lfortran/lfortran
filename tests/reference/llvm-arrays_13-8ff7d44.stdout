; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { float*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }
%array.0 = type { i32*, i32, %dimension_descriptor*, i1, i32 }

@0 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@9 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @check_real(%array** %r) {
.entry:
  %u = alloca i32, align 4
  %v = alloca i32, align 4
  %0 = load %array*, %array** %r, align 8
  %1 = getelementptr %array, %array* %0, i32 0, i32 2
  %2 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %3 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %2, i32 0
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %3, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %u, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.end, %.entry
  %6 = load i32, i32* %u, align 4
  %7 = load %array*, %array** %r, align 8
  %8 = getelementptr %array, %array* %7, i32 0, i32 2
  %9 = load %dimension_descriptor*, %dimension_descriptor** %8, align 8
  %10 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %9, i32 0
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %10, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr %dimension_descriptor, %dimension_descriptor* %10, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = add i32 %14, %12
  %16 = sub i32 %15, 1
  %17 = icmp sle i32 %6, %16
  br i1 %17, label %loop.body, label %loop.end3

loop.body:                                        ; preds = %loop.head
  %18 = load %array*, %array** %r, align 8
  %19 = getelementptr %array, %array* %18, i32 0, i32 2
  %20 = load %dimension_descriptor*, %dimension_descriptor** %19, align 8
  %21 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %20, i32 1
  %22 = getelementptr %dimension_descriptor, %dimension_descriptor* %21, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %v, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont, %loop.body
  %24 = load i32, i32* %v, align 4
  %25 = load %array*, %array** %r, align 8
  %26 = getelementptr %array, %array* %25, i32 0, i32 2
  %27 = load %dimension_descriptor*, %dimension_descriptor** %26, align 8
  %28 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %27, i32 1
  %29 = getelementptr %dimension_descriptor, %dimension_descriptor* %28, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr %dimension_descriptor, %dimension_descriptor* %28, i32 0, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = add i32 %32, %30
  %34 = sub i32 %33, 1
  %35 = icmp sle i32 %24, %34
  br i1 %35, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %36 = load i32, i32* %u, align 4
  %37 = load i32, i32* %v, align 4
  %38 = load %array*, %array** %r, align 8
  %39 = getelementptr %array, %array* %38, i32 0, i32 2
  %40 = load %dimension_descriptor*, %dimension_descriptor** %39, align 8
  %41 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %40, i32 0
  %42 = getelementptr %dimension_descriptor, %dimension_descriptor* %41, i32 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = sub i32 %36, %43
  %45 = getelementptr %dimension_descriptor, %dimension_descriptor* %41, i32 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = mul i32 %46, %44
  %48 = add i32 0, %47
  %49 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %40, i32 1
  %50 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = sub i32 %37, %51
  %53 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = mul i32 %54, %52
  %56 = add i32 %48, %55
  %57 = getelementptr %array, %array* %38, i32 0, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = add i32 %56, %58
  %60 = getelementptr %array, %array* %38, i32 0, i32 0
  %61 = load float*, float** %60, align 8
  %62 = getelementptr inbounds float, float* %61, i32 %59
  %63 = load float, float* %62, align 4
  %64 = load i32, i32* %u, align 4
  %65 = load i32, i32* %v, align 4
  %66 = mul i32 %64, %65
  %67 = sitofp i32 %66 to float
  %68 = fcmp one float %63, %67
  br i1 %68, label %then, label %else

then:                                             ; preds = %loop.body2
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.body2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %69 = load i32, i32* %v, align 4
  %70 = add i32 %69, 1
  store i32 %70, i32* %v, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %71 = load i32, i32* %u, align 4
  %72 = add i32 %71, 1
  store i32 %72, i32* %u, align 4
  br label %loop.head

loop.end3:                                        ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end3
  ret void
}

define void @check_real_without_pointer(%array* %r) {
.entry:
  %u = alloca i32, align 4
  %v = alloca i32, align 4
  %0 = getelementptr %array, %array* %r, i32 0, i32 2
  %1 = load %dimension_descriptor*, %dimension_descriptor** %0, align 8
  %2 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 0
  %3 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  store i32 %4, i32* %u, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.end, %.entry
  %5 = load i32, i32* %u, align 4
  %6 = getelementptr %array, %array* %r, i32 0, i32 2
  %7 = load %dimension_descriptor*, %dimension_descriptor** %6, align 8
  %8 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %7, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %8, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %8, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = sub i32 %13, 1
  %15 = icmp sle i32 %5, %14
  br i1 %15, label %loop.body, label %loop.end3

loop.body:                                        ; preds = %loop.head
  %16 = getelementptr %array, %array* %r, i32 0, i32 2
  %17 = load %dimension_descriptor*, %dimension_descriptor** %16, align 8
  %18 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %17, i32 1
  %19 = getelementptr %dimension_descriptor, %dimension_descriptor* %18, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  store i32 %20, i32* %v, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont, %loop.body
  %21 = load i32, i32* %v, align 4
  %22 = getelementptr %array, %array* %r, i32 0, i32 2
  %23 = load %dimension_descriptor*, %dimension_descriptor** %22, align 8
  %24 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %23, i32 1
  %25 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, %26
  %30 = sub i32 %29, 1
  %31 = icmp sle i32 %21, %30
  br i1 %31, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %32 = load i32, i32* %u, align 4
  %33 = load i32, i32* %v, align 4
  %34 = getelementptr %array, %array* %r, i32 0, i32 2
  %35 = load %dimension_descriptor*, %dimension_descriptor** %34, align 8
  %36 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %35, i32 0
  %37 = getelementptr %dimension_descriptor, %dimension_descriptor* %36, i32 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = sub i32 %32, %38
  %40 = getelementptr %dimension_descriptor, %dimension_descriptor* %36, i32 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = mul i32 %41, %39
  %43 = add i32 0, %42
  %44 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %35, i32 1
  %45 = getelementptr %dimension_descriptor, %dimension_descriptor* %44, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = sub i32 %33, %46
  %48 = getelementptr %dimension_descriptor, %dimension_descriptor* %44, i32 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = mul i32 %49, %47
  %51 = add i32 %43, %50
  %52 = getelementptr %array, %array* %r, i32 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = add i32 %51, %53
  %55 = getelementptr %array, %array* %r, i32 0, i32 0
  %56 = load float*, float** %55, align 8
  %57 = getelementptr inbounds float, float* %56, i32 %54
  %58 = load float, float* %57, align 4
  %59 = load i32, i32* %u, align 4
  %60 = load i32, i32* %v, align 4
  %61 = mul i32 %59, %60
  %62 = sitofp i32 %61 to float
  %63 = fcmp one float %58, %62
  br i1 %63, label %then, label %else

then:                                             ; preds = %loop.body2
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.body2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %64 = load i32, i32* %v, align 4
  %65 = add i32 %64, 1
  store i32 %65, i32* %v, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %66 = load i32, i32* %u, align 4
  %67 = add i32 %66, 1
  store i32 %67, i32* %u, align 4
  br label %loop.head

loop.end3:                                        ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end3
  ret void
}

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %array_descriptor2 = alloca %array, align 8
  %array_descriptor = alloca %array.0, align 8
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %i = alloca %array.0*, align 8
  store %array.0* null, %array.0** %i, align 8
  %arr_desc = alloca %array.0, align 8
  %2 = getelementptr %array.0, %array.0* %arr_desc, i32 0, i32 2
  %3 = alloca i32, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = alloca %dimension_descriptor, i32 %4, align 8
  store %dimension_descriptor* %5, %dimension_descriptor** %2, align 8
  %6 = getelementptr %array.0, %array.0* %arr_desc, i32 0, i32 4
  store i32 1, i32* %6, align 4
  %7 = getelementptr %array.0, %array.0* %arr_desc, i32 0, i32 0
  store i32* null, i32** %7, align 8
  store %array.0* %arr_desc, %array.0** %i, align 8
  %iv = alloca [2 x i32], align 4
  %r = alloca %array*, align 8
  store %array* null, %array** %r, align 8
  %arr_desc1 = alloca %array, align 8
  %8 = getelementptr %array, %array* %arr_desc1, i32 0, i32 2
  %9 = alloca i32, align 4
  store i32 2, i32* %9, align 4
  %10 = load i32, i32* %9, align 4
  %11 = alloca %dimension_descriptor, i32 %10, align 8
  store %dimension_descriptor* %11, %dimension_descriptor** %8, align 8
  %12 = getelementptr %array, %array* %arr_desc1, i32 0, i32 4
  store i32 2, i32* %12, align 4
  %13 = getelementptr %array, %array* %arr_desc1, i32 0, i32 0
  store float* null, float** %13, align 8
  store %array* %arr_desc1, %array** %r, align 8
  %rv = alloca [6 x float], align 4
  %u = alloca i32, align 4
  %v = alloca i32, align 4
  %14 = getelementptr [2 x i32], [2 x i32]* %iv, i32 0, i32 0
  %15 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 0
  store i32* %14, i32** %15, align 8
  %16 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 1
  store i32 0, i32* %16, align 4
  %17 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 2
  %18 = alloca %dimension_descriptor, align 8
  store %dimension_descriptor* %18, %dimension_descriptor** %17, align 8
  %19 = getelementptr %array.0, %array.0* %array_descriptor, i32 0, i32 4
  store i32 1, i32* %19, align 4
  %20 = load %dimension_descriptor*, %dimension_descriptor** %17, align 8
  %21 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %20, i32 0
  %22 = getelementptr %dimension_descriptor, %dimension_descriptor* %21, i32 0, i32 0
  %23 = getelementptr %dimension_descriptor, %dimension_descriptor* %21, i32 0, i32 1
  %24 = getelementptr %dimension_descriptor, %dimension_descriptor* %21, i32 0, i32 2
  store i32 1, i32* %22, align 4
  store i32 1, i32* %23, align 4
  store i32 2, i32* %24, align 4
  store %array.0* %array_descriptor, %array.0** %i, align 8
  %25 = getelementptr [6 x float], [6 x float]* %rv, i32 0, i32 0
  %26 = getelementptr %array, %array* %array_descriptor2, i32 0, i32 0
  store float* %25, float** %26, align 8
  %27 = getelementptr %array, %array* %array_descriptor2, i32 0, i32 1
  store i32 0, i32* %27, align 4
  %28 = getelementptr %array, %array* %array_descriptor2, i32 0, i32 2
  %29 = alloca %dimension_descriptor, i32 2, align 8
  store %dimension_descriptor* %29, %dimension_descriptor** %28, align 8
  %30 = getelementptr %array, %array* %array_descriptor2, i32 0, i32 4
  store i32 2, i32* %30, align 4
  %31 = load %dimension_descriptor*, %dimension_descriptor** %28, align 8
  %32 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %31, i32 0
  %33 = getelementptr %dimension_descriptor, %dimension_descriptor* %32, i32 0, i32 0
  %34 = getelementptr %dimension_descriptor, %dimension_descriptor* %32, i32 0, i32 1
  %35 = getelementptr %dimension_descriptor, %dimension_descriptor* %32, i32 0, i32 2
  store i32 1, i32* %33, align 4
  store i32 1, i32* %34, align 4
  store i32 2, i32* %35, align 4
  %36 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %31, i32 1
  %37 = getelementptr %dimension_descriptor, %dimension_descriptor* %36, i32 0, i32 0
  %38 = getelementptr %dimension_descriptor, %dimension_descriptor* %36, i32 0, i32 1
  %39 = getelementptr %dimension_descriptor, %dimension_descriptor* %36, i32 0, i32 2
  store i32 2, i32* %37, align 4
  store i32 1, i32* %38, align 4
  store i32 3, i32* %39, align 4
  store %array* %array_descriptor2, %array** %r, align 8
  %40 = load %array.0*, %array.0** %i, align 8
  %41 = getelementptr %array.0, %array.0* %40, i32 0, i32 2
  %42 = load %dimension_descriptor*, %dimension_descriptor** %41, align 8
  %43 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %42, i32 0
  %44 = getelementptr %dimension_descriptor, %dimension_descriptor* %43, i32 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = sub i32 1, %45
  %47 = getelementptr %dimension_descriptor, %dimension_descriptor* %43, i32 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = mul i32 %48, %46
  %50 = add i32 0, %49
  %51 = getelementptr %array.0, %array.0* %40, i32 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = add i32 %50, %52
  %54 = getelementptr %array.0, %array.0* %40, i32 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = getelementptr inbounds i32, i32* %55, i32 %53
  store i32 1, i32* %56, align 4
  %57 = load %array.0*, %array.0** %i, align 8
  %58 = getelementptr %array.0, %array.0* %57, i32 0, i32 2
  %59 = load %dimension_descriptor*, %dimension_descriptor** %58, align 8
  %60 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %59, i32 0
  %61 = getelementptr %dimension_descriptor, %dimension_descriptor* %60, i32 0, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = sub i32 1, %62
  %64 = getelementptr %dimension_descriptor, %dimension_descriptor* %60, i32 0, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = mul i32 %65, %63
  %67 = add i32 0, %66
  %68 = getelementptr %array.0, %array.0* %57, i32 0, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = add i32 %67, %69
  %71 = getelementptr %array.0, %array.0* %57, i32 0, i32 0
  %72 = load i32*, i32** %71, align 8
  %73 = getelementptr inbounds i32, i32* %72, i32 %70
  %74 = load i32, i32* %73, align 4
  %75 = icmp ne i32 %74, 1
  br i1 %75, label %then, label %else

then:                                             ; preds = %.entry
  %76 = load %array.0*, %array.0** %i, align 8
  %77 = getelementptr %array.0, %array.0* %76, i32 0, i32 2
  %78 = load %dimension_descriptor*, %dimension_descriptor** %77, align 8
  %79 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %78, i32 0
  %80 = getelementptr %dimension_descriptor, %dimension_descriptor* %79, i32 0, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = sub i32 2, %81
  %83 = getelementptr %dimension_descriptor, %dimension_descriptor* %79, i32 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = mul i32 %84, %82
  %86 = add i32 0, %85
  %87 = getelementptr %array.0, %array.0* %76, i32 0, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = add i32 %86, %88
  %90 = getelementptr %array.0, %array.0* %76, i32 0, i32 0
  %91 = load i32*, i32** %90, align 8
  %92 = getelementptr inbounds i32, i32* %91, i32 %89
  store i32 3, i32* %92, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %93 = load %array.0*, %array.0** %i, align 8
  %94 = getelementptr %array.0, %array.0* %93, i32 0, i32 2
  %95 = load %dimension_descriptor*, %dimension_descriptor** %94, align 8
  %96 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %95, i32 0
  %97 = getelementptr %dimension_descriptor, %dimension_descriptor* %96, i32 0, i32 1
  %98 = load i32, i32* %97, align 4
  %99 = sub i32 2, %98
  %100 = getelementptr %dimension_descriptor, %dimension_descriptor* %96, i32 0, i32 0
  %101 = load i32, i32* %100, align 4
  %102 = mul i32 %101, %99
  %103 = add i32 0, %102
  %104 = getelementptr %array.0, %array.0* %93, i32 0, i32 1
  %105 = load i32, i32* %104, align 4
  %106 = add i32 %103, %105
  %107 = getelementptr %array.0, %array.0* %93, i32 0, i32 0
  %108 = load i32*, i32** %107, align 8
  %109 = getelementptr inbounds i32, i32* %108, i32 %106
  store i32 7, i32* %109, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %110 = getelementptr [2 x i32], [2 x i32]* %iv, i32 0, i32 0
  %111 = load i32, i32* %110, align 4
  %112 = icmp ne i32 %111, 1
  br i1 %112, label %then3, label %else4

then3:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont5

else4:                                            ; preds = %ifcont
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  %113 = getelementptr [2 x i32], [2 x i32]* %iv, i32 0, i32 1
  %114 = load i32, i32* %113, align 4
  %115 = icmp ne i32 %114, 7
  br i1 %115, label %then6, label %else7

then6:                                            ; preds = %ifcont5
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont8

else7:                                            ; preds = %ifcont5
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %then6
  %116 = load %array*, %array** %r, align 8
  %117 = getelementptr %array, %array* %116, i32 0, i32 2
  %118 = load %dimension_descriptor*, %dimension_descriptor** %117, align 8
  %119 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %118, i32 0
  %120 = getelementptr %dimension_descriptor, %dimension_descriptor* %119, i32 0, i32 1
  %121 = load i32, i32* %120, align 4
  store i32 %121, i32* %u, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.end, %ifcont8
  %122 = load i32, i32* %u, align 4
  %123 = load %array*, %array** %r, align 8
  %124 = getelementptr %array, %array* %123, i32 0, i32 2
  %125 = load %dimension_descriptor*, %dimension_descriptor** %124, align 8
  %126 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %125, i32 0
  %127 = getelementptr %dimension_descriptor, %dimension_descriptor* %126, i32 0, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = getelementptr %dimension_descriptor, %dimension_descriptor* %126, i32 0, i32 2
  %130 = load i32, i32* %129, align 4
  %131 = add i32 %130, %128
  %132 = sub i32 %131, 1
  %133 = icmp sle i32 %122, %132
  br i1 %133, label %loop.body, label %loop.end11

loop.body:                                        ; preds = %loop.head
  %134 = load %array*, %array** %r, align 8
  %135 = getelementptr %array, %array* %134, i32 0, i32 2
  %136 = load %dimension_descriptor*, %dimension_descriptor** %135, align 8
  %137 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %136, i32 1
  %138 = getelementptr %dimension_descriptor, %dimension_descriptor* %137, i32 0, i32 1
  %139 = load i32, i32* %138, align 4
  store i32 %139, i32* %v, align 4
  br label %loop.head9

loop.head9:                                       ; preds = %loop.body10, %loop.body
  %140 = load i32, i32* %v, align 4
  %141 = load %array*, %array** %r, align 8
  %142 = getelementptr %array, %array* %141, i32 0, i32 2
  %143 = load %dimension_descriptor*, %dimension_descriptor** %142, align 8
  %144 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %143, i32 1
  %145 = getelementptr %dimension_descriptor, %dimension_descriptor* %144, i32 0, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = getelementptr %dimension_descriptor, %dimension_descriptor* %144, i32 0, i32 2
  %148 = load i32, i32* %147, align 4
  %149 = add i32 %148, %146
  %150 = sub i32 %149, 1
  %151 = icmp sle i32 %140, %150
  br i1 %151, label %loop.body10, label %loop.end

loop.body10:                                      ; preds = %loop.head9
  %152 = load i32, i32* %u, align 4
  %153 = load i32, i32* %v, align 4
  %154 = sub i32 %152, 1
  %155 = mul i32 1, %154
  %156 = add i32 0, %155
  %157 = sub i32 %153, 1
  %158 = mul i32 2, %157
  %159 = add i32 %156, %158
  %160 = getelementptr [6 x float], [6 x float]* %rv, i32 0, i32 %159
  %161 = load i32, i32* %u, align 4
  %162 = load i32, i32* %v, align 4
  %163 = mul i32 %161, %162
  %164 = sitofp i32 %163 to float
  store float %164, float* %160, align 4
  %165 = load i32, i32* %v, align 4
  %166 = add i32 %165, 1
  store i32 %166, i32* %v, align 4
  br label %loop.head9

loop.end:                                         ; preds = %loop.head9
  %167 = load i32, i32* %u, align 4
  %168 = add i32 %167, 1
  store i32 %168, i32* %u, align 4
  br label %loop.head

loop.end11:                                       ; preds = %loop.head
  call void @check_real(%array** %r)
  %169 = load %array*, %array** %r, align 8
  call void @check_real_without_pointer(%array* %169)
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)
