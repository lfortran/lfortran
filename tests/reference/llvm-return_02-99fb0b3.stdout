; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [10 x i8] c"calling b\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@6 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@7 = private unnamed_addr constant [2 x i8] c" \00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@10 = private unnamed_addr constant [2 x i8] c" \00", align 1
@11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@12 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@13 = private unnamed_addr constant [2 x i8] c" \00", align 1
@14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@15 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1

define i32 @__module_many_returns_b(i32* %a) {
.entry:
  %b = alloca i32, align 4
  %e = alloca i32, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %0 = call i32 @__module_many_returns_d(i32* %a)
  store i32 %0, i32* %b, align 4
  br label %return

return:                                           ; preds = %.entry
  %1 = load i32, i32* %b, align 4
  ret i32 %1
}

define i32 @__module_many_returns_d(i32* %i) {
.entry:
  %d = alloca i32, align 4
  %0 = load i32, i32* %i, align 4
  %1 = icmp eq i32 %0, 1
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  store i32 1, i32* %d, align 4
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  %2 = load i32, i32* %i, align 4
  %3 = icmp eq i32 %2, 2
  br i1 %3, label %then1, label %else3

then1:                                            ; preds = %ifcont
  store i32 2, i32* %d, align 4
  br label %return

unreachable_after_return2:                        ; No predecessors!
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %unreachable_after_return2
  %4 = load i32, i32* %i, align 4
  %5 = icmp eq i32 %4, 3
  br i1 %5, label %then5, label %else7

then5:                                            ; preds = %ifcont4
  store i32 3, i32* %d, align 4
  br label %return

unreachable_after_return6:                        ; No predecessors!
  br label %ifcont8

else7:                                            ; preds = %ifcont4
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %unreachable_after_return6
  store i32 999, i32* %d, align 4
  br label %return

return:                                           ; preds = %ifcont8, %then5, %then1, %then
  %6 = load i32, i32* %d, align 4
  ret i32 %6
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main() {
.entry:
  %call_arg_value3 = alloca i32, align 4
  %call_arg_value2 = alloca i32, align 4
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 1, i32* %call_arg_value, align 4
  %0 = call i32 @__module_many_returns_b(i32* %call_arg_value)
  store i32 %0, i32* %c, align 4
  %1 = load i32, i32* %c, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i32 %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  store i32 2, i32* %call_arg_value1, align 4
  %2 = call i32 @__module_many_returns_b(i32* %call_arg_value1)
  store i32 %2, i32* %c, align 4
  %3 = load i32, i32* %c, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i32 %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0))
  store i32 3, i32* %call_arg_value2, align 4
  %4 = call i32 @__module_many_returns_b(i32* %call_arg_value2)
  store i32 %4, i32* %c, align 4
  %5 = load i32, i32* %c, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i32 0, i32 0), i32 %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i32 0, i32 0))
  store i32 4, i32* %call_arg_value3, align 4
  %6 = call i32 @__module_many_returns_b(i32* %call_arg_value3)
  store i32 %6, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @15, i32 0, i32 0), i32 %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i32 0, i32 0))
  ret i32 0
}
