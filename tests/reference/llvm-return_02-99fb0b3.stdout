; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@string_const_data = private constant [9 x i8] c"calling b"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([9 x i8], [9 x i8]* @string_const_data, i32 0, i32 0), i64 9 }>
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.2 = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.3 = private unnamed_addr constant [3 x i8] c"I4\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @__module_many_returns_b(i32* %a) {
.entry:
  %b = alloca i32, align 4
  %e = alloca i32, align 4
  %0 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %0, i32 9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 1)
  %1 = call i32 @b.__module_many_returns_d(i32* %a)
  store i32 %1, i32* %b, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load i32, i32* %b, align 4
  ret i32 %2
}

define i32 @b.__module_many_returns_d(i32* %i) {
.entry:
  %d = alloca i32, align 4
  %0 = load i32, i32* %i, align 4
  %1 = icmp eq i32 %0, 1
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  store i32 1, i32* %d, align 4
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  %2 = load i32, i32* %i, align 4
  %3 = icmp eq i32 %2, 2
  br i1 %3, label %then1, label %else3

then1:                                            ; preds = %ifcont
  store i32 2, i32* %d, align 4
  br label %return

unreachable_after_return2:                        ; No predecessors!
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %unreachable_after_return2
  %4 = load i32, i32* %i, align 4
  %5 = icmp eq i32 %4, 3
  br i1 %5, label %then5, label %else7

then5:                                            ; preds = %ifcont4
  store i32 3, i32* %d, align 4
  br label %return

unreachable_after_return6:                        ; No predecessors!
  br label %ifcont8

else7:                                            ; preds = %ifcont4
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %unreachable_after_return6
  store i32 999, i32* %d, align 4
  br label %return

return:                                           ; preds = %ifcont8, %then5, %then1, %then
  %6 = load i32, i32* %d, align 4
  ret i32 %6
}

declare void @_lfortran_printf(i8*, i8*, i32, i8*, i32)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value6 = alloca i32, align 4
  %call_arg_value4 = alloca i32, align 4
  %call_arg_value2 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %c = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %c1 = alloca i32, align 4
  store i32 1, i32* %call_arg_value, align 4
  %2 = call i32 @__module_many_returns_b(i32* %call_arg_value)
  store i32 %2, i32* %c1, align 4
  %3 = alloca i64, align 8
  %4 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i64* %3, i32 0, i32 0, i32* %c1)
  %5 = load i64, i64* %3, align 4
  %6 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %6 to %string_descriptor*
  %7 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %4, i8** %7, align 8
  %8 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %5, i64* %8, align 4
  %9 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  %12 = load i64, i64* %11, align 4
  %13 = trunc i64 %12 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %10, i32 %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0), i32 1)
  store i32 2, i32* %call_arg_value2, align 4
  %14 = call i32 @__module_many_returns_b(i32* %call_arg_value2)
  store i32 %14, i32* %c1, align 4
  %15 = alloca i64, align 8
  %16 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.1, i32 0, i32 0), i64* %15, i32 0, i32 0, i32* %c1)
  %17 = load i64, i64* %15, align 4
  %18 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc3 = bitcast i8* %18 to %string_descriptor*
  %19 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 0
  store i8* %16, i8** %19, align 8
  %20 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 1
  store i64 %17, i64* %20, align 4
  %21 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc3, i32 0, i32 1
  %24 = load i64, i64* %23, align 4
  %25 = trunc i64 %24 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* %22, i32 %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0), i32 1)
  store i32 3, i32* %call_arg_value4, align 4
  %26 = call i32 @__module_many_returns_b(i32* %call_arg_value4)
  store i32 %26, i32* %c1, align 4
  %27 = alloca i64, align 8
  %28 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.2, i32 0, i32 0), i64* %27, i32 0, i32 0, i32* %c1)
  %29 = load i64, i64* %27, align 4
  %30 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc5 = bitcast i8* %30 to %string_descriptor*
  %31 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc5, i32 0, i32 0
  store i8* %28, i8** %31, align 8
  %32 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc5, i32 0, i32 1
  store i64 %29, i64* %32, align 4
  %33 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc5, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc5, i32 0, i32 1
  %36 = load i64, i64* %35, align 4
  %37 = trunc i64 %36 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %34, i32 %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0), i32 1)
  store i32 4, i32* %call_arg_value6, align 4
  %38 = call i32 @__module_many_returns_b(i32* %call_arg_value6)
  store i32 %38, i32* %c1, align 4
  %39 = alloca i64, align 8
  %40 = call i8* (i8*, i64, i8*, i64*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.3, i32 0, i32 0), i64* %39, i32 0, i32 0, i32* %c1)
  %41 = load i64, i64* %39, align 4
  %42 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc7 = bitcast i8* %42 to %string_descriptor*
  %43 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc7, i32 0, i32 0
  store i8* %40, i8** %43, align 8
  %44 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc7, i32 0, i32 1
  store i64 %41, i64* %44, align 4
  %45 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc7, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc7, i32 0, i32 1
  %48 = load i64, i64* %47, align 4
  %49 = trunc i64 %48 to i32
  call void @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* %46, i32 %49, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0), i32 1)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %.entry
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i64*, i32, i32, ...)

declare i8* @_lfortran_malloc(i64)

declare void @_lpython_free_argv()
